type additionalinfo {
  """@original-field"""
  additionalInfoDbId: ID

  """
  @original-field
  A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.
  """
  additionalProperties: String

  """@original-field"""
  attribute_ID: String

  """@original-field"""
  variable_ID: String

  """@original-field"""
  list_ID: String

  """@original-field"""
  location_ID: String

  """@original-field"""
  person_ID: String

  """@original-field"""
  program_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  trial_ID: String

  """@original-field"""
  call_ID: String

  """@original-field"""
  callSet_ID: String

  """@original-field"""
  genomeMap_ID: String

  """@original-field"""
  markerPosition_ID: String

  """@original-field"""
  plate_ID: String

  """@original-field"""
  reference_ID: String

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  sample_ID: String

  """@original-field"""
  variant_ID: String

  """@original-field"""
  variantSet_ID: String

  """@original-field"""
  cross_ID: String

  """@original-field"""
  crossingProject_ID: String

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """@original-field"""
  germplasmAttributeValue_ID: String

  """@original-field"""
  pedigreeNode_ID: String

  """@original-field"""
  plannedCross_ID: String

  """@original-field"""
  seedLot_ID: String

  """@original-field"""
  seedLotTransaction_ID: String

  """@original-field"""
  event_ID: String

  """@original-field"""
  image_ID: String

  """@original-field"""
  method_ID: String

  """@original-field"""
  observation_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  observationVariable_ID: String

  """@original-field"""
  ontology_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  attribute(search: searchAttributeInput): attribute
  variable(search: searchVariableInput): variable
  list(search: searchListInput): list
  location(search: searchLocationInput): location
  person(search: searchPersonInput): person
  program(search: searchProgramInput): program
  study(search: searchStudyInput): study
  trial(search: searchTrialInput): trial
  call(search: searchCallInput): call
  callSet(search: searchCallsetInput): callset
  genomeMap(search: searchGenomemapInput): genomemap
  markerPosition(search: searchMarkerpositionInput): markerposition
  plate(search: searchPlateInput): plate
  reference(search: searchReferenceInput): reference
  referenceSet(search: searchReferencesetInput): referenceset
  sample(search: searchSampleInput): sample
  variant(search: searchVariantInput): variant
  variantSet(search: searchVariantsetInput): variantset
  cross(search: searchCrossInput): cross
  crossingProject(search: searchCrossingprojectInput): crossingproject
  germplasm(search: searchGermplasmInput): germplasm
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  germplasmAttributeValue(search: searchGermplasmattributevalueInput): germplasmattributevalue
  pedigreeNode(search: searchPedigreenodeInput): pedigreenode
  plannedCross(search: searchPlannedcrossInput): plannedcross
  seedLot(search: searchSeedlotInput): seedlot
  seedLotTransaction(search: searchSeedlottransactionInput): seedlottransaction
  event(search: searchEventInput): event
  image(search: searchImageInput): image
  method(search: searchMethodInput): method
  observation(search: searchObservationInput): observation
  observationUnit(search: searchObservationunitInput): observationunit
  observationVariable(search: searchObservationvariableInput): observationvariable
  ontology(search: searchOntologyInput): ontology
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type AdditionalinfoConnection {
  edges: [AdditionalinfoEdge]
  additionalinfos: [additionalinfo]
  pageInfo: pageInfo!
}

type AdditionalinfoEdge {
  cursor: String!
  node: additionalinfo!
}

enum additionalinfoField {
  additionalInfoDbId
  additionalProperties
  attribute_ID
  variable_ID
  list_ID
  location_ID
  person_ID
  program_ID
  study_ID
  trial_ID
  call_ID
  callSet_ID
  genomeMap_ID
  markerPosition_ID
  plate_ID
  reference_ID
  referenceSet_ID
  sample_ID
  variant_ID
  variantSet_ID
  cross_ID
  crossingProject_ID
  germplasm_ID
  germplasmAttribute_ID
  germplasmAttributeValue_ID
  pedigreeNode_ID
  plannedCross_ID
  seedLot_ID
  seedLotTransaction_ID
  event_ID
  image_ID
  method_ID
  observation_ID
  observationUnit_ID
  observationVariable_ID
  ontology_ID
  scale_ID
  trait_ID
}

input searchAdditionalinfoInput {
  field: additionalinfoField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchAdditionalinfoInput]
}

input orderAdditionalinfoInput {
  field: additionalinfoField
  order: Order
}

type Query {
  additionalinfos(search: searchAdditionalinfoInput, order: [orderAdditionalinfoInput], pagination: paginationInput!): [additionalinfo]
  readOneAdditionalinfo(additionalInfoDbId: ID!): additionalinfo
  countAdditionalinfos(search: searchAdditionalinfoInput): Int
  csvTableTemplateAdditionalinfo: [String]
  additionalinfosConnection(search: searchAdditionalinfoInput, order: [orderAdditionalinfoInput], pagination: paginationCursorInput!): AdditionalinfoConnection
  validateAdditionalinfoForCreation(additionalInfoDbId: ID!, additionalProperties: String, attribute_ID: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, call_ID: String, callSet_ID: String, genomeMap_ID: String, markerPosition_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, event_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addList: ID, addLocation: ID, addPerson: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCall: ID, addCallSet: ID, addGenomeMap: ID, addMarkerPosition: ID, addPlate: ID, addReference: ID, addReferenceSet: ID, addSample: ID, addVariant: ID, addVariantSet: ID, addCross: ID, addCrossingProject: ID, addGermplasm: ID, addGermplasmAttribute: ID, addGermplasmAttributeValue: ID, addPedigreeNode: ID, addPlannedCross: ID, addSeedLot: ID, addSeedLotTransaction: ID, addEvent: ID, addImage: ID, addMethod: ID, addObservation: ID, addObservationUnit: ID, addObservationVariable: ID, addOntology: ID, addScale: ID, addTrait: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAdditionalinfoForUpdating(additionalInfoDbId: ID!, additionalProperties: String, attribute_ID: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, call_ID: String, callSet_ID: String, genomeMap_ID: String, markerPosition_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, event_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addList: ID, removeList: ID, addLocation: ID, removeLocation: ID, addPerson: ID, removePerson: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCall: ID, removeCall: ID, addCallSet: ID, removeCallSet: ID, addGenomeMap: ID, removeGenomeMap: ID, addMarkerPosition: ID, removeMarkerPosition: ID, addPlate: ID, removePlate: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addSample: ID, removeSample: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addCross: ID, removeCross: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addGermplasmAttributeValue: ID, removeGermplasmAttributeValue: ID, addPedigreeNode: ID, removePedigreeNode: ID, addPlannedCross: ID, removePlannedCross: ID, addSeedLot: ID, removeSeedLot: ID, addSeedLotTransaction: ID, removeSeedLotTransaction: ID, addEvent: ID, removeEvent: ID, addImage: ID, removeImage: ID, addMethod: ID, removeMethod: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addOntology: ID, removeOntology: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAdditionalinfoForDeletion(additionalInfoDbId: ID!): Boolean!
  validateAdditionalinfoAfterReading(additionalInfoDbId: ID!): Boolean!

  """
  additionalinfosZendroDefinition would return the static Zendro data model definition
  """
  additionalinfosZendroDefinition: GraphQLJSONObject
  allelematrices(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationInput!): [allelematrix]
  readOneAllelematrix(alleleMatrixDbId: ID!): allelematrix
  countAllelematrices(search: searchAllelematrixInput): Int
  csvTableTemplateAllelematrix: [String]
  allelematricesConnection(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationCursorInput!): AllelematrixConnection
  validateAllelematrixForCreation(alleleMatrixDbId: ID!, expandHomozygotes: String, sepPhased: String, sepUnphased: String, unknownString: String, dataMatrices_IDs: [String], pagination_IDs: [String], addCallSets: [ID], addDataMatrices: [ID], addPagination: [ID], addVariantSets: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAllelematrixForUpdating(alleleMatrixDbId: ID!, expandHomozygotes: String, sepPhased: String, sepUnphased: String, unknownString: String, dataMatrices_IDs: [String], pagination_IDs: [String], addCallSets: [ID], removeCallSets: [ID], addDataMatrices: [ID], removeDataMatrices: [ID], addPagination: [ID], removePagination: [ID], addVariantSets: [ID], removeVariantSets: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAllelematrixForDeletion(alleleMatrixDbId: ID!): Boolean!
  validateAllelematrixAfterReading(alleleMatrixDbId: ID!): Boolean!

  """
  allelematricesZendroDefinition would return the static Zendro data model definition
  """
  allelematricesZendroDefinition: GraphQLJSONObject
  analyses(search: searchAnalysisInput, order: [orderAnalysisInput], pagination: paginationInput!): [analysis]
  readOneAnalysis(analysisDbId: ID!): analysis
  countAnalyses(search: searchAnalysisInput): Int
  csvTableTemplateAnalysis: [String]
  analysesConnection(search: searchAnalysisInput, order: [orderAnalysisInput], pagination: paginationCursorInput!): AnalysisConnection
  validateAnalysisForCreation(analysisDbId: ID!, analysisName: String, created: String, description: String, software: String, type: String, updated: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAnalysisForUpdating(analysisDbId: ID!, analysisName: String, created: String, description: String, software: String, type: String, updated: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAnalysisForDeletion(analysisDbId: ID!): Boolean!
  validateAnalysisAfterReading(analysisDbId: ID!): Boolean!

  """
  analysesZendroDefinition would return the static Zendro data model definition
  """
  analysesZendroDefinition: GraphQLJSONObject
  attributes(search: searchAttributeInput, order: [orderAttributeInput], pagination: paginationInput!): [attribute]
  readOneAttribute(attributeDbId: ID!): attribute
  countAttributes(search: searchAttributeInput): Int
  csvTableTemplateAttribute: [String]
  attributesConnection(search: searchAttributeInput, order: [orderAttributeInput], pagination: paginationCursorInput!): AttributeConnection
  validateAttributeForCreation(attributeDbId: ID!, attributeCategory: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAttributeForUpdating(attributeDbId: ID!, attributeCategory: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAttributeForDeletion(attributeDbId: ID!): Boolean!
  validateAttributeAfterReading(attributeDbId: ID!): Boolean!

  """
  attributesZendroDefinition would return the static Zendro data model definition
  """
  attributesZendroDefinition: GraphQLJSONObject
  availableformats(search: searchAvailableformatInput, order: [orderAvailableformatInput], pagination: paginationInput!): [availableformat]
  readOneAvailableformat(availableFormatDbId: ID!): availableformat
  countAvailableformats(search: searchAvailableformatInput): Int
  csvTableTemplateAvailableformat: [String]
  availableformatsConnection(search: searchAvailableformatInput, order: [orderAvailableformatInput], pagination: paginationCursorInput!): AvailableformatConnection
  validateAvailableformatForCreation(availableFormatDbId: ID!, dataFormat: String, expandHomozygotes: String, fileFormat: String, fileURL: String, sepPhased: String, sepUnphased: String, unknownString: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAvailableformatForUpdating(availableFormatDbId: ID!, dataFormat: String, expandHomozygotes: String, fileFormat: String, fileURL: String, sepPhased: String, sepUnphased: String, unknownString: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateAvailableformatForDeletion(availableFormatDbId: ID!): Boolean!
  validateAvailableformatAfterReading(availableFormatDbId: ID!): Boolean!

  """
  availableformatsZendroDefinition would return the static Zendro data model definition
  """
  availableformatsZendroDefinition: GraphQLJSONObject
  breedingmethods(search: searchBreedingmethodInput, order: [orderBreedingmethodInput], pagination: paginationInput!): [breedingmethod]
  readOneBreedingmethod(breedingMethodDbId: ID!): breedingmethod
  countBreedingmethods(search: searchBreedingmethodInput): Int
  csvTableTemplateBreedingmethod: [String]
  breedingmethodsConnection(search: searchBreedingmethodInput, order: [orderBreedingmethodInput], pagination: paginationCursorInput!): BreedingmethodConnection
  validateBreedingmethodForCreation(breedingMethodDbId: ID!, abbreviation: String, breedingMethodName: String, description: String, germplasm_IDs: [String], pedigreeNodes_IDs: [String], addGermplasm: [ID], addPedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateBreedingmethodForUpdating(breedingMethodDbId: ID!, abbreviation: String, breedingMethodName: String, description: String, germplasm_IDs: [String], pedigreeNodes_IDs: [String], addGermplasm: [ID], removeGermplasm: [ID], addPedigreeNodes: [ID], removePedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateBreedingmethodForDeletion(breedingMethodDbId: ID!): Boolean!
  validateBreedingmethodAfterReading(breedingMethodDbId: ID!): Boolean!

  """
  breedingmethodsZendroDefinition would return the static Zendro data model definition
  """
  breedingmethodsZendroDefinition: GraphQLJSONObject
  calls(search: searchCallInput, order: [orderCallInput], pagination: paginationInput!): [call]
  readOneCall(callDbId: ID!): call
  countCalls(search: searchCallInput): Int
  csvTableTemplateCall: [String]
  callsConnection(search: searchCallInput, order: [orderCallInput], pagination: paginationCursorInput!): CallConnection
  validateCallForCreation(callDbId: ID!, genotypeValue: String, phaseSet: String, additionalInfo_ID: String, callSet_ID: String, genotypeMetadata_IDs: [String], variant_ID: String, variantSet_ID: String, addAdditionalInfo: ID, addCallSet: ID, addVariant: ID, addVariantSet: ID, addGenotypeMetadata: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCallForUpdating(callDbId: ID!, genotypeValue: String, phaseSet: String, additionalInfo_ID: String, callSet_ID: String, genotypeMetadata_IDs: [String], variant_ID: String, variantSet_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addCallSet: ID, removeCallSet: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addGenotypeMetadata: [ID], removeGenotypeMetadata: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCallForDeletion(callDbId: ID!): Boolean!
  validateCallAfterReading(callDbId: ID!): Boolean!

  """
  callsZendroDefinition would return the static Zendro data model definition
  """
  callsZendroDefinition: GraphQLJSONObject
  callsets(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationInput!): [callset]
  readOneCallset(callSetDbId: ID!): callset
  countCallsets(search: searchCallsetInput): Int
  csvTableTemplateCallset: [String]
  callsetsConnection(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationCursorInput!): CallsetConnection
  validateCallsetForCreation(callSetDbId: ID!, callSetName: String, created: String, updated: String, additionalInfo_ID: String, calls_IDs: [String], externalReferences_IDs: [String], sample_ID: String, study_ID: String, addAdditionalInfo: ID, addSample: ID, addStudy: ID, addAlleleMatrices: [ID], addCalls: [ID], addExternalReferences: [ID], addVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCallsetForUpdating(callSetDbId: ID!, callSetName: String, created: String, updated: String, additionalInfo_ID: String, calls_IDs: [String], externalReferences_IDs: [String], sample_ID: String, study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addSample: ID, removeSample: ID, addStudy: ID, removeStudy: ID, addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addVariantSets: [ID], removeVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCallsetForDeletion(callSetDbId: ID!): Boolean!
  validateCallsetAfterReading(callSetDbId: ID!): Boolean!

  """
  callsetsZendroDefinition would return the static Zendro data model definition
  """
  callsetsZendroDefinition: GraphQLJSONObject
  contacts(search: searchContactInput, order: [orderContactInput], pagination: paginationInput!): [contact]
  readOneContact(contactDbId: ID!): contact
  countContacts(search: searchContactInput): Int
  csvTableTemplateContact: [String]
  contactsConnection(search: searchContactInput, order: [orderContactInput], pagination: paginationCursorInput!): ContactConnection
  validateContactForCreation(contactDbId: ID!, email: String, instituteName: String, name: String, orcid: String, type: String, addStudy: [ID], addTrial: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateContactForUpdating(contactDbId: ID!, email: String, instituteName: String, name: String, orcid: String, type: String, addStudy: [ID], removeStudy: [ID], addTrial: [ID], removeTrial: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateContactForDeletion(contactDbId: ID!): Boolean!
  validateContactAfterReading(contactDbId: ID!): Boolean!

  """
  contactsZendroDefinition would return the static Zendro data model definition
  """
  contactsZendroDefinition: GraphQLJSONObject
  contentmixtures(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationInput!): [contentmixture]
  readOneContentmixture(contentMixtureDbId: ID!): contentmixture
  countContentmixtures(search: searchContentmixtureInput): Int
  csvTableTemplateContentmixture: [String]
  contentmixturesConnection(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationCursorInput!): ContentmixtureConnection
  validateContentmixtureForCreation(contentMixtureDbId: ID!, mixturePercentage: String, cross_ID: String, germplasm_ID: String, seedLot_ID: String, addCross: ID, addGermplasm: ID, addSeedLot: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateContentmixtureForUpdating(contentMixtureDbId: ID!, mixturePercentage: String, cross_ID: String, germplasm_ID: String, seedLot_ID: String, addCross: ID, removeCross: ID, addGermplasm: ID, removeGermplasm: ID, addSeedLot: ID, removeSeedLot: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateContentmixtureForDeletion(contentMixtureDbId: ID!): Boolean!
  validateContentmixtureAfterReading(contentMixtureDbId: ID!): Boolean!

  """
  contentmixturesZendroDefinition would return the static Zendro data model definition
  """
  contentmixturesZendroDefinition: GraphQLJSONObject
  crosses(search: searchCrossInput, order: [orderCrossInput], pagination: paginationInput!): [cross]
  readOneCross(crossDbId: ID!): cross
  countCrosses(search: searchCrossInput): Int
  csvTableTemplateCross: [String]
  crossesConnection(search: searchCrossInput, order: [orderCrossInput], pagination: paginationCursorInput!): CrossConnection
  validateCrossForCreation(crossDbId: ID!, crossName: String, additionalInfo_ID: String, crossAttributes_IDs: [String], crossingProject_ID: String, externalReferences_IDs: [String], plannedCross_ID: String, pollinationEvents_IDs: [String], observationUnits_IDs: [String], contentMixture_IDs: [String], addAdditionalInfo: ID, addCrossingProject: ID, addPlannedCross: ID, addCrossAttributes: [ID], addExternalReferences: [ID], addPollinationEvents: [ID], addObservationUnits: [ID], addContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossForUpdating(crossDbId: ID!, crossName: String, additionalInfo_ID: String, crossAttributes_IDs: [String], crossingProject_ID: String, externalReferences_IDs: [String], plannedCross_ID: String, pollinationEvents_IDs: [String], observationUnits_IDs: [String], contentMixture_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCrossingProject: ID, removeCrossingProject: ID, addPlannedCross: ID, removePlannedCross: ID, addCrossAttributes: [ID], removeCrossAttributes: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addPollinationEvents: [ID], removePollinationEvents: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], addContentMixture: [ID], removeContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossForDeletion(crossDbId: ID!): Boolean!
  validateCrossAfterReading(crossDbId: ID!): Boolean!

  """
  crossesZendroDefinition would return the static Zendro data model definition
  """
  crossesZendroDefinition: GraphQLJSONObject
  crossattributes(search: searchCrossattributeInput, order: [orderCrossattributeInput], pagination: paginationInput!): [crossattribute]
  readOneCrossattribute(crossAttributeDbId: ID!): crossattribute
  countCrossattributes(search: searchCrossattributeInput): Int
  csvTableTemplateCrossattribute: [String]
  crossattributesConnection(search: searchCrossattributeInput, order: [orderCrossattributeInput], pagination: paginationCursorInput!): CrossattributeConnection
  validateCrossattributeForCreation(crossAttributeDbId: ID!, crossAttributeName: String, crossAttributeValue: String, cross_ID: String, addCross: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossattributeForUpdating(crossAttributeDbId: ID!, crossAttributeName: String, crossAttributeValue: String, cross_ID: String, addCross: ID, removeCross: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossattributeForDeletion(crossAttributeDbId: ID!): Boolean!
  validateCrossattributeAfterReading(crossAttributeDbId: ID!): Boolean!

  """
  crossattributesZendroDefinition would return the static Zendro data model definition
  """
  crossattributesZendroDefinition: GraphQLJSONObject
  crossingprojects(search: searchCrossingprojectInput, order: [orderCrossingprojectInput], pagination: paginationInput!): [crossingproject]
  readOneCrossingproject(crossingProjectDbId: ID!): crossingproject
  countCrossingprojects(search: searchCrossingprojectInput): Int
  csvTableTemplateCrossingproject: [String]
  crossingprojectsConnection(search: searchCrossingprojectInput, order: [orderCrossingprojectInput], pagination: paginationCursorInput!): CrossingprojectConnection
  validateCrossingprojectForCreation(crossingProjectDbId: ID!, commonCropName: String, crossingProjectDescription: String, crossingProjectName: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, crosses_IDs: [String], plannedCrosses_IDs: [String], pedigreeNodes_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addExternalReferences: [ID], addCrosses: [ID], addPlannedCrosses: [ID], addPedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossingprojectForUpdating(crossingProjectDbId: ID!, commonCropName: String, crossingProjectDescription: String, crossingProjectName: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, crosses_IDs: [String], plannedCrosses_IDs: [String], pedigreeNodes_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addCrosses: [ID], removeCrosses: [ID], addPlannedCrosses: [ID], removePlannedCrosses: [ID], addPedigreeNodes: [ID], removePedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossingprojectForDeletion(crossingProjectDbId: ID!): Boolean!
  validateCrossingprojectAfterReading(crossingProjectDbId: ID!): Boolean!

  """
  crossingprojectsZendroDefinition would return the static Zendro data model definition
  """
  crossingprojectsZendroDefinition: GraphQLJSONObject
  crossparents(search: searchCrossparentInput, order: [orderCrossparentInput], pagination: paginationInput!): [crossparent]
  readOneCrossparent(crossParentDbId: ID!): crossparent
  countCrossparents(search: searchCrossparentInput): Int
  csvTableTemplateCrossparent: [String]
  crossparentsConnection(search: searchCrossparentInput, order: [orderCrossparentInput], pagination: paginationCursorInput!): CrossparentConnection
  validateCrossparentForCreation(crossParentDbId: ID!, germplasm_ID: String, observationUnit_ID: String, addGermplasm: ID, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossparentForUpdating(crossParentDbId: ID!, germplasm_ID: String, observationUnit_ID: String, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateCrossparentForDeletion(crossParentDbId: ID!): Boolean!
  validateCrossparentAfterReading(crossParentDbId: ID!): Boolean!

  """
  crossparentsZendroDefinition would return the static Zendro data model definition
  """
  crossparentsZendroDefinition: GraphQLJSONObject
  datalinks(search: searchDatalinkInput, order: [orderDatalinkInput], pagination: paginationInput!): [datalink]
  readOneDatalink(dataLinkDbId: ID!): datalink
  countDatalinks(search: searchDatalinkInput): Int
  csvTableTemplateDatalink: [String]
  datalinksConnection(search: searchDatalinkInput, order: [orderDatalinkInput], pagination: paginationCursorInput!): DatalinkConnection
  validateDatalinkForCreation(dataLinkDbId: ID!, dataFormat: String, description: String, fileFormat: String, name: String, provenance: String, scientificType: String, url: String, version: String, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatalinkForUpdating(dataLinkDbId: ID!, dataFormat: String, description: String, fileFormat: String, name: String, provenance: String, scientificType: String, url: String, version: String, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatalinkForDeletion(dataLinkDbId: ID!): Boolean!
  validateDatalinkAfterReading(dataLinkDbId: ID!): Boolean!

  """
  datalinksZendroDefinition would return the static Zendro data model definition
  """
  datalinksZendroDefinition: GraphQLJSONObject
  datamatrices(search: searchDatamatrixInput, order: [orderDatamatrixInput], pagination: paginationInput!): [datamatrix]
  readOneDatamatrix(dataMatrixDbId: ID!): datamatrix
  countDatamatrices(search: searchDatamatrixInput): Int
  csvTableTemplateDatamatrix: [String]
  datamatricesConnection(search: searchDatamatrixInput, order: [orderDatamatrixInput], pagination: paginationCursorInput!): DatamatrixConnection
  validateDatamatrixForCreation(dataMatrixDbId: ID!, dataMatrix: String, dataMatrixAbbreviation: String, dataMatrixName: String, dataType: String, alleleMatrix_ID: String, addAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatamatrixForUpdating(dataMatrixDbId: ID!, dataMatrix: String, dataMatrixAbbreviation: String, dataMatrixName: String, dataType: String, alleleMatrix_ID: String, addAlleleMatrix: ID, removeAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatamatrixForDeletion(dataMatrixDbId: ID!): Boolean!
  validateDatamatrixAfterReading(dataMatrixDbId: ID!): Boolean!

  """
  datamatricesZendroDefinition would return the static Zendro data model definition
  """
  datamatricesZendroDefinition: GraphQLJSONObject
  datasetauthorships(search: searchDatasetauthorshipsInput, order: [orderDatasetauthorshipsInput], pagination: paginationInput!): [datasetauthorships]
  readOneDatasetauthorships(datasetAuthorshipsDbId: ID!): datasetauthorships
  countDatasetauthorships(search: searchDatasetauthorshipsInput): Int
  csvTableTemplateDatasetauthorships: [String]
  datasetauthorshipsConnection(search: searchDatasetauthorshipsInput, order: [orderDatasetauthorshipsInput], pagination: paginationCursorInput!): DatasetauthorshipsConnection
  validateDatasetauthorshipsForCreation(datasetAuthorshipsDbId: ID!, datasetPUI: String, license: String, publicReleaseDate: String, submissionDate: String, trial_ID: String, addTrial: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatasetauthorshipsForUpdating(datasetAuthorshipsDbId: ID!, datasetPUI: String, license: String, publicReleaseDate: String, submissionDate: String, trial_ID: String, addTrial: ID, removeTrial: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDatasetauthorshipsForDeletion(datasetAuthorshipsDbId: ID!): Boolean!
  validateDatasetauthorshipsAfterReading(datasetAuthorshipsDbId: ID!): Boolean!

  """
  datasetauthorshipsZendroDefinition would return the static Zendro data model definition
  """
  datasetauthorshipsZendroDefinition: GraphQLJSONObject
  documentationlinks(search: searchDocumentationlinkInput, order: [orderDocumentationlinkInput], pagination: paginationInput!): [documentationlink]
  readOneDocumentationlink(documentationLinkDbId: ID!): documentationlink
  countDocumentationlinks(search: searchDocumentationlinkInput): Int
  csvTableTemplateDocumentationlink: [String]
  documentationlinksConnection(search: searchDocumentationlinkInput, order: [orderDocumentationlinkInput], pagination: paginationCursorInput!): DocumentationlinkConnection
  validateDocumentationlinkForCreation(documentationLinkDbId: ID!, URL: String, type: String, ontologyReference_ID: String, addOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDocumentationlinkForUpdating(documentationLinkDbId: ID!, URL: String, type: String, ontologyReference_ID: String, addOntologyReference: ID, removeOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDocumentationlinkForDeletion(documentationLinkDbId: ID!): Boolean!
  validateDocumentationlinkAfterReading(documentationLinkDbId: ID!): Boolean!

  """
  documentationlinksZendroDefinition would return the static Zendro data model definition
  """
  documentationlinksZendroDefinition: GraphQLJSONObject
  donors(search: searchDonorInput, order: [orderDonorInput], pagination: paginationInput!): [donor]
  readOneDonor(donorDbId: ID!): donor
  countDonors(search: searchDonorInput): Int
  csvTableTemplateDonor: [String]
  donorsConnection(search: searchDonorInput, order: [orderDonorInput], pagination: paginationCursorInput!): DonorConnection
  validateDonorForCreation(donorDbId: ID!, donorAccessionNumber: String, donorInstituteCode: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDonorForUpdating(donorDbId: ID!, donorAccessionNumber: String, donorInstituteCode: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateDonorForDeletion(donorDbId: ID!): Boolean!
  validateDonorAfterReading(donorDbId: ID!): Boolean!

  """
  donorsZendroDefinition would return the static Zendro data model definition
  """
  donorsZendroDefinition: GraphQLJSONObject
  environmentparameters(search: searchEnvironmentparametersInput, order: [orderEnvironmentparametersInput], pagination: paginationInput!): [environmentparameters]
  readOneEnvironmentparameters(environmentParametersDbId: ID!): environmentparameters
  countEnvironmentparameters(search: searchEnvironmentparametersInput): Int
  csvTableTemplateEnvironmentparameters: [String]
  environmentparametersConnection(search: searchEnvironmentparametersInput, order: [orderEnvironmentparametersInput], pagination: paginationCursorInput!): EnvironmentparametersConnection
  validateEnvironmentparametersForCreation(environmentParametersDbId: ID!, description: String, parameterName: String, parameterPUI: String, unit: String, unitPUI: String, value: String, valuePUI: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEnvironmentparametersForUpdating(environmentParametersDbId: ID!, description: String, parameterName: String, parameterPUI: String, unit: String, unitPUI: String, value: String, valuePUI: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEnvironmentparametersForDeletion(environmentParametersDbId: ID!): Boolean!
  validateEnvironmentparametersAfterReading(environmentParametersDbId: ID!): Boolean!

  """
  environmentparametersZendroDefinition would return the static Zendro data model definition
  """
  environmentparametersZendroDefinition: GraphQLJSONObject
  events(search: searchEventInput, order: [orderEventInput], pagination: paginationInput!): [event]
  readOneEvent(eventDbId: ID!): event
  countEvents(search: searchEventInput): Int
  csvTableTemplateEvent: [String]
  eventsConnection(search: searchEventInput, order: [orderEventInput], pagination: paginationCursorInput!): EventConnection
  validateEventForCreation(eventDbId: ID!, eventDescription: String, eventType: String, eventTypeDbId: String, additionalInfo_ID: String, eventDateRange_IDs: [String], eventParameters_IDs: [String], study_ID: String, addAdditionalInfo: ID, addStudy: ID, addEventDateRange: [ID], addEventParameters: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventForUpdating(eventDbId: ID!, eventDescription: String, eventType: String, eventTypeDbId: String, additionalInfo_ID: String, eventDateRange_IDs: [String], eventParameters_IDs: [String], study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addStudy: ID, removeStudy: ID, addEventDateRange: [ID], removeEventDateRange: [ID], addEventParameters: [ID], removeEventParameters: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventForDeletion(eventDbId: ID!): Boolean!
  validateEventAfterReading(eventDbId: ID!): Boolean!

  """
  eventsZendroDefinition would return the static Zendro data model definition
  """
  eventsZendroDefinition: GraphQLJSONObject
  eventdateranges(search: searchEventdaterangeInput, order: [orderEventdaterangeInput], pagination: paginationInput!): [eventdaterange]
  readOneEventdaterange(eventDateRangeDbId: ID!): eventdaterange
  countEventdateranges(search: searchEventdaterangeInput): Int
  csvTableTemplateEventdaterange: [String]
  eventdaterangesConnection(search: searchEventdaterangeInput, order: [orderEventdaterangeInput], pagination: paginationCursorInput!): EventdaterangeConnection
  validateEventdaterangeForCreation(eventDateRangeDbId: ID!, discreteDates: String, endDate: String, startDate: String, event_ID: String, addEvent: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventdaterangeForUpdating(eventDateRangeDbId: ID!, discreteDates: String, endDate: String, startDate: String, event_ID: String, addEvent: ID, removeEvent: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventdaterangeForDeletion(eventDateRangeDbId: ID!): Boolean!
  validateEventdaterangeAfterReading(eventDateRangeDbId: ID!): Boolean!

  """
  eventdaterangesZendroDefinition would return the static Zendro data model definition
  """
  eventdaterangesZendroDefinition: GraphQLJSONObject
  eventparameters(search: searchEventparameterInput, order: [orderEventparameterInput], pagination: paginationInput!): [eventparameter]
  readOneEventparameter(eventParameterDbId: ID!): eventparameter
  countEventparameters(search: searchEventparameterInput): Int
  csvTableTemplateEventparameter: [String]
  eventparametersConnection(search: searchEventparameterInput, order: [orderEventparameterInput], pagination: paginationCursorInput!): EventparameterConnection
  validateEventparameterForCreation(eventParameterDbId: ID!, code: String, description: String, name: String, units: String, value: String, valueDescription: String, valuesByDate: String, event_ID: String, addEvent: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventparameterForUpdating(eventParameterDbId: ID!, code: String, description: String, name: String, units: String, value: String, valueDescription: String, valuesByDate: String, event_ID: String, addEvent: ID, removeEvent: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateEventparameterForDeletion(eventParameterDbId: ID!): Boolean!
  validateEventparameterAfterReading(eventParameterDbId: ID!): Boolean!

  """
  eventparametersZendroDefinition would return the static Zendro data model definition
  """
  eventparametersZendroDefinition: GraphQLJSONObject
  experimentaldesigns(search: searchExperimentaldesignInput, order: [orderExperimentaldesignInput], pagination: paginationInput!): [experimentaldesign]
  readOneExperimentaldesign(experimentalDesignDbId: ID!): experimentaldesign
  countExperimentaldesigns(search: searchExperimentaldesignInput): Int
  csvTableTemplateExperimentaldesign: [String]
  experimentaldesignsConnection(search: searchExperimentaldesignInput, order: [orderExperimentaldesignInput], pagination: paginationCursorInput!): ExperimentaldesignConnection
  validateExperimentaldesignForCreation(experimentalDesignDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateExperimentaldesignForUpdating(experimentalDesignDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateExperimentaldesignForDeletion(experimentalDesignDbId: ID!): Boolean!
  validateExperimentaldesignAfterReading(experimentalDesignDbId: ID!): Boolean!

  """
  experimentaldesignsZendroDefinition would return the static Zendro data model definition
  """
  experimentaldesignsZendroDefinition: GraphQLJSONObject
  externalreferences(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]
  readOneExternalreference(referenceDbId: ID!): externalreference
  countExternalreferences(search: searchExternalreferenceInput): Int
  csvTableTemplateExternalreference: [String]
  externalreferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection
  validateExternalreferenceForCreation(referenceDbId: ID!, attribute_ID: String, referenceSource: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, callSet_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addList: ID, addLocation: ID, addPerson: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCallSet: ID, addPlate: ID, addReference: ID, addReferenceSet: ID, addSample: ID, addVariant: ID, addVariantSet: ID, addCross: ID, addCrossingProject: ID, addGermplasm: ID, addGermplasmAttribute: ID, addGermplasmAttributeValue: ID, addPedigreeNode: ID, addPlannedCross: ID, addSeedLot: ID, addSeedLotTransaction: ID, addImage: ID, addMethod: ID, addObservation: ID, addObservationUnit: ID, addObservationVariable: ID, addScale: ID, addTrait: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateExternalreferenceForUpdating(referenceDbId: ID!, attribute_ID: String, referenceSource: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, callSet_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addList: ID, removeList: ID, addLocation: ID, removeLocation: ID, addPerson: ID, removePerson: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCallSet: ID, removeCallSet: ID, addPlate: ID, removePlate: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addSample: ID, removeSample: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addCross: ID, removeCross: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addGermplasmAttributeValue: ID, removeGermplasmAttributeValue: ID, addPedigreeNode: ID, removePedigreeNode: ID, addPlannedCross: ID, removePlannedCross: ID, addSeedLot: ID, removeSeedLot: ID, addSeedLotTransaction: ID, removeSeedLotTransaction: ID, addImage: ID, removeImage: ID, addMethod: ID, removeMethod: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateExternalreferenceForDeletion(referenceDbId: ID!): Boolean!
  validateExternalreferenceAfterReading(referenceDbId: ID!): Boolean!

  """
  externalreferencesZendroDefinition would return the static Zendro data model definition
  """
  externalreferencesZendroDefinition: GraphQLJSONObject
  genomemaps(search: searchGenomemapInput, order: [orderGenomemapInput], pagination: paginationInput!): [genomemap]
  readOneGenomemap(mapDbId: ID!): genomemap
  countGenomemaps(search: searchGenomemapInput): Int
  csvTableTemplateGenomemap: [String]
  genomemapsConnection(search: searchGenomemapInput, order: [orderGenomemapInput], pagination: paginationCursorInput!): GenomemapConnection
  validateGenomemapForCreation(mapDbId: ID!, comments: String, commonCropName: String, documentationURL: String, linkageGroupCount: String, mapName: String, mapPUI: String, markerCount: String, publishedDate: String, scientificName: String, type: String, unit: String, additionalInfo_ID: String, markerPositions_IDs: [String], addAdditionalInfo: ID, addMarkerPositions: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGenomemapForUpdating(mapDbId: ID!, comments: String, commonCropName: String, documentationURL: String, linkageGroupCount: String, mapName: String, mapPUI: String, markerCount: String, publishedDate: String, scientificName: String, type: String, unit: String, additionalInfo_ID: String, markerPositions_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addMarkerPositions: [ID], removeMarkerPositions: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGenomemapForDeletion(mapDbId: ID!): Boolean!
  validateGenomemapAfterReading(mapDbId: ID!): Boolean!

  """
  genomemapsZendroDefinition would return the static Zendro data model definition
  """
  genomemapsZendroDefinition: GraphQLJSONObject
  genotypemetadata(search: searchGenotypemetadataInput, order: [orderGenotypemetadataInput], pagination: paginationInput!): [genotypemetadata]
  readOneGenotypemetadata(genotypeMetadataDbId: ID!): genotypemetadata
  countGenotypemetadata(search: searchGenotypemetadataInput): Int
  csvTableTemplateGenotypemetadata: [String]
  genotypemetadataConnection(search: searchGenotypemetadataInput, order: [orderGenotypemetadataInput], pagination: paginationCursorInput!): GenotypemetadataConnection
  validateGenotypemetadataForCreation(genotypeMetadataDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, fieldValue: String, call_ID: String, addCall: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGenotypemetadataForUpdating(genotypeMetadataDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, fieldValue: String, call_ID: String, addCall: ID, removeCall: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGenotypemetadataForDeletion(genotypeMetadataDbId: ID!): Boolean!
  validateGenotypemetadataAfterReading(genotypeMetadataDbId: ID!): Boolean!

  """
  genotypemetadataZendroDefinition would return the static Zendro data model definition
  """
  genotypemetadataZendroDefinition: GraphQLJSONObject
  geojsons(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationInput!): [geojson]
  readOneGeojson(geoJSONDbId: ID!): geojson
  countGeojsons(search: searchGeojsonInput): Int
  csvTableTemplateGeojson: [String]
  geojsonsConnection(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationCursorInput!): GeojsonConnection
  validateGeojsonForCreation(geoJSONDbId: ID!, type: String, image_ID: String, observation_ID: String, observationUnit_ID: String, germplasmOrigin_ID: String, location_ID: String, addImage: ID, addObservation: ID, addObservationUnit: ID, addGermplasmOrigin: ID, addLocation: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGeojsonForUpdating(geoJSONDbId: ID!, type: String, image_ID: String, observation_ID: String, observationUnit_ID: String, germplasmOrigin_ID: String, location_ID: String, addImage: ID, removeImage: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addGermplasmOrigin: ID, removeGermplasmOrigin: ID, addLocation: ID, removeLocation: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGeojsonForDeletion(geoJSONDbId: ID!): Boolean!
  validateGeojsonAfterReading(geoJSONDbId: ID!): Boolean!

  """
  geojsonsZendroDefinition would return the static Zendro data model definition
  """
  geojsonsZendroDefinition: GraphQLJSONObject
  geojsongeometries(search: searchGeojsongeometryInput, order: [orderGeojsongeometryInput], pagination: paginationInput!): [geojsongeometry]
  readOneGeojsongeometry(geoJSONGeometryDbId: ID!): geojsongeometry
  countGeojsongeometries(search: searchGeojsongeometryInput): Int
  csvTableTemplateGeojsongeometry: [String]
  geojsongeometriesConnection(search: searchGeojsongeometryInput, order: [orderGeojsongeometryInput], pagination: paginationCursorInput!): GeojsongeometryConnection
  validateGeojsongeometryForCreation(geoJSONGeometryDbId: ID!, coordinates: String, type: String, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGeojsongeometryForUpdating(geoJSONGeometryDbId: ID!, coordinates: String, type: String, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGeojsongeometryForDeletion(geoJSONGeometryDbId: ID!): Boolean!
  validateGeojsongeometryAfterReading(geoJSONGeometryDbId: ID!): Boolean!

  """
  geojsongeometriesZendroDefinition would return the static Zendro data model definition
  """
  geojsongeometriesZendroDefinition: GraphQLJSONObject
  germplasms(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationInput!): [germplasm]
  readOneGermplasm(germplasmDbId: ID!): germplasm
  countGermplasms(search: searchGermplasmInput): Int
  csvTableTemplateGermplasm: [String]
  germplasmsConnection(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationCursorInput!): GermplasmConnection
  validateGermplasmForCreation(germplasmDbId: ID!, crossParent_ID: String, accessionNumber: String, acquisitionDate: String, biologicalStatusOfAccessionCode: String, biologicalStatusOfAccessionDescription: String, collection: String, commonCropName: String, countryOfOriginCode: String, defaultDisplayName: String, documentationURL: String, genus: String, germplasmName: String, germplasmPUI: String, germplasmPreprocessing: String, instituteCode: String, instituteName: String, pedigree: String, seedSource: String, seedSourceDescription: String, species: String, speciesAuthority: String, subtaxa: String, subtaxaAuthority: String, additionalInfo_ID: String, breedingMethod_ID: String, pedigreeNode_ID: String, donors_IDs: [String], externalReferences_IDs: [String], germplasmOrigin_IDs: [String], storageTypes_IDs: [String], synonyms_IDs: [String], taxonIds_IDs: [String], samples_IDs: [String], attributeValues_IDs: [String], progenyPedigreeNodes_IDs: [String], parentPedigreeNodes_IDs: [String], siblingPedigreeNodes_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], reference_ID: String, referenceSet_ID: String, contentMixture_IDs: [String], addCrossParent: ID, addAdditionalInfo: ID, addBreedingMethod: ID, addPedigreeNode: ID, addReference: ID, addReferenceSet: ID, addDonors: [ID], addExternalReferences: [ID], addGermplasmOrigin: [ID], addStorageTypes: [ID], addSynonyms: [ID], addTaxonIds: [ID], addSamples: [ID], addAttributeValues: [ID], addProgenyPedigreeNodes: [ID], addParentPedigreeNodes: [ID], addSiblingPedigreeNodes: [ID], addObservations: [ID], addObservationUnits: [ID], addContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmForUpdating(germplasmDbId: ID!, crossParent_ID: String, accessionNumber: String, acquisitionDate: String, biologicalStatusOfAccessionCode: String, biologicalStatusOfAccessionDescription: String, collection: String, commonCropName: String, countryOfOriginCode: String, defaultDisplayName: String, documentationURL: String, genus: String, germplasmName: String, germplasmPUI: String, germplasmPreprocessing: String, instituteCode: String, instituteName: String, pedigree: String, seedSource: String, seedSourceDescription: String, species: String, speciesAuthority: String, subtaxa: String, subtaxaAuthority: String, additionalInfo_ID: String, breedingMethod_ID: String, pedigreeNode_ID: String, donors_IDs: [String], externalReferences_IDs: [String], germplasmOrigin_IDs: [String], storageTypes_IDs: [String], synonyms_IDs: [String], taxonIds_IDs: [String], samples_IDs: [String], attributeValues_IDs: [String], progenyPedigreeNodes_IDs: [String], parentPedigreeNodes_IDs: [String], siblingPedigreeNodes_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], reference_ID: String, referenceSet_ID: String, contentMixture_IDs: [String], addCrossParent: ID, removeCrossParent: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addBreedingMethod: ID, removeBreedingMethod: ID, addPedigreeNode: ID, removePedigreeNode: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addDonors: [ID], removeDonors: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addGermplasmOrigin: [ID], removeGermplasmOrigin: [ID], addStorageTypes: [ID], removeStorageTypes: [ID], addSynonyms: [ID], removeSynonyms: [ID], addTaxonIds: [ID], removeTaxonIds: [ID], addSamples: [ID], removeSamples: [ID], addAttributeValues: [ID], removeAttributeValues: [ID], addProgenyPedigreeNodes: [ID], removeProgenyPedigreeNodes: [ID], addParentPedigreeNodes: [ID], removeParentPedigreeNodes: [ID], addSiblingPedigreeNodes: [ID], removeSiblingPedigreeNodes: [ID], addObservations: [ID], removeObservations: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], addContentMixture: [ID], removeContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmForDeletion(germplasmDbId: ID!): Boolean!
  validateGermplasmAfterReading(germplasmDbId: ID!): Boolean!

  """
  germplasmsZendroDefinition would return the static Zendro data model definition
  """
  germplasmsZendroDefinition: GraphQLJSONObject
  germplasmattributes(search: searchGermplasmattributeInput, order: [orderGermplasmattributeInput], pagination: paginationInput!): [germplasmattribute]
  readOneGermplasmattribute(germplasmAttributeDbId: ID!): germplasmattribute
  countGermplasmattributes(search: searchGermplasmattributeInput): Int
  csvTableTemplateGermplasmattribute: [String]
  germplasmattributesConnection(search: searchGermplasmattributeInput, order: [orderGermplasmattributeInput], pagination: paginationCursorInput!): GermplasmattributeConnection
  validateGermplasmattributeForCreation(germplasmAttributeDbId: ID!, attributeCategory: String, attributeDbId: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, attributeValues_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addAttributeValues: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmattributeForUpdating(germplasmAttributeDbId: ID!, attributeCategory: String, attributeDbId: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, attributeValues_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addAttributeValues: [ID], removeAttributeValues: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmattributeForDeletion(germplasmAttributeDbId: ID!): Boolean!
  validateGermplasmattributeAfterReading(germplasmAttributeDbId: ID!): Boolean!

  """
  germplasmattributesZendroDefinition would return the static Zendro data model definition
  """
  germplasmattributesZendroDefinition: GraphQLJSONObject
  germplasmattributevalues(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationInput!): [germplasmattributevalue]
  readOneGermplasmattributevalue(attributeValueDbId: ID!): germplasmattributevalue
  countGermplasmattributevalues(search: searchGermplasmattributevalueInput): Int
  csvTableTemplateGermplasmattributevalue: [String]
  germplasmattributevaluesConnection(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationCursorInput!): GermplasmattributevalueConnection
  validateGermplasmattributevalueForCreation(attributeValueDbId: ID!, determinedDate: String, value: String, additionalInfo_ID: String, attribute_ID: String, externalReferences_IDs: [String], germplasm_ID: String, addAdditionalInfo: ID, addAttribute: ID, addGermplasm: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmattributevalueForUpdating(attributeValueDbId: ID!, determinedDate: String, value: String, additionalInfo_ID: String, attribute_ID: String, externalReferences_IDs: [String], germplasm_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addAttribute: ID, removeAttribute: ID, addGermplasm: ID, removeGermplasm: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmattributevalueForDeletion(attributeValueDbId: ID!): Boolean!
  validateGermplasmattributevalueAfterReading(attributeValueDbId: ID!): Boolean!

  """
  germplasmattributevaluesZendroDefinition would return the static Zendro data model definition
  """
  germplasmattributevaluesZendroDefinition: GraphQLJSONObject
  germplasmchildren(search: searchGermplasmchildInput, order: [orderGermplasmchildInput], pagination: paginationInput!): [germplasmchild]
  readOneGermplasmchild(germplasmChildDbId: ID!): germplasmchild
  countGermplasmchildren(search: searchGermplasmchildInput): Int
  csvTableTemplateGermplasmchild: [String]
  germplasmchildrenConnection(search: searchGermplasmchildInput, order: [orderGermplasmchildInput], pagination: paginationCursorInput!): GermplasmchildConnection
  validateGermplasmchildForCreation(germplasmChildDbId: ID!, childGermplasm_ID: String, pedigreeNode_ID: String, addChildGermplasm: ID, addPedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmchildForUpdating(germplasmChildDbId: ID!, childGermplasm_ID: String, pedigreeNode_ID: String, addChildGermplasm: ID, removeChildGermplasm: ID, addPedigreeNode: ID, removePedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmchildForDeletion(germplasmChildDbId: ID!): Boolean!
  validateGermplasmchildAfterReading(germplasmChildDbId: ID!): Boolean!

  """
  germplasmchildrenZendroDefinition would return the static Zendro data model definition
  """
  germplasmchildrenZendroDefinition: GraphQLJSONObject
  germplasmorigins(search: searchGermplasmoriginInput, order: [orderGermplasmoriginInput], pagination: paginationInput!): [germplasmorigin]
  readOneGermplasmorigin(germplasmOriginDbId: ID!): germplasmorigin
  countGermplasmorigins(search: searchGermplasmoriginInput): Int
  csvTableTemplateGermplasmorigin: [String]
  germplasmoriginsConnection(search: searchGermplasmoriginInput, order: [orderGermplasmoriginInput], pagination: paginationCursorInput!): GermplasmoriginConnection
  validateGermplasmoriginForCreation(germplasmOriginDbId: ID!, coordinateUncertainty: String, coordinates_IDs: [String], germplasm_ID: String, addGermplasm: ID, addCoordinates: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmoriginForUpdating(germplasmOriginDbId: ID!, coordinateUncertainty: String, coordinates_IDs: [String], germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, addCoordinates: [ID], removeCoordinates: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmoriginForDeletion(germplasmOriginDbId: ID!): Boolean!
  validateGermplasmoriginAfterReading(germplasmOriginDbId: ID!): Boolean!

  """
  germplasmoriginsZendroDefinition would return the static Zendro data model definition
  """
  germplasmoriginsZendroDefinition: GraphQLJSONObject
  germplasmparents(search: searchGermplasmparentInput, order: [orderGermplasmparentInput], pagination: paginationInput!): [germplasmparent]
  readOneGermplasmparent(germplasmParentDbId: ID!): germplasmparent
  countGermplasmparents(search: searchGermplasmparentInput): Int
  csvTableTemplateGermplasmparent: [String]
  germplasmparentsConnection(search: searchGermplasmparentInput, order: [orderGermplasmparentInput], pagination: paginationCursorInput!): GermplasmparentConnection
  validateGermplasmparentForCreation(germplasmParentDbId: ID!, parentGermplasm_ID: String, pedigreeNode_ID: String, addParentGermplasm: ID, addPedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmparentForUpdating(germplasmParentDbId: ID!, parentGermplasm_ID: String, pedigreeNode_ID: String, addParentGermplasm: ID, removeParentGermplasm: ID, addPedigreeNode: ID, removePedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGermplasmparentForDeletion(germplasmParentDbId: ID!): Boolean!
  validateGermplasmparentAfterReading(germplasmParentDbId: ID!): Boolean!

  """
  germplasmparentsZendroDefinition would return the static Zendro data model definition
  """
  germplasmparentsZendroDefinition: GraphQLJSONObject
  growthfacilities(search: searchGrowthfacilityInput, order: [orderGrowthfacilityInput], pagination: paginationInput!): [growthfacility]
  readOneGrowthfacility(growthFacilityDbId: ID!): growthfacility
  countGrowthfacilities(search: searchGrowthfacilityInput): Int
  csvTableTemplateGrowthfacility: [String]
  growthfacilitiesConnection(search: searchGrowthfacilityInput, order: [orderGrowthfacilityInput], pagination: paginationCursorInput!): GrowthfacilityConnection
  validateGrowthfacilityForCreation(growthFacilityDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGrowthfacilityForUpdating(growthFacilityDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateGrowthfacilityForDeletion(growthFacilityDbId: ID!): Boolean!
  validateGrowthfacilityAfterReading(growthFacilityDbId: ID!): Boolean!

  """
  growthfacilitiesZendroDefinition would return the static Zendro data model definition
  """
  growthfacilitiesZendroDefinition: GraphQLJSONObject
  images(search: searchImageInput, order: [orderImageInput], pagination: paginationInput!): [image]
  readOneImage(imageDbId: ID!): image
  countImages(search: searchImageInput): Int
  csvTableTemplateImage: [String]
  imagesConnection(search: searchImageInput, order: [orderImageInput], pagination: paginationCursorInput!): ImageConnection
  validateImageForCreation(imageDbId: ID!, copyright: String, description: String, descriptiveOntologyTerms: String, imageFileName: String, imageFileSize: String, imageHeight: String, imageName: String, imageTimeStamp: String, imageURL: String, imageWidth: String, mimeType: String, additionalInfo_ID: String, externalReferences_IDs: [String], imageLocation_ID: String, observationUnit_ID: String, addAdditionalInfo: ID, addImageLocation: ID, addObservationUnit: ID, addExternalReferences: [ID], addObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateImageForUpdating(imageDbId: ID!, copyright: String, description: String, descriptiveOntologyTerms: String, imageFileName: String, imageFileSize: String, imageHeight: String, imageName: String, imageTimeStamp: String, imageURL: String, imageWidth: String, mimeType: String, additionalInfo_ID: String, externalReferences_IDs: [String], imageLocation_ID: String, observationUnit_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addImageLocation: ID, removeImageLocation: ID, addObservationUnit: ID, removeObservationUnit: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addObservations: [ID], removeObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateImageForDeletion(imageDbId: ID!): Boolean!
  validateImageAfterReading(imageDbId: ID!): Boolean!

  """
  imagesZendroDefinition would return the static Zendro data model definition
  """
  imagesZendroDefinition: GraphQLJSONObject
  lastupdates(search: searchLastupdateInput, order: [orderLastupdateInput], pagination: paginationInput!): [lastupdate]
  readOneLastupdate(lastUpdateDbId: ID!): lastupdate
  countLastupdates(search: searchLastupdateInput): Int
  csvTableTemplateLastupdate: [String]
  lastupdatesConnection(search: searchLastupdateInput, order: [orderLastupdateInput], pagination: paginationCursorInput!): LastupdateConnection
  validateLastupdateForCreation(lastUpdateDbId: ID!, timestamp: String, version: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateLastupdateForUpdating(lastUpdateDbId: ID!, timestamp: String, version: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateLastupdateForDeletion(lastUpdateDbId: ID!): Boolean!
  validateLastupdateAfterReading(lastUpdateDbId: ID!): Boolean!

  """
  lastupdatesZendroDefinition would return the static Zendro data model definition
  """
  lastupdatesZendroDefinition: GraphQLJSONObject
  lists(search: searchListInput, order: [orderListInput], pagination: paginationInput!): [list]
  readOneList(listDbId: ID!): list
  countLists(search: searchListInput): Int
  csvTableTemplateList: [String]
  listsConnection(search: searchListInput, order: [orderListInput], pagination: paginationCursorInput!): ListConnection
  validateListForCreation(listDbId: ID!, data: String, dateCreated: String, dateModified: String, listDescription: String, listName: String, listOwnerName: String, listSize: String, listSource: String, additionalInfo_ID: String, externalReferences_IDs: [String], listOwnerPerson_ID: String, addAdditionalInfo: ID, addListOwnerPerson: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateListForUpdating(listDbId: ID!, data: String, dateCreated: String, dateModified: String, listDescription: String, listName: String, listOwnerName: String, listSize: String, listSource: String, additionalInfo_ID: String, externalReferences_IDs: [String], listOwnerPerson_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addListOwnerPerson: ID, removeListOwnerPerson: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateListForDeletion(listDbId: ID!): Boolean!
  validateListAfterReading(listDbId: ID!): Boolean!

  """
  listsZendroDefinition would return the static Zendro data model definition
  """
  listsZendroDefinition: GraphQLJSONObject
  locations(search: searchLocationInput, order: [orderLocationInput], pagination: paginationInput!): [location]
  readOneLocation(locationDbId: ID!): location
  countLocations(search: searchLocationInput): Int
  csvTableTemplateLocation: [String]
  locationsConnection(search: searchLocationInput, order: [orderLocationInput], pagination: paginationCursorInput!): LocationConnection
  validateLocationForCreation(locationDbId: ID!, abbreviation: String, coordinateDescription: String, coordinateUncertainty: String, countryCode: String, countryName: String, documentationURL: String, environmentType: String, exposure: String, instituteAddress: String, instituteName: String, locationName: String, locationType: String, siteStatus: String, slope: String, topography: String, additionalInfo_ID: String, coordinates_ID: String, externalReferences_IDs: [String], parentLocation_ID: String, childLocations_IDs: [String], studies_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addCoordinates: ID, addParentLocation: ID, addExternalReferences: [ID], addChildLocations: [ID], addStudies: [ID], addSeedLots: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateLocationForUpdating(locationDbId: ID!, abbreviation: String, coordinateDescription: String, coordinateUncertainty: String, countryCode: String, countryName: String, documentationURL: String, environmentType: String, exposure: String, instituteAddress: String, instituteName: String, locationName: String, locationType: String, siteStatus: String, slope: String, topography: String, additionalInfo_ID: String, coordinates_ID: String, externalReferences_IDs: [String], parentLocation_ID: String, childLocations_IDs: [String], studies_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCoordinates: ID, removeCoordinates: ID, addParentLocation: ID, removeParentLocation: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addChildLocations: [ID], removeChildLocations: [ID], addStudies: [ID], removeStudies: [ID], addSeedLots: [ID], removeSeedLots: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateLocationForDeletion(locationDbId: ID!): Boolean!
  validateLocationAfterReading(locationDbId: ID!): Boolean!

  """
  locationsZendroDefinition would return the static Zendro data model definition
  """
  locationsZendroDefinition: GraphQLJSONObject
  markerpositions(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationInput!): [markerposition]
  readOneMarkerposition(markerPositionDbId: ID!): markerposition
  countMarkerpositions(search: searchMarkerpositionInput): Int
  csvTableTemplateMarkerposition: [String]
  markerpositionsConnection(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationCursorInput!): MarkerpositionConnection
  validateMarkerpositionForCreation(markerPositionDbId: ID!, linkageGroupName: String, position: String, additionalInfo_ID: String, map_ID: String, variant_ID: String, addAdditionalInfo: ID, addMap: ID, addVariant: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMarkerpositionForUpdating(markerPositionDbId: ID!, linkageGroupName: String, position: String, additionalInfo_ID: String, map_ID: String, variant_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMap: ID, removeMap: ID, addVariant: ID, removeVariant: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMarkerpositionForDeletion(markerPositionDbId: ID!): Boolean!
  validateMarkerpositionAfterReading(markerPositionDbId: ID!): Boolean!

  """
  markerpositionsZendroDefinition would return the static Zendro data model definition
  """
  markerpositionsZendroDefinition: GraphQLJSONObject
  metadatafields(search: searchMetadatafieldInput, order: [orderMetadatafieldInput], pagination: paginationInput!): [metadatafield]
  readOneMetadatafield(metadataFieldDbId: ID!): metadatafield
  countMetadatafields(search: searchMetadatafieldInput): Int
  csvTableTemplateMetadatafield: [String]
  metadatafieldsConnection(search: searchMetadatafieldInput, order: [orderMetadatafieldInput], pagination: paginationCursorInput!): MetadatafieldConnection
  validateMetadatafieldForCreation(metadataFieldDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMetadatafieldForUpdating(metadataFieldDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMetadatafieldForDeletion(metadataFieldDbId: ID!): Boolean!
  validateMetadatafieldAfterReading(metadataFieldDbId: ID!): Boolean!

  """
  metadatafieldsZendroDefinition would return the static Zendro data model definition
  """
  metadatafieldsZendroDefinition: GraphQLJSONObject
  methods(search: searchMethodInput, order: [orderMethodInput], pagination: paginationInput!): [method]
  readOneMethod(methodDbId: ID!): method
  countMethods(search: searchMethodInput): Int
  csvTableTemplateMethod: [String]
  methodsConnection(search: searchMethodInput, order: [orderMethodInput], pagination: paginationCursorInput!): MethodConnection
  validateMethodForCreation(methodDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, bibliographicalReference: String, description: String, formula: String, methodClass: String, methodName: String, methodPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, observationVariable_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addAdditionalInfo: ID, addOntologyReference: ID, addObservationVariable: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMethodForUpdating(methodDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, bibliographicalReference: String, description: String, formula: String, methodClass: String, methodName: String, methodPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, observationVariable_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addObservationVariable: ID, removeObservationVariable: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateMethodForDeletion(methodDbId: ID!): Boolean!
  validateMethodAfterReading(methodDbId: ID!): Boolean!

  """
  methodsZendroDefinition would return the static Zendro data model definition
  """
  methodsZendroDefinition: GraphQLJSONObject
  observations(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]
  readOneObservation(observationDbId: ID!): observation
  countObservations(search: searchObservationInput): Int
  csvTableTemplateObservation: [String]
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection
  validateObservationForCreation(observationDbId: ID!, collector: String, observationTimeStamp: String, uploadedBy: String, value: String, additionalInfo_ID: String, externalReferences_IDs: [String], geoCoordinates_ID: String, germplasm_ID: String, observationUnit_ID: String, observationVariable_ID: String, season_ID: String, study_ID: String, addAdditionalInfo: ID, addGeoCoordinates: ID, addGermplasm: ID, addObservationUnit: ID, addObservationVariable: ID, addSeason: ID, addStudy: ID, addExternalReferences: [ID], addImages: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationForUpdating(observationDbId: ID!, collector: String, observationTimeStamp: String, uploadedBy: String, value: String, additionalInfo_ID: String, externalReferences_IDs: [String], geoCoordinates_ID: String, germplasm_ID: String, observationUnit_ID: String, observationVariable_ID: String, season_ID: String, study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addGeoCoordinates: ID, removeGeoCoordinates: ID, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addSeason: ID, removeSeason: ID, addStudy: ID, removeStudy: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addImages: [ID], removeImages: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationForDeletion(observationDbId: ID!): Boolean!
  validateObservationAfterReading(observationDbId: ID!): Boolean!

  """
  observationsZendroDefinition would return the static Zendro data model definition
  """
  observationsZendroDefinition: GraphQLJSONObject
  observationunits(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]
  readOneObservationunit(observationUnitDbId: ID!): observationunit
  countObservationunits(search: searchObservationunitInput): Int
  csvTableTemplateObservationunit: [String]
  observationunitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection
  validateObservationunitForCreation(observationUnitDbId: ID!, crossParent_IDs: [String], observationUnitName: String, observationUnitPUI: String, additionalInfo_ID: String, cross_ID: String, externalReferences_IDs: [String], germplasm_ID: String, location_ID: String, observationUnitPosition_IDs: [String], program_ID: String, seedLot_ID: String, study_ID: String, treatments_IDs: [String], trial_ID: String, samples_IDs: [String], images_IDs: [String], observations_IDs: [String], observationUnitLevelRelationship_ID: String, addAdditionalInfo: ID, addCross: ID, addGermplasm: ID, addLocation: ID, addProgram: ID, addSeedLot: ID, addStudy: ID, addTrial: ID, addObservationUnitLevelRelationship: ID, addCrossParent: [ID], addExternalReferences: [ID], addObservationUnitPosition: [ID], addTreatments: [ID], addSamples: [ID], addEvents: [ID], addImages: [ID], addObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitForUpdating(observationUnitDbId: ID!, crossParent_IDs: [String], observationUnitName: String, observationUnitPUI: String, additionalInfo_ID: String, cross_ID: String, externalReferences_IDs: [String], germplasm_ID: String, location_ID: String, observationUnitPosition_IDs: [String], program_ID: String, seedLot_ID: String, study_ID: String, treatments_IDs: [String], trial_ID: String, samples_IDs: [String], images_IDs: [String], observations_IDs: [String], observationUnitLevelRelationship_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addCross: ID, removeCross: ID, addGermplasm: ID, removeGermplasm: ID, addLocation: ID, removeLocation: ID, addProgram: ID, removeProgram: ID, addSeedLot: ID, removeSeedLot: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addObservationUnitLevelRelationship: ID, removeObservationUnitLevelRelationship: ID, addCrossParent: [ID], removeCrossParent: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addObservationUnitPosition: [ID], removeObservationUnitPosition: [ID], addTreatments: [ID], removeTreatments: [ID], addSamples: [ID], removeSamples: [ID], addEvents: [ID], removeEvents: [ID], addImages: [ID], removeImages: [ID], addObservations: [ID], removeObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitForDeletion(observationUnitDbId: ID!): Boolean!
  validateObservationunitAfterReading(observationUnitDbId: ID!): Boolean!

  """
  observationunitsZendroDefinition would return the static Zendro data model definition
  """
  observationunitsZendroDefinition: GraphQLJSONObject
  observationunithierarchylevels(search: searchObservationunithierarchylevelInput, order: [orderObservationunithierarchylevelInput], pagination: paginationInput!): [observationunithierarchylevel]
  readOneObservationunithierarchylevel(observationUnitHierarchyLevelDbId: ID!): observationunithierarchylevel
  countObservationunithierarchylevels(search: searchObservationunithierarchylevelInput): Int
  csvTableTemplateObservationunithierarchylevel: [String]
  observationunithierarchylevelsConnection(search: searchObservationunithierarchylevelInput, order: [orderObservationunithierarchylevelInput], pagination: paginationCursorInput!): ObservationunithierarchylevelConnection
  validateObservationunithierarchylevelForCreation(observationUnitHierarchyLevelDbId: ID!, levelName: String, levelOrder: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunithierarchylevelForUpdating(observationUnitHierarchyLevelDbId: ID!, levelName: String, levelOrder: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunithierarchylevelForDeletion(observationUnitHierarchyLevelDbId: ID!): Boolean!
  validateObservationunithierarchylevelAfterReading(observationUnitHierarchyLevelDbId: ID!): Boolean!

  """
  observationunithierarchylevelsZendroDefinition would return the static Zendro data model definition
  """
  observationunithierarchylevelsZendroDefinition: GraphQLJSONObject
  observationunitlevels(search: searchObservationunitlevelInput, order: [orderObservationunitlevelInput], pagination: paginationInput!): [observationunitlevel]
  readOneObservationunitlevel(observationUnitLevelDbId: ID!): observationunitlevel
  countObservationunitlevels(search: searchObservationunitlevelInput): Int
  csvTableTemplateObservationunitlevel: [String]
  observationunitlevelsConnection(search: searchObservationunitlevelInput, order: [orderObservationunitlevelInput], pagination: paginationCursorInput!): ObservationunitlevelConnection
  validateObservationunitlevelForCreation(observationUnitLevelDbId: ID!, observationUnitPosition_ID: String, levelCode: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, addObservationUnitPosition: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitlevelForUpdating(observationUnitLevelDbId: ID!, observationUnitPosition_ID: String, levelCode: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, addObservationUnitPosition: ID, removeObservationUnitPosition: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitlevelForDeletion(observationUnitLevelDbId: ID!): Boolean!
  validateObservationunitlevelAfterReading(observationUnitLevelDbId: ID!): Boolean!

  """
  observationunitlevelsZendroDefinition would return the static Zendro data model definition
  """
  observationunitlevelsZendroDefinition: GraphQLJSONObject
  observationunitlevelrelationships(search: searchObservationunitlevelrelationshipInput, order: [orderObservationunitlevelrelationshipInput], pagination: paginationInput!): [observationunitlevelrelationship]
  readOneObservationunitlevelrelationship(observationUnitLevelRelationshipDbId: ID!): observationunitlevelrelationship
  countObservationunitlevelrelationships(search: searchObservationunitlevelrelationshipInput): Int
  csvTableTemplateObservationunitlevelrelationship: [String]
  observationunitlevelrelationshipsConnection(search: searchObservationunitlevelrelationshipInput, order: [orderObservationunitlevelrelationshipInput], pagination: paginationCursorInput!): ObservationunitlevelrelationshipConnection
  validateObservationunitlevelrelationshipForCreation(observationUnitLevelRelationshipDbId: ID!, observationUnitPosition_ID: String, levelCode: String, observationUnitLevelDbId: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, observationUnit_ID: String, addObservationUnitPosition: ID, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitlevelrelationshipForUpdating(observationUnitLevelRelationshipDbId: ID!, observationUnitPosition_ID: String, levelCode: String, observationUnitLevelDbId: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, observationUnit_ID: String, addObservationUnitPosition: ID, removeObservationUnitPosition: ID, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitlevelrelationshipForDeletion(observationUnitLevelRelationshipDbId: ID!): Boolean!
  validateObservationunitlevelrelationshipAfterReading(observationUnitLevelRelationshipDbId: ID!): Boolean!

  """
  observationunitlevelrelationshipsZendroDefinition would return the static Zendro data model definition
  """
  observationunitlevelrelationshipsZendroDefinition: GraphQLJSONObject
  observationunitpositions(search: searchObservationunitpositionInput, order: [orderObservationunitpositionInput], pagination: paginationInput!): [observationunitposition]
  readOneObservationunitposition(observationUnitPositionDbId: ID!): observationunitposition
  countObservationunitpositions(search: searchObservationunitpositionInput): Int
  csvTableTemplateObservationunitposition: [String]
  observationunitpositionsConnection(search: searchObservationunitpositionInput, order: [orderObservationunitpositionInput], pagination: paginationCursorInput!): ObservationunitpositionConnection
  validateObservationunitpositionForCreation(observationUnitPositionDbId: ID!, entryType: String, positionCoordinateX: String, positionCoordinateXType: String, positionCoordinateY: String, positionCoordinateYType: String, geoCoordinates_IDs: [String], observationLevel_ID: String, observationLevelRelationships_IDs: [String], addObservationLevel: ID, addObservationUnit: ID, addGeoCoordinates: [ID], addObservationLevelRelationships: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitpositionForUpdating(observationUnitPositionDbId: ID!, entryType: String, positionCoordinateX: String, positionCoordinateXType: String, positionCoordinateY: String, positionCoordinateYType: String, geoCoordinates_IDs: [String], observationLevel_ID: String, observationLevelRelationships_IDs: [String], addObservationLevel: ID, removeObservationLevel: ID, addObservationUnit: ID, removeObservationUnit: ID, addGeoCoordinates: [ID], removeGeoCoordinates: [ID], addObservationLevelRelationships: [ID], removeObservationLevelRelationships: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationunitpositionForDeletion(observationUnitPositionDbId: ID!): Boolean!
  validateObservationunitpositionAfterReading(observationUnitPositionDbId: ID!): Boolean!

  """
  observationunitpositionsZendroDefinition would return the static Zendro data model definition
  """
  observationunitpositionsZendroDefinition: GraphQLJSONObject
  observationvariables(search: searchObservationvariableInput, order: [orderObservationvariableInput], pagination: paginationInput!): [observationvariable]
  readOneObservationvariable(observationVariableDbId: ID!): observationvariable
  countObservationvariables(search: searchObservationvariableInput): Int
  csvTableTemplateObservationvariable: [String]
  observationvariablesConnection(search: searchObservationvariableInput, order: [orderObservationvariableInput], pagination: paginationCursorInput!): ObservationvariableConnection
  validateObservationvariableForCreation(observationVariableDbId: ID!, observationVariableName: String, observationVariablePUI: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, variableDbId: String, observations_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addStudies: [ID], addObservations: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationvariableForUpdating(observationVariableDbId: ID!, observationVariableName: String, observationVariablePUI: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, variableDbId: String, observations_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addStudies: [ID], removeStudies: [ID], addObservations: [ID], removeObservations: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateObservationvariableForDeletion(observationVariableDbId: ID!): Boolean!
  validateObservationvariableAfterReading(observationVariableDbId: ID!): Boolean!

  """
  observationvariablesZendroDefinition would return the static Zendro data model definition
  """
  observationvariablesZendroDefinition: GraphQLJSONObject
  ontologies(search: searchOntologyInput, order: [orderOntologyInput], pagination: paginationInput!): [ontology]
  readOneOntology(ontologyDbId: ID!): ontology
  countOntologies(search: searchOntologyInput): Int
  csvTableTemplateOntology: [String]
  ontologiesConnection(search: searchOntologyInput, order: [orderOntologyInput], pagination: paginationCursorInput!): OntologyConnection
  validateOntologyForCreation(ontologyDbId: ID!, authors: String, copyright: String, description: String, documentationURL: String, licence: String, ontologyName: String, version: String, additionalInfo_ID: String, ontologyReference_ID: String, addAdditionalInfo: ID, addOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologyForUpdating(ontologyDbId: ID!, authors: String, copyright: String, description: String, documentationURL: String, licence: String, ontologyName: String, version: String, additionalInfo_ID: String, ontologyReference_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologyForDeletion(ontologyDbId: ID!): Boolean!
  validateOntologyAfterReading(ontologyDbId: ID!): Boolean!

  """
  ontologiesZendroDefinition would return the static Zendro data model definition
  """
  ontologiesZendroDefinition: GraphQLJSONObject
  ontologyreferences(search: searchOntologyreferenceInput, order: [orderOntologyreferenceInput], pagination: paginationInput!): [ontologyreference]
  readOneOntologyreference(ontologyReferenceDbId: ID!): ontologyreference
  countOntologyreferences(search: searchOntologyreferenceInput): Int
  csvTableTemplateOntologyreference: [String]
  ontologyreferencesConnection(search: searchOntologyreferenceInput, order: [orderOntologyreferenceInput], pagination: paginationCursorInput!): OntologyreferenceConnection
  validateOntologyreferenceForCreation(ontologyReferenceDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, method_ID: String, observationVariable_ID: String, version: String, documentationLinks_IDs: [String], ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addMethod: ID, addObservationVariable: ID, addOntology: ID, addScale: ID, addTrait: ID, addDocumentationLinks: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologyreferenceForUpdating(ontologyReferenceDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, method_ID: String, observationVariable_ID: String, version: String, documentationLinks_IDs: [String], ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addMethod: ID, removeMethod: ID, addObservationVariable: ID, removeObservationVariable: ID, addOntology: ID, removeOntology: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addDocumentationLinks: [ID], removeDocumentationLinks: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologyreferenceForDeletion(ontologyReferenceDbId: ID!): Boolean!
  validateOntologyreferenceAfterReading(ontologyReferenceDbId: ID!): Boolean!

  """
  ontologyreferencesZendroDefinition would return the static Zendro data model definition
  """
  ontologyreferencesZendroDefinition: GraphQLJSONObject
  ontologyterms(search: searchOntologytermInput, order: [orderOntologytermInput], pagination: paginationInput!): [ontologyterm]
  readOneOntologyterm(ontologyTermDbId: ID!): ontologyterm
  countOntologyterms(search: searchOntologytermInput): Int
  csvTableTemplateOntologyterm: [String]
  ontologytermsConnection(search: searchOntologytermInput, order: [orderOntologytermInput], pagination: paginationCursorInput!): OntologytermConnection
  validateOntologytermForCreation(ontologyTermDbId: ID!, term: String, termURI: String, reference_ID: String, referenceSet_ID: String, addReference: ID, addReferenceSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologytermForUpdating(ontologyTermDbId: ID!, term: String, termURI: String, reference_ID: String, referenceSet_ID: String, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateOntologytermForDeletion(ontologyTermDbId: ID!): Boolean!
  validateOntologytermAfterReading(ontologyTermDbId: ID!): Boolean!

  """
  ontologytermsZendroDefinition would return the static Zendro data model definition
  """
  ontologytermsZendroDefinition: GraphQLJSONObject
  paginations(search: searchPaginationInput, order: [orderPaginationInput], pagination: paginationInput!): [pagination]
  readOnePagination(paginationDbId: ID!): pagination
  countPaginations(search: searchPaginationInput): Int
  csvTableTemplatePagination: [String]
  paginationsConnection(search: searchPaginationInput, order: [orderPaginationInput], pagination: paginationCursorInput!): PaginationConnection
  validatePaginationForCreation(paginationDbId: ID!, dimension: String, page: String, pageSize: String, totalCount: String, totalPages: String, alleleMatrix_ID: String, addAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePaginationForUpdating(paginationDbId: ID!, dimension: String, page: String, pageSize: String, totalCount: String, totalPages: String, alleleMatrix_ID: String, addAlleleMatrix: ID, removeAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePaginationForDeletion(paginationDbId: ID!): Boolean!
  validatePaginationAfterReading(paginationDbId: ID!): Boolean!

  """
  paginationsZendroDefinition would return the static Zendro data model definition
  """
  paginationsZendroDefinition: GraphQLJSONObject
  pedigreenodes(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]
  readOnePedigreenode(pedigreeNodeDbId: ID!): pedigreenode
  countPedigreenodes(search: searchPedigreenodeInput): Int
  csvTableTemplatePedigreenode: [String]
  pedigreenodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection
  validatePedigreenodeForCreation(pedigreeNodeDbId: ID!, crossingYear: String, defaultDisplayName: String, familyCode: String, pedigreeString: String, additionalInfo_ID: String, breedingMethod_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], germplasm_ID: String, parents_IDs: [String], progeny_IDs: [String], addAdditionalInfo: ID, addBreedingMethod: ID, addCrossingProject: ID, addGermplasm: ID, addExternalReferences: [ID], addParents: [ID], addProgeny: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePedigreenodeForUpdating(pedigreeNodeDbId: ID!, crossingYear: String, defaultDisplayName: String, familyCode: String, pedigreeString: String, additionalInfo_ID: String, breedingMethod_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], germplasm_ID: String, parents_IDs: [String], progeny_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addBreedingMethod: ID, removeBreedingMethod: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addParents: [ID], removeParents: [ID], addProgeny: [ID], removeProgeny: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePedigreenodeForDeletion(pedigreeNodeDbId: ID!): Boolean!
  validatePedigreenodeAfterReading(pedigreeNodeDbId: ID!): Boolean!

  """
  pedigreenodesZendroDefinition would return the static Zendro data model definition
  """
  pedigreenodesZendroDefinition: GraphQLJSONObject
  people(search: searchPersonInput, order: [orderPersonInput], pagination: paginationInput!): [person]
  readOnePerson(personDbId: ID!): person
  countPeople(search: searchPersonInput): Int
  csvTableTemplatePerson: [String]
  peopleConnection(search: searchPersonInput, order: [orderPersonInput], pagination: paginationCursorInput!): PersonConnection
  validatePersonForCreation(personDbId: ID!, description: String, emailAddress: String, firstName: String, lastName: String, mailingAddress: String, middleName: String, phoneNumber: String, userID: String, additionalInfo_ID: String, externalReferences_IDs: [String], lists_IDs: [String], programs_IDs: [String], addAdditionalInfo: ID, addExternalReferences: [ID], addLists: [ID], addPrograms: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePersonForUpdating(personDbId: ID!, description: String, emailAddress: String, firstName: String, lastName: String, mailingAddress: String, middleName: String, phoneNumber: String, userID: String, additionalInfo_ID: String, externalReferences_IDs: [String], lists_IDs: [String], programs_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addLists: [ID], removeLists: [ID], addPrograms: [ID], removePrograms: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePersonForDeletion(personDbId: ID!): Boolean!
  validatePersonAfterReading(personDbId: ID!): Boolean!

  """
  peopleZendroDefinition would return the static Zendro data model definition
  """
  peopleZendroDefinition: GraphQLJSONObject
  plannedcrosses(search: searchPlannedcrossInput, order: [orderPlannedcrossInput], pagination: paginationInput!): [plannedcross]
  readOnePlannedcross(plannedCrossDbId: ID!): plannedcross
  countPlannedcrosses(search: searchPlannedcrossInput): Int
  csvTableTemplatePlannedcross: [String]
  plannedcrossesConnection(search: searchPlannedcrossInput, order: [orderPlannedcrossInput], pagination: paginationCursorInput!): PlannedcrossConnection
  validatePlannedcrossForCreation(plannedCrossDbId: ID!, plannedCrossName: String, status: String, additionalInfo_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], crosses_IDs: [String], addAdditionalInfo: ID, addCrossingProject: ID, addExternalReferences: [ID], addCrosses: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePlannedcrossForUpdating(plannedCrossDbId: ID!, plannedCrossName: String, status: String, additionalInfo_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], crosses_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCrossingProject: ID, removeCrossingProject: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addCrosses: [ID], removeCrosses: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePlannedcrossForDeletion(plannedCrossDbId: ID!): Boolean!
  validatePlannedcrossAfterReading(plannedCrossDbId: ID!): Boolean!

  """
  plannedcrossesZendroDefinition would return the static Zendro data model definition
  """
  plannedcrossesZendroDefinition: GraphQLJSONObject
  plates(search: searchPlateInput, order: [orderPlateInput], pagination: paginationInput!): [plate]
  readOnePlate(plateDbId: ID!): plate
  countPlates(search: searchPlateInput): Int
  csvTableTemplatePlate: [String]
  platesConnection(search: searchPlateInput, order: [orderPlateInput], pagination: paginationCursorInput!): PlateConnection
  validatePlateForCreation(plateDbId: ID!, plateBarcode: String, plateFormat: String, plateName: String, sampleType: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, study_ID: String, trial_ID: String, samples_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addStudy: ID, addTrial: ID, addExternalReferences: [ID], addSamples: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePlateForUpdating(plateDbId: ID!, plateBarcode: String, plateFormat: String, plateName: String, sampleType: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, study_ID: String, trial_ID: String, samples_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSamples: [ID], removeSamples: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePlateForDeletion(plateDbId: ID!): Boolean!
  validatePlateAfterReading(plateDbId: ID!): Boolean!

  """
  platesZendroDefinition would return the static Zendro data model definition
  """
  platesZendroDefinition: GraphQLJSONObject
  pollinationevents(search: searchPollinationeventInput, order: [orderPollinationeventInput], pagination: paginationInput!): [pollinationevent]
  readOnePollinationevent(pollinationEventDbId: ID!): pollinationevent
  countPollinationevents(search: searchPollinationeventInput): Int
  csvTableTemplatePollinationevent: [String]
  pollinationeventsConnection(search: searchPollinationeventInput, order: [orderPollinationeventInput], pagination: paginationCursorInput!): PollinationeventConnection
  validatePollinationeventForCreation(pollinationEventDbId: ID!, pollinationNumber: String, pollinationSuccessful: String, pollinationTimeStamp: String, cross_ID: String, addCross: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePollinationeventForUpdating(pollinationEventDbId: ID!, pollinationNumber: String, pollinationSuccessful: String, pollinationTimeStamp: String, cross_ID: String, addCross: ID, removeCross: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePollinationeventForDeletion(pollinationEventDbId: ID!): Boolean!
  validatePollinationeventAfterReading(pollinationEventDbId: ID!): Boolean!

  """
  pollinationeventsZendroDefinition would return the static Zendro data model definition
  """
  pollinationeventsZendroDefinition: GraphQLJSONObject
  programs(search: searchProgramInput, order: [orderProgramInput], pagination: paginationInput!): [program]
  readOneProgram(programDbId: ID!): program
  countPrograms(search: searchProgramInput): Int
  csvTableTemplateProgram: [String]
  programsConnection(search: searchProgramInput, order: [orderProgramInput], pagination: paginationCursorInput!): ProgramConnection
  validateProgramForCreation(programDbId: ID!, abbreviation: String, commonCropName: String, documentationURL: String, fundingInformation: String, objective: String, programName: String, programType: String, additionalInfo_ID: String, externalReferences_IDs: [String], leadPerson_ID: String, trials_IDs: [String], plates_IDs: [String], samples_IDs: [String], crossingProjects_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addLeadPerson: ID, addExternalReferences: [ID], addTrials: [ID], addPlates: [ID], addSamples: [ID], addCrossingProjects: [ID], addSeedLots: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateProgramForUpdating(programDbId: ID!, abbreviation: String, commonCropName: String, documentationURL: String, fundingInformation: String, objective: String, programName: String, programType: String, additionalInfo_ID: String, externalReferences_IDs: [String], leadPerson_ID: String, trials_IDs: [String], plates_IDs: [String], samples_IDs: [String], crossingProjects_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addLeadPerson: ID, removeLeadPerson: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addTrials: [ID], removeTrials: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addCrossingProjects: [ID], removeCrossingProjects: [ID], addSeedLots: [ID], removeSeedLots: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateProgramForDeletion(programDbId: ID!): Boolean!
  validateProgramAfterReading(programDbId: ID!): Boolean!

  """
  programsZendroDefinition would return the static Zendro data model definition
  """
  programsZendroDefinition: GraphQLJSONObject
  publications(search: searchPublicationInput, order: [orderPublicationInput], pagination: paginationInput!): [publication]
  readOnePublication(publicationDbId: ID!): publication
  countPublications(search: searchPublicationInput): Int
  csvTableTemplatePublication: [String]
  publicationsConnection(search: searchPublicationInput, order: [orderPublicationInput], pagination: paginationCursorInput!): PublicationConnection
  validatePublicationForCreation(publicationDbId: ID!, publicationPUI: String, publicationReference: String, trial_ID: String, addTrial: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePublicationForUpdating(publicationDbId: ID!, publicationPUI: String, publicationReference: String, trial_ID: String, addTrial: ID, removeTrial: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validatePublicationForDeletion(publicationDbId: ID!): Boolean!
  validatePublicationAfterReading(publicationDbId: ID!): Boolean!

  """
  publicationsZendroDefinition would return the static Zendro data model definition
  """
  publicationsZendroDefinition: GraphQLJSONObject
  references(search: searchReferenceInput, order: [orderReferenceInput], pagination: paginationInput!): [reference]
  readOneReference(referenceDbId: ID!): reference
  countReferences(search: searchReferenceInput): Int
  csvTableTemplateReference: [String]
  referencesConnection(search: searchReferenceInput, order: [orderReferenceInput], pagination: paginationCursorInput!): ReferenceConnection
  validateReferenceForCreation(referenceDbId: ID!, commonCropName: String, isDerived: String, length: String, md5checksum: String, referenceName: String, sourceAccessions: String, sourceDivergence: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], referenceSet_ID: String, sourceGermplasm_IDs: [String], species_ID: String, variants_IDs: [String], addAdditionalInfo: ID, addReferenceSet: ID, addSpecies: ID, addExternalReferences: [ID], addSourceGermplasm: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateReferenceForUpdating(referenceDbId: ID!, commonCropName: String, isDerived: String, length: String, md5checksum: String, referenceName: String, sourceAccessions: String, sourceDivergence: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], referenceSet_ID: String, sourceGermplasm_IDs: [String], species_ID: String, variants_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addReferenceSet: ID, removeReferenceSet: ID, addSpecies: ID, removeSpecies: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSourceGermplasm: [ID], removeSourceGermplasm: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateReferenceForDeletion(referenceDbId: ID!): Boolean!
  validateReferenceAfterReading(referenceDbId: ID!): Boolean!

  """
  referencesZendroDefinition would return the static Zendro data model definition
  """
  referencesZendroDefinition: GraphQLJSONObject
  referencesets(search: searchReferencesetInput, order: [orderReferencesetInput], pagination: paginationInput!): [referenceset]
  readOneReferenceset(referenceSetDbId: ID!): referenceset
  countReferencesets(search: searchReferencesetInput): Int
  csvTableTemplateReferenceset: [String]
  referencesetsConnection(search: searchReferencesetInput, order: [orderReferencesetInput], pagination: paginationCursorInput!): ReferencesetConnection
  validateReferencesetForCreation(referenceSetDbId: ID!, assemblyPUI: String, commonCropName: String, description: String, isDerived: String, md5checksum: String, referenceSetName: String, sourceAccessions: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], sourceGermplasm_IDs: [String], species_ID: String, references_ID: String, variants_IDs: [String], variantSets_IDs: [String], addAdditionalInfo: ID, addSpecies: ID, addReferences: ID, addExternalReferences: [ID], addSourceGermplasm: [ID], addVariants: [ID], addVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateReferencesetForUpdating(referenceSetDbId: ID!, assemblyPUI: String, commonCropName: String, description: String, isDerived: String, md5checksum: String, referenceSetName: String, sourceAccessions: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], sourceGermplasm_IDs: [String], species_ID: String, references_ID: String, variants_IDs: [String], variantSets_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addSpecies: ID, removeSpecies: ID, addReferences: ID, removeReferences: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSourceGermplasm: [ID], removeSourceGermplasm: [ID], addVariants: [ID], removeVariants: [ID], addVariantSets: [ID], removeVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateReferencesetForDeletion(referenceSetDbId: ID!): Boolean!
  validateReferencesetAfterReading(referenceSetDbId: ID!): Boolean!

  """
  referencesetsZendroDefinition would return the static Zendro data model definition
  """
  referencesetsZendroDefinition: GraphQLJSONObject
  samples(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]
  readOneSample(sampleDbId: ID!): sample
  countSamples(search: searchSampleInput): Int
  csvTableTemplateSample: [String]
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection
  validateSampleForCreation(sampleDbId: ID!, column: String, row: String, sampleBarcode: String, sampleDescription: String, sampleGroupId: String, sampleName: String, samplePUI: String, sampleTimestamp: String, sampleType: String, takenBy: String, tissueType: String, well: String, additionalInfo_ID: String, callSets_IDs: [String], externalReferences_IDs: [String], germplasm_ID: String, observationUnit_ID: String, plate_ID: String, program_ID: String, study_ID: String, trial_ID: String, addAdditionalInfo: ID, addGermplasm: ID, addObservationUnit: ID, addPlate: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCallSets: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSampleForUpdating(sampleDbId: ID!, column: String, row: String, sampleBarcode: String, sampleDescription: String, sampleGroupId: String, sampleName: String, samplePUI: String, sampleTimestamp: String, sampleType: String, takenBy: String, tissueType: String, well: String, additionalInfo_ID: String, callSets_IDs: [String], externalReferences_IDs: [String], germplasm_ID: String, observationUnit_ID: String, plate_ID: String, program_ID: String, study_ID: String, trial_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, addPlate: ID, removePlate: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCallSets: [ID], removeCallSets: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSampleForDeletion(sampleDbId: ID!): Boolean!
  validateSampleAfterReading(sampleDbId: ID!): Boolean!

  """
  samplesZendroDefinition would return the static Zendro data model definition
  """
  samplesZendroDefinition: GraphQLJSONObject
  scales(search: searchScaleInput, order: [orderScaleInput], pagination: paginationInput!): [scale]
  readOneScale(scaleDbId: ID!): scale
  countScales(search: searchScaleInput): Int
  csvTableTemplateScale: [String]
  scalesConnection(search: searchScaleInput, order: [orderScaleInput], pagination: paginationCursorInput!): ScaleConnection
  validateScaleForCreation(scaleDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, dataType: String, decimalPlaces: String, scaleName: String, scalePUI: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, validValues_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addObservationVariable: ID, addAdditionalInfo: ID, addOntologyReference: ID, addValidValues: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateScaleForUpdating(scaleDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, dataType: String, decimalPlaces: String, scaleName: String, scalePUI: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, validValues_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addObservationVariable: ID, removeObservationVariable: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addValidValues: ID, removeValidValues: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateScaleForDeletion(scaleDbId: ID!): Boolean!
  validateScaleAfterReading(scaleDbId: ID!): Boolean!

  """
  scalesZendroDefinition would return the static Zendro data model definition
  """
  scalesZendroDefinition: GraphQLJSONObject
  seasons(search: searchSeasonInput, order: [orderSeasonInput], pagination: paginationInput!): [season]
  readOneSeason(seasonDbId: ID!): season
  countSeasons(search: searchSeasonInput): Int
  csvTableTemplateSeason: [String]
  seasonsConnection(search: searchSeasonInput, order: [orderSeasonInput], pagination: paginationCursorInput!): SeasonConnection
  validateSeasonForCreation(seasonDbId: ID!, seasonName: String, year: String, observation_IDs: [String], addObservation: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeasonForUpdating(seasonDbId: ID!, seasonName: String, year: String, observation_IDs: [String], addObservation: [ID], removeObservation: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeasonForDeletion(seasonDbId: ID!): Boolean!
  validateSeasonAfterReading(seasonDbId: ID!): Boolean!

  """
  seasonsZendroDefinition would return the static Zendro data model definition
  """
  seasonsZendroDefinition: GraphQLJSONObject
  seedlots(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationInput!): [seedlot]
  readOneSeedlot(seedLotDbId: ID!): seedlot
  countSeedlots(search: searchSeedlotInput): Int
  csvTableTemplateSeedlot: [String]
  seedlotsConnection(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationCursorInput!): SeedlotConnection
  validateSeedlotForCreation(seedLotDbId: ID!, amount: String, createdDate: String, lastUpdated: String, seedLotDescription: String, seedLotName: String, sourceCollection: String, storageLocation: String, units: String, additionalInfo_ID: String, contentMixture_IDs: [String], externalReferences_IDs: [String], location_ID: String, program_ID: String, fromSeedLotTransactions_IDs: [String], toSeedLotTransactions_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addLocation: ID, addProgram: ID, addContentMixture: [ID], addExternalReferences: [ID], addFromSeedLotTransactions: [ID], addToSeedLotTransactions: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeedlotForUpdating(seedLotDbId: ID!, amount: String, createdDate: String, lastUpdated: String, seedLotDescription: String, seedLotName: String, sourceCollection: String, storageLocation: String, units: String, additionalInfo_ID: String, contentMixture_IDs: [String], externalReferences_IDs: [String], location_ID: String, program_ID: String, fromSeedLotTransactions_IDs: [String], toSeedLotTransactions_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addLocation: ID, removeLocation: ID, addProgram: ID, removeProgram: ID, addContentMixture: [ID], removeContentMixture: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addFromSeedLotTransactions: [ID], removeFromSeedLotTransactions: [ID], addToSeedLotTransactions: [ID], removeToSeedLotTransactions: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeedlotForDeletion(seedLotDbId: ID!): Boolean!
  validateSeedlotAfterReading(seedLotDbId: ID!): Boolean!

  """
  seedlotsZendroDefinition would return the static Zendro data model definition
  """
  seedlotsZendroDefinition: GraphQLJSONObject
  seedlottransactions(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationInput!): [seedlottransaction]
  readOneSeedlottransaction(transactionDbId: ID!): seedlottransaction
  countSeedlottransactions(search: searchSeedlottransactionInput): Int
  csvTableTemplateSeedlottransaction: [String]
  seedlottransactionsConnection(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationCursorInput!): SeedlottransactionConnection
  validateSeedlottransactionForCreation(transactionDbId: ID!, amount: String, transactionDescription: String, transactionTimestamp: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], fromSeedLot_ID: String, toSeedLot_ID: String, addAdditionalInfo: ID, addFromSeedLot: ID, addToSeedLot: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeedlottransactionForUpdating(transactionDbId: ID!, amount: String, transactionDescription: String, transactionTimestamp: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], fromSeedLot_ID: String, toSeedLot_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addFromSeedLot: ID, removeFromSeedLot: ID, addToSeedLot: ID, removeToSeedLot: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSeedlottransactionForDeletion(transactionDbId: ID!): Boolean!
  validateSeedlottransactionAfterReading(transactionDbId: ID!): Boolean!

  """
  seedlottransactionsZendroDefinition would return the static Zendro data model definition
  """
  seedlottransactionsZendroDefinition: GraphQLJSONObject
  storagetypes(search: searchStoragetypeInput, order: [orderStoragetypeInput], pagination: paginationInput!): [storagetype]
  readOneStoragetype(storageTypeDbId: ID!): storagetype
  countStoragetypes(search: searchStoragetypeInput): Int
  csvTableTemplateStoragetype: [String]
  storagetypesConnection(search: searchStoragetypeInput, order: [orderStoragetypeInput], pagination: paginationCursorInput!): StoragetypeConnection
  validateStoragetypeForCreation(storageTypeDbId: ID!, code: String, description: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateStoragetypeForUpdating(storageTypeDbId: ID!, code: String, description: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateStoragetypeForDeletion(storageTypeDbId: ID!): Boolean!
  validateStoragetypeAfterReading(storageTypeDbId: ID!): Boolean!

  """
  storagetypesZendroDefinition would return the static Zendro data model definition
  """
  storagetypesZendroDefinition: GraphQLJSONObject
  studies(search: searchStudyInput, order: [orderStudyInput], pagination: paginationInput!): [study]
  readOneStudy(studyDbId: ID!): study
  countStudies(search: searchStudyInput): Int
  csvTableTemplateStudy: [String]
  studiesConnection(search: searchStudyInput, order: [orderStudyInput], pagination: paginationCursorInput!): StudyConnection
  validateStudyForCreation(studyDbId: ID!, active: String, commonCropName: String, culturalPractices: String, documentationURL: String, endDate: String, license: String, observationUnitsDescription: String, seasons: String, startDate: String, studyCode: String, studyDescription: String, studyName: String, studyPUI: String, studyType: String, additionalInfo_ID: String, environmentParameters_IDs: [String], experimentalDesign_ID: String, externalReferences_IDs: [String], growthFacility_ID: String, lastUpdate_ID: String, location_ID: String, observationLevels_IDs: [String], trial_ID: String, callSets_IDs: [String], plates_IDs: [String], samples_IDs: [String], variantSets_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addExperimentalDesign: ID, addGrowthFacility: ID, addLastUpdate: ID, addLocation: ID, addTrial: ID, addContacts: [ID], addEnvironmentParameters: [ID], addExternalReferences: [ID], addObservationLevels: [ID], addObservationVariables: [ID], addCallSets: [ID], addPlates: [ID], addSamples: [ID], addVariantSets: [ID], addEvents: [ID], addObservations: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateStudyForUpdating(studyDbId: ID!, active: String, commonCropName: String, culturalPractices: String, documentationURL: String, endDate: String, license: String, observationUnitsDescription: String, seasons: String, startDate: String, studyCode: String, studyDescription: String, studyName: String, studyPUI: String, studyType: String, additionalInfo_ID: String, environmentParameters_IDs: [String], experimentalDesign_ID: String, externalReferences_IDs: [String], growthFacility_ID: String, lastUpdate_ID: String, location_ID: String, observationLevels_IDs: [String], trial_ID: String, callSets_IDs: [String], plates_IDs: [String], samples_IDs: [String], variantSets_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addExperimentalDesign: ID, removeExperimentalDesign: ID, addGrowthFacility: ID, removeGrowthFacility: ID, addLastUpdate: ID, removeLastUpdate: ID, addLocation: ID, removeLocation: ID, addTrial: ID, removeTrial: ID, addContacts: [ID], removeContacts: [ID], addEnvironmentParameters: [ID], removeEnvironmentParameters: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addObservationLevels: [ID], removeObservationLevels: [ID], addObservationVariables: [ID], removeObservationVariables: [ID], addCallSets: [ID], removeCallSets: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addVariantSets: [ID], removeVariantSets: [ID], addEvents: [ID], removeEvents: [ID], addObservations: [ID], removeObservations: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateStudyForDeletion(studyDbId: ID!): Boolean!
  validateStudyAfterReading(studyDbId: ID!): Boolean!

  """
  studiesZendroDefinition would return the static Zendro data model definition
  """
  studiesZendroDefinition: GraphQLJSONObject
  synonyms(search: searchSynonymInput, order: [orderSynonymInput], pagination: paginationInput!): [synonym]
  readOneSynonym(synonymDbId: ID!): synonym
  countSynonyms(search: searchSynonymInput): Int
  csvTableTemplateSynonym: [String]
  synonymsConnection(search: searchSynonymInput, order: [orderSynonymInput], pagination: paginationCursorInput!): SynonymConnection
  validateSynonymForCreation(synonymDbId: ID!, synonym: String, type: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSynonymForUpdating(synonymDbId: ID!, synonym: String, type: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateSynonymForDeletion(synonymDbId: ID!): Boolean!
  validateSynonymAfterReading(synonymDbId: ID!): Boolean!

  """
  synonymsZendroDefinition would return the static Zendro data model definition
  """
  synonymsZendroDefinition: GraphQLJSONObject
  taxonids(search: searchTaxonidInput, order: [orderTaxonidInput], pagination: paginationInput!): [taxonid]
  readOneTaxonid(taxonDbId: ID!): taxonid
  countTaxonids(search: searchTaxonidInput): Int
  csvTableTemplateTaxonid: [String]
  taxonidsConnection(search: searchTaxonidInput, order: [orderTaxonidInput], pagination: paginationCursorInput!): TaxonidConnection
  validateTaxonidForCreation(taxonDbId: ID!, sourceName: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTaxonidForUpdating(taxonDbId: ID!, sourceName: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTaxonidForDeletion(taxonDbId: ID!): Boolean!
  validateTaxonidAfterReading(taxonDbId: ID!): Boolean!

  """
  taxonidsZendroDefinition would return the static Zendro data model definition
  """
  taxonidsZendroDefinition: GraphQLJSONObject
  traits(search: searchTraitInput, order: [orderTraitInput], pagination: paginationInput!): [trait]
  readOneTrait(traitDbId: ID!): trait
  countTraits(search: searchTraitInput): Int
  csvTableTemplateTrait: [String]
  traitsConnection(search: searchTraitInput, order: [orderTraitInput], pagination: paginationCursorInput!): TraitConnection
  validateTraitForCreation(traitDbId: ID!, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, alternativeAbbreviations: String, attribute: String, attributePUI: String, entity: String, entityPUI: String, mainAbbreviation: String, status: String, synonyms: String, traitClass: String, traitDescription: String, traitName: String, traitPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, addVariable: ID, addGermplasmAttribute: ID, addObservationVariable: ID, addAdditionalInfo: ID, addOntologyReference: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTraitForUpdating(traitDbId: ID!, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, alternativeAbbreviations: String, attribute: String, attributePUI: String, entity: String, entityPUI: String, mainAbbreviation: String, status: String, synonyms: String, traitClass: String, traitDescription: String, traitName: String, traitPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addObservationVariable: ID, removeObservationVariable: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTraitForDeletion(traitDbId: ID!): Boolean!
  validateTraitAfterReading(traitDbId: ID!): Boolean!

  """
  traitsZendroDefinition would return the static Zendro data model definition
  """
  traitsZendroDefinition: GraphQLJSONObject
  treatments(search: searchTreatmentInput, order: [orderTreatmentInput], pagination: paginationInput!): [treatment]
  readOneTreatment(treatmentDbId: ID!): treatment
  countTreatments(search: searchTreatmentInput): Int
  csvTableTemplateTreatment: [String]
  treatmentsConnection(search: searchTreatmentInput, order: [orderTreatmentInput], pagination: paginationCursorInput!): TreatmentConnection
  validateTreatmentForCreation(treatmentDbId: ID!, factor: String, modality: String, observationUnit_ID: String, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTreatmentForUpdating(treatmentDbId: ID!, factor: String, modality: String, observationUnit_ID: String, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTreatmentForDeletion(treatmentDbId: ID!): Boolean!
  validateTreatmentAfterReading(treatmentDbId: ID!): Boolean!

  """
  treatmentsZendroDefinition would return the static Zendro data model definition
  """
  treatmentsZendroDefinition: GraphQLJSONObject
  trials(search: searchTrialInput, order: [orderTrialInput], pagination: paginationInput!): [trial]
  readOneTrial(trialDbId: ID!): trial
  countTrials(search: searchTrialInput): Int
  csvTableTemplateTrial: [String]
  trialsConnection(search: searchTrialInput, order: [orderTrialInput], pagination: paginationCursorInput!): TrialConnection
  validateTrialForCreation(trialDbId: ID!, active: String, commonCropName: String, documentationURL: String, endDate: String, startDate: String, trialDescription: String, trialName: String, trialPUI: String, additionalInfo_ID: String, datasetAuthorships_IDs: [String], externalReferences_IDs: [String], program_ID: String, studies_IDs: [String], publications_IDs: [String], plates_IDs: [String], samples_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addContacts: [ID], addDatasetAuthorships: [ID], addExternalReferences: [ID], addStudies: [ID], addPublications: [ID], addPlates: [ID], addSamples: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTrialForUpdating(trialDbId: ID!, active: String, commonCropName: String, documentationURL: String, endDate: String, startDate: String, trialDescription: String, trialName: String, trialPUI: String, additionalInfo_ID: String, datasetAuthorships_IDs: [String], externalReferences_IDs: [String], program_ID: String, studies_IDs: [String], publications_IDs: [String], plates_IDs: [String], samples_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addContacts: [ID], removeContacts: [ID], addDatasetAuthorships: [ID], removeDatasetAuthorships: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addStudies: [ID], removeStudies: [ID], addPublications: [ID], removePublications: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateTrialForDeletion(trialDbId: ID!): Boolean!
  validateTrialAfterReading(trialDbId: ID!): Boolean!

  """
  trialsZendroDefinition would return the static Zendro data model definition
  """
  trialsZendroDefinition: GraphQLJSONObject
  validvalues(search: searchValidvaluesInput, order: [orderValidvaluesInput], pagination: paginationInput!): [validvalues]
  readOneValidvalues(validValuesDbId: ID!): validvalues
  countValidvalues(search: searchValidvaluesInput): Int
  csvTableTemplateValidvalues: [String]
  validvaluesConnection(search: searchValidvaluesInput, order: [orderValidvaluesInput], pagination: paginationCursorInput!): ValidvaluesConnection
  validateValidvaluesForCreation(validValuesDbId: ID!, maximumValue: String, minimumValue: String, categories_IDs: [String], scale_ID: String, addScale: ID, addCategories: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateValidvaluesForUpdating(validValuesDbId: ID!, maximumValue: String, minimumValue: String, categories_IDs: [String], scale_ID: String, addScale: ID, removeScale: ID, addCategories: [ID], removeCategories: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateValidvaluesForDeletion(validValuesDbId: ID!): Boolean!
  validateValidvaluesAfterReading(validValuesDbId: ID!): Boolean!

  """
  validvaluesZendroDefinition would return the static Zendro data model definition
  """
  validvaluesZendroDefinition: GraphQLJSONObject
  validvaluescategories(search: searchValidvaluescategoryInput, order: [orderValidvaluescategoryInput], pagination: paginationInput!): [validvaluescategory]
  readOneValidvaluescategory(validValuesCategoryDbId: ID!): validvaluescategory
  countValidvaluescategories(search: searchValidvaluescategoryInput): Int
  csvTableTemplateValidvaluescategory: [String]
  validvaluescategoriesConnection(search: searchValidvaluescategoryInput, order: [orderValidvaluescategoryInput], pagination: paginationCursorInput!): ValidvaluescategoryConnection
  validateValidvaluescategoryForCreation(validValuesCategoryDbId: ID!, label: String, value: String, validValues_ID: String, addValidValues: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateValidvaluescategoryForUpdating(validValuesCategoryDbId: ID!, label: String, value: String, validValues_ID: String, addValidValues: ID, removeValidValues: ID, skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateValidvaluescategoryForDeletion(validValuesCategoryDbId: ID!): Boolean!
  validateValidvaluescategoryAfterReading(validValuesCategoryDbId: ID!): Boolean!

  """
  validvaluescategoriesZendroDefinition would return the static Zendro data model definition
  """
  validvaluescategoriesZendroDefinition: GraphQLJSONObject
  variables(search: searchVariableInput, order: [orderVariableInput], pagination: paginationInput!): [variable]
  readOneVariable(variableDbId: ID!): variable
  countVariables(search: searchVariableInput): Int
  csvTableTemplateVariable: [String]
  variablesConnection(search: searchVariableInput, order: [orderVariableInput], pagination: paginationCursorInput!): VariableConnection
  validateVariableForCreation(variableDbId: ID!, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariableForUpdating(variableDbId: ID!, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariableForDeletion(variableDbId: ID!): Boolean!
  validateVariableAfterReading(variableDbId: ID!): Boolean!

  """
  variablesZendroDefinition would return the static Zendro data model definition
  """
  variablesZendroDefinition: GraphQLJSONObject
  variants(search: searchVariantInput, order: [orderVariantInput], pagination: paginationInput!): [variant]
  readOneVariant(variantDbId: ID!): variant
  countVariants(search: searchVariantInput): Int
  csvTableTemplateVariant: [String]
  variantsConnection(search: searchVariantInput, order: [orderVariantInput], pagination: paginationCursorInput!): VariantConnection
  validateVariantForCreation(variantDbId: ID!, analysis: String, ciend: String, cipos: String, created: String, end: String, filtersApplied: String, filtersFailed: String, filtersPassed: String, referenceBases: String, start: String, svlen: String, updated: String, variantNames: String, variantType: String, additionalInfo_ID: String, markerPositions_IDs: [String], calls_IDs: [String], externalReferences_IDs: [String], reference_ID: String, referenceSet_ID: String, variantSet_ID: String, addAdditionalInfo: ID, addReference: ID, addReferenceSet: ID, addVariantSet: ID, addMarkerPositions: [ID], addAlleleMatrices: [ID], addCalls: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariantForUpdating(variantDbId: ID!, analysis: String, ciend: String, cipos: String, created: String, end: String, filtersApplied: String, filtersFailed: String, filtersPassed: String, referenceBases: String, start: String, svlen: String, updated: String, variantNames: String, variantType: String, additionalInfo_ID: String, markerPositions_IDs: [String], calls_IDs: [String], externalReferences_IDs: [String], reference_ID: String, referenceSet_ID: String, variantSet_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addVariantSet: ID, removeVariantSet: ID, addMarkerPositions: [ID], removeMarkerPositions: [ID], addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariantForDeletion(variantDbId: ID!): Boolean!
  validateVariantAfterReading(variantDbId: ID!): Boolean!

  """
  variantsZendroDefinition would return the static Zendro data model definition
  """
  variantsZendroDefinition: GraphQLJSONObject
  variantsets(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationInput!): [variantset]
  readOneVariantset(variantSetDbId: ID!): variantset
  countVariantsets(search: searchVariantsetInput): Int
  csvTableTemplateVariantset: [String]
  variantsetsConnection(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationCursorInput!): VariantsetConnection
  validateVariantsetForCreation(variantSetDbId: ID!, callSetCount: String, variantCount: String, variantSetName: String, additionalInfo_ID: String, calls_IDs: [String], analysis_IDs: [String], externalReferences_IDs: [String], metadataFields_IDs: [String], referenceSet_ID: String, study_ID: String, variants_IDs: [String], addAdditionalInfo: ID, addReferenceSet: ID, addStudy: ID, addAlleleMatrices: [ID], addCalls: [ID], addCallSets: [ID], addAnalysis: [ID], addAvailableFormats: [ID], addExternalReferences: [ID], addMetadataFields: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariantsetForUpdating(variantSetDbId: ID!, callSetCount: String, variantCount: String, variantSetName: String, additionalInfo_ID: String, calls_IDs: [String], analysis_IDs: [String], externalReferences_IDs: [String], metadataFields_IDs: [String], referenceSet_ID: String, study_ID: String, variants_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addReferenceSet: ID, removeReferenceSet: ID, addStudy: ID, removeStudy: ID, addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addCallSets: [ID], removeCallSets: [ID], addAnalysis: [ID], removeAnalysis: [ID], addAvailableFormats: [ID], removeAvailableFormats: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addMetadataFields: [ID], removeMetadataFields: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): Boolean!
  validateVariantsetForDeletion(variantSetDbId: ID!): Boolean!
  validateVariantsetAfterReading(variantSetDbId: ID!): Boolean!

  """
  variantsetsZendroDefinition would return the static Zendro data model definition
  """
  variantsetsZendroDefinition: GraphQLJSONObject
}

type Mutation {
  addAdditionalinfo(additionalInfoDbId: ID!, additionalProperties: String, attribute_ID: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, call_ID: String, callSet_ID: String, genomeMap_ID: String, markerPosition_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, event_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addList: ID, addLocation: ID, addPerson: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCall: ID, addCallSet: ID, addGenomeMap: ID, addMarkerPosition: ID, addPlate: ID, addReference: ID, addReferenceSet: ID, addSample: ID, addVariant: ID, addVariantSet: ID, addCross: ID, addCrossingProject: ID, addGermplasm: ID, addGermplasmAttribute: ID, addGermplasmAttributeValue: ID, addPedigreeNode: ID, addPlannedCross: ID, addSeedLot: ID, addSeedLotTransaction: ID, addEvent: ID, addImage: ID, addMethod: ID, addObservation: ID, addObservationUnit: ID, addObservationVariable: ID, addOntology: ID, addScale: ID, addTrait: ID, skipAssociationsExistenceChecks: Boolean = false): additionalinfo!
  updateAdditionalinfo(additionalInfoDbId: ID!, additionalProperties: String, attribute_ID: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, call_ID: String, callSet_ID: String, genomeMap_ID: String, markerPosition_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, event_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addList: ID, removeList: ID, addLocation: ID, removeLocation: ID, addPerson: ID, removePerson: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCall: ID, removeCall: ID, addCallSet: ID, removeCallSet: ID, addGenomeMap: ID, removeGenomeMap: ID, addMarkerPosition: ID, removeMarkerPosition: ID, addPlate: ID, removePlate: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addSample: ID, removeSample: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addCross: ID, removeCross: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addGermplasmAttributeValue: ID, removeGermplasmAttributeValue: ID, addPedigreeNode: ID, removePedigreeNode: ID, addPlannedCross: ID, removePlannedCross: ID, addSeedLot: ID, removeSeedLot: ID, addSeedLotTransaction: ID, removeSeedLotTransaction: ID, addEvent: ID, removeEvent: ID, addImage: ID, removeImage: ID, addMethod: ID, removeMethod: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addOntology: ID, removeOntology: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, skipAssociationsExistenceChecks: Boolean = false): additionalinfo!
  deleteAdditionalinfo(additionalInfoDbId: ID!): String!
  addAllelematrix(alleleMatrixDbId: ID!, expandHomozygotes: String, sepPhased: String, sepUnphased: String, unknownString: String, dataMatrices_IDs: [String], pagination_IDs: [String], addCallSets: [ID], addDataMatrices: [ID], addPagination: [ID], addVariantSets: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): allelematrix!
  updateAllelematrix(alleleMatrixDbId: ID!, expandHomozygotes: String, sepPhased: String, sepUnphased: String, unknownString: String, dataMatrices_IDs: [String], pagination_IDs: [String], addCallSets: [ID], removeCallSets: [ID], addDataMatrices: [ID], removeDataMatrices: [ID], addPagination: [ID], removePagination: [ID], addVariantSets: [ID], removeVariantSets: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): allelematrix!
  deleteAllelematrix(alleleMatrixDbId: ID!): String!
  addAnalysis(analysisDbId: ID!, analysisName: String, created: String, description: String, software: String, type: String, updated: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): analysis!
  updateAnalysis(analysisDbId: ID!, analysisName: String, created: String, description: String, software: String, type: String, updated: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): analysis!
  deleteAnalysis(analysisDbId: ID!): String!
  addAttribute(attributeDbId: ID!, attributeCategory: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): attribute!
  updateAttribute(attributeDbId: ID!, attributeCategory: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): attribute!
  deleteAttribute(attributeDbId: ID!): String!
  addAvailableformat(availableFormatDbId: ID!, dataFormat: String, expandHomozygotes: String, fileFormat: String, fileURL: String, sepPhased: String, sepUnphased: String, unknownString: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): availableformat!
  updateAvailableformat(availableFormatDbId: ID!, dataFormat: String, expandHomozygotes: String, fileFormat: String, fileURL: String, sepPhased: String, sepUnphased: String, unknownString: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): availableformat!
  deleteAvailableformat(availableFormatDbId: ID!): String!
  addBreedingmethod(breedingMethodDbId: ID!, abbreviation: String, breedingMethodName: String, description: String, germplasm_IDs: [String], pedigreeNodes_IDs: [String], addGermplasm: [ID], addPedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): breedingmethod!
  updateBreedingmethod(breedingMethodDbId: ID!, abbreviation: String, breedingMethodName: String, description: String, germplasm_IDs: [String], pedigreeNodes_IDs: [String], addGermplasm: [ID], removeGermplasm: [ID], addPedigreeNodes: [ID], removePedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): breedingmethod!
  deleteBreedingmethod(breedingMethodDbId: ID!): String!
  addCall(callDbId: ID!, genotypeValue: String, phaseSet: String, additionalInfo_ID: String, callSet_ID: String, genotypeMetadata_IDs: [String], variant_ID: String, variantSet_ID: String, addAdditionalInfo: ID, addCallSet: ID, addVariant: ID, addVariantSet: ID, addGenotypeMetadata: [ID], skipAssociationsExistenceChecks: Boolean = false): call!
  updateCall(callDbId: ID!, genotypeValue: String, phaseSet: String, additionalInfo_ID: String, callSet_ID: String, genotypeMetadata_IDs: [String], variant_ID: String, variantSet_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addCallSet: ID, removeCallSet: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addGenotypeMetadata: [ID], removeGenotypeMetadata: [ID], skipAssociationsExistenceChecks: Boolean = false): call!
  deleteCall(callDbId: ID!): String!
  addCallset(callSetDbId: ID!, callSetName: String, created: String, updated: String, additionalInfo_ID: String, calls_IDs: [String], externalReferences_IDs: [String], sample_ID: String, study_ID: String, addAdditionalInfo: ID, addSample: ID, addStudy: ID, addAlleleMatrices: [ID], addCalls: [ID], addExternalReferences: [ID], addVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): callset!
  updateCallset(callSetDbId: ID!, callSetName: String, created: String, updated: String, additionalInfo_ID: String, calls_IDs: [String], externalReferences_IDs: [String], sample_ID: String, study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addSample: ID, removeSample: ID, addStudy: ID, removeStudy: ID, addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addVariantSets: [ID], removeVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): callset!
  deleteCallset(callSetDbId: ID!): String!
  addContact(contactDbId: ID!, email: String, instituteName: String, name: String, orcid: String, type: String, addStudy: [ID], addTrial: [ID], skipAssociationsExistenceChecks: Boolean = false): contact!
  updateContact(contactDbId: ID!, email: String, instituteName: String, name: String, orcid: String, type: String, addStudy: [ID], removeStudy: [ID], addTrial: [ID], removeTrial: [ID], skipAssociationsExistenceChecks: Boolean = false): contact!
  deleteContact(contactDbId: ID!): String!
  addContentmixture(contentMixtureDbId: ID!, mixturePercentage: String, cross_ID: String, germplasm_ID: String, seedLot_ID: String, addCross: ID, addGermplasm: ID, addSeedLot: ID, skipAssociationsExistenceChecks: Boolean = false): contentmixture!
  updateContentmixture(contentMixtureDbId: ID!, mixturePercentage: String, cross_ID: String, germplasm_ID: String, seedLot_ID: String, addCross: ID, removeCross: ID, addGermplasm: ID, removeGermplasm: ID, addSeedLot: ID, removeSeedLot: ID, skipAssociationsExistenceChecks: Boolean = false): contentmixture!
  deleteContentmixture(contentMixtureDbId: ID!): String!
  addCross(crossDbId: ID!, crossName: String, additionalInfo_ID: String, crossAttributes_IDs: [String], crossingProject_ID: String, externalReferences_IDs: [String], plannedCross_ID: String, pollinationEvents_IDs: [String], observationUnits_IDs: [String], contentMixture_IDs: [String], addAdditionalInfo: ID, addCrossingProject: ID, addPlannedCross: ID, addCrossAttributes: [ID], addExternalReferences: [ID], addPollinationEvents: [ID], addObservationUnits: [ID], addContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): cross!
  updateCross(crossDbId: ID!, crossName: String, additionalInfo_ID: String, crossAttributes_IDs: [String], crossingProject_ID: String, externalReferences_IDs: [String], plannedCross_ID: String, pollinationEvents_IDs: [String], observationUnits_IDs: [String], contentMixture_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCrossingProject: ID, removeCrossingProject: ID, addPlannedCross: ID, removePlannedCross: ID, addCrossAttributes: [ID], removeCrossAttributes: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addPollinationEvents: [ID], removePollinationEvents: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], addContentMixture: [ID], removeContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): cross!
  deleteCross(crossDbId: ID!): String!
  addCrossattribute(crossAttributeDbId: ID!, crossAttributeName: String, crossAttributeValue: String, cross_ID: String, addCross: ID, skipAssociationsExistenceChecks: Boolean = false): crossattribute!
  updateCrossattribute(crossAttributeDbId: ID!, crossAttributeName: String, crossAttributeValue: String, cross_ID: String, addCross: ID, removeCross: ID, skipAssociationsExistenceChecks: Boolean = false): crossattribute!
  deleteCrossattribute(crossAttributeDbId: ID!): String!
  addCrossingproject(crossingProjectDbId: ID!, commonCropName: String, crossingProjectDescription: String, crossingProjectName: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, crosses_IDs: [String], plannedCrosses_IDs: [String], pedigreeNodes_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addExternalReferences: [ID], addCrosses: [ID], addPlannedCrosses: [ID], addPedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): crossingproject!
  updateCrossingproject(crossingProjectDbId: ID!, commonCropName: String, crossingProjectDescription: String, crossingProjectName: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, crosses_IDs: [String], plannedCrosses_IDs: [String], pedigreeNodes_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addCrosses: [ID], removeCrosses: [ID], addPlannedCrosses: [ID], removePlannedCrosses: [ID], addPedigreeNodes: [ID], removePedigreeNodes: [ID], skipAssociationsExistenceChecks: Boolean = false): crossingproject!
  deleteCrossingproject(crossingProjectDbId: ID!): String!
  addCrossparent(crossParentDbId: ID!, germplasm_ID: String, observationUnit_ID: String, addGermplasm: ID, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): crossparent!
  updateCrossparent(crossParentDbId: ID!, germplasm_ID: String, observationUnit_ID: String, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): crossparent!
  deleteCrossparent(crossParentDbId: ID!): String!
  addDatalink(dataLinkDbId: ID!, dataFormat: String, description: String, fileFormat: String, name: String, provenance: String, scientificType: String, url: String, version: String, skipAssociationsExistenceChecks: Boolean = false): datalink!
  updateDatalink(dataLinkDbId: ID!, dataFormat: String, description: String, fileFormat: String, name: String, provenance: String, scientificType: String, url: String, version: String, skipAssociationsExistenceChecks: Boolean = false): datalink!
  deleteDatalink(dataLinkDbId: ID!): String!
  addDatamatrix(dataMatrixDbId: ID!, dataMatrix: String, dataMatrixAbbreviation: String, dataMatrixName: String, dataType: String, alleleMatrix_ID: String, addAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): datamatrix!
  updateDatamatrix(dataMatrixDbId: ID!, dataMatrix: String, dataMatrixAbbreviation: String, dataMatrixName: String, dataType: String, alleleMatrix_ID: String, addAlleleMatrix: ID, removeAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): datamatrix!
  deleteDatamatrix(dataMatrixDbId: ID!): String!
  addDatasetauthorships(datasetAuthorshipsDbId: ID!, datasetPUI: String, license: String, publicReleaseDate: String, submissionDate: String, trial_ID: String, addTrial: ID, skipAssociationsExistenceChecks: Boolean = false): datasetauthorships!
  updateDatasetauthorships(datasetAuthorshipsDbId: ID!, datasetPUI: String, license: String, publicReleaseDate: String, submissionDate: String, trial_ID: String, addTrial: ID, removeTrial: ID, skipAssociationsExistenceChecks: Boolean = false): datasetauthorships!
  deleteDatasetauthorships(datasetAuthorshipsDbId: ID!): String!
  addDocumentationlink(documentationLinkDbId: ID!, URL: String, type: String, ontologyReference_ID: String, addOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): documentationlink!
  updateDocumentationlink(documentationLinkDbId: ID!, URL: String, type: String, ontologyReference_ID: String, addOntologyReference: ID, removeOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): documentationlink!
  deleteDocumentationlink(documentationLinkDbId: ID!): String!
  addDonor(donorDbId: ID!, donorAccessionNumber: String, donorInstituteCode: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): donor!
  updateDonor(donorDbId: ID!, donorAccessionNumber: String, donorInstituteCode: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): donor!
  deleteDonor(donorDbId: ID!): String!
  addEnvironmentparameters(environmentParametersDbId: ID!, description: String, parameterName: String, parameterPUI: String, unit: String, unitPUI: String, value: String, valuePUI: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): environmentparameters!
  updateEnvironmentparameters(environmentParametersDbId: ID!, description: String, parameterName: String, parameterPUI: String, unit: String, unitPUI: String, value: String, valuePUI: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): environmentparameters!
  deleteEnvironmentparameters(environmentParametersDbId: ID!): String!
  addEvent(eventDbId: ID!, eventDescription: String, eventType: String, eventTypeDbId: String, additionalInfo_ID: String, eventDateRange_IDs: [String], eventParameters_IDs: [String], study_ID: String, addAdditionalInfo: ID, addStudy: ID, addEventDateRange: [ID], addEventParameters: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): event!
  updateEvent(eventDbId: ID!, eventDescription: String, eventType: String, eventTypeDbId: String, additionalInfo_ID: String, eventDateRange_IDs: [String], eventParameters_IDs: [String], study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addStudy: ID, removeStudy: ID, addEventDateRange: [ID], removeEventDateRange: [ID], addEventParameters: [ID], removeEventParameters: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): event!
  deleteEvent(eventDbId: ID!): String!
  addEventdaterange(eventDateRangeDbId: ID!, discreteDates: String, endDate: String, startDate: String, event_ID: String, addEvent: ID, skipAssociationsExistenceChecks: Boolean = false): eventdaterange!
  updateEventdaterange(eventDateRangeDbId: ID!, discreteDates: String, endDate: String, startDate: String, event_ID: String, addEvent: ID, removeEvent: ID, skipAssociationsExistenceChecks: Boolean = false): eventdaterange!
  deleteEventdaterange(eventDateRangeDbId: ID!): String!
  addEventparameter(eventParameterDbId: ID!, code: String, description: String, name: String, units: String, value: String, valueDescription: String, valuesByDate: String, event_ID: String, addEvent: ID, skipAssociationsExistenceChecks: Boolean = false): eventparameter!
  updateEventparameter(eventParameterDbId: ID!, code: String, description: String, name: String, units: String, value: String, valueDescription: String, valuesByDate: String, event_ID: String, addEvent: ID, removeEvent: ID, skipAssociationsExistenceChecks: Boolean = false): eventparameter!
  deleteEventparameter(eventParameterDbId: ID!): String!
  addExperimentaldesign(experimentalDesignDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): experimentaldesign!
  updateExperimentaldesign(experimentalDesignDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): experimentaldesign!
  deleteExperimentaldesign(experimentalDesignDbId: ID!): String!
  addExternalreference(referenceDbId: ID!, attribute_ID: String, referenceSource: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, callSet_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addList: ID, addLocation: ID, addPerson: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCallSet: ID, addPlate: ID, addReference: ID, addReferenceSet: ID, addSample: ID, addVariant: ID, addVariantSet: ID, addCross: ID, addCrossingProject: ID, addGermplasm: ID, addGermplasmAttribute: ID, addGermplasmAttributeValue: ID, addPedigreeNode: ID, addPlannedCross: ID, addSeedLot: ID, addSeedLotTransaction: ID, addImage: ID, addMethod: ID, addObservation: ID, addObservationUnit: ID, addObservationVariable: ID, addScale: ID, addTrait: ID, skipAssociationsExistenceChecks: Boolean = false): externalreference!
  updateExternalreference(referenceDbId: ID!, attribute_ID: String, referenceSource: String, variable_ID: String, list_ID: String, location_ID: String, person_ID: String, program_ID: String, study_ID: String, trial_ID: String, callSet_ID: String, plate_ID: String, reference_ID: String, referenceSet_ID: String, sample_ID: String, variant_ID: String, variantSet_ID: String, cross_ID: String, crossingProject_ID: String, germplasm_ID: String, germplasmAttribute_ID: String, germplasmAttributeValue_ID: String, pedigreeNode_ID: String, plannedCross_ID: String, seedLot_ID: String, seedLotTransaction_ID: String, image_ID: String, method_ID: String, observation_ID: String, observationUnit_ID: String, observationVariable_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addList: ID, removeList: ID, addLocation: ID, removeLocation: ID, addPerson: ID, removePerson: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCallSet: ID, removeCallSet: ID, addPlate: ID, removePlate: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addSample: ID, removeSample: ID, addVariant: ID, removeVariant: ID, addVariantSet: ID, removeVariantSet: ID, addCross: ID, removeCross: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addGermplasmAttributeValue: ID, removeGermplasmAttributeValue: ID, addPedigreeNode: ID, removePedigreeNode: ID, addPlannedCross: ID, removePlannedCross: ID, addSeedLot: ID, removeSeedLot: ID, addSeedLotTransaction: ID, removeSeedLotTransaction: ID, addImage: ID, removeImage: ID, addMethod: ID, removeMethod: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, skipAssociationsExistenceChecks: Boolean = false): externalreference!
  deleteExternalreference(referenceDbId: ID!): String!
  addGenomemap(mapDbId: ID!, comments: String, commonCropName: String, documentationURL: String, linkageGroupCount: String, mapName: String, mapPUI: String, markerCount: String, publishedDate: String, scientificName: String, type: String, unit: String, additionalInfo_ID: String, markerPositions_IDs: [String], addAdditionalInfo: ID, addMarkerPositions: [ID], skipAssociationsExistenceChecks: Boolean = false): genomemap!
  updateGenomemap(mapDbId: ID!, comments: String, commonCropName: String, documentationURL: String, linkageGroupCount: String, mapName: String, mapPUI: String, markerCount: String, publishedDate: String, scientificName: String, type: String, unit: String, additionalInfo_ID: String, markerPositions_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addMarkerPositions: [ID], removeMarkerPositions: [ID], skipAssociationsExistenceChecks: Boolean = false): genomemap!
  deleteGenomemap(mapDbId: ID!): String!
  addGenotypemetadata(genotypeMetadataDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, fieldValue: String, call_ID: String, addCall: ID, skipAssociationsExistenceChecks: Boolean = false): genotypemetadata!
  updateGenotypemetadata(genotypeMetadataDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, fieldValue: String, call_ID: String, addCall: ID, removeCall: ID, skipAssociationsExistenceChecks: Boolean = false): genotypemetadata!
  deleteGenotypemetadata(genotypeMetadataDbId: ID!): String!
  addGeojson(geoJSONDbId: ID!, type: String, image_ID: String, observation_ID: String, observationUnit_ID: String, germplasmOrigin_ID: String, location_ID: String, addImage: ID, addObservation: ID, addObservationUnit: ID, addGermplasmOrigin: ID, addLocation: ID, skipAssociationsExistenceChecks: Boolean = false): geojson!
  updateGeojson(geoJSONDbId: ID!, type: String, image_ID: String, observation_ID: String, observationUnit_ID: String, germplasmOrigin_ID: String, location_ID: String, addImage: ID, removeImage: ID, addObservation: ID, removeObservation: ID, addObservationUnit: ID, removeObservationUnit: ID, addGermplasmOrigin: ID, removeGermplasmOrigin: ID, addLocation: ID, removeLocation: ID, skipAssociationsExistenceChecks: Boolean = false): geojson!
  deleteGeojson(geoJSONDbId: ID!): String!
  addGeojsongeometry(geoJSONGeometryDbId: ID!, coordinates: String, type: String, skipAssociationsExistenceChecks: Boolean = false): geojsongeometry!
  updateGeojsongeometry(geoJSONGeometryDbId: ID!, coordinates: String, type: String, skipAssociationsExistenceChecks: Boolean = false): geojsongeometry!
  deleteGeojsongeometry(geoJSONGeometryDbId: ID!): String!
  addGermplasm(germplasmDbId: ID!, crossParent_ID: String, accessionNumber: String, acquisitionDate: String, biologicalStatusOfAccessionCode: String, biologicalStatusOfAccessionDescription: String, collection: String, commonCropName: String, countryOfOriginCode: String, defaultDisplayName: String, documentationURL: String, genus: String, germplasmName: String, germplasmPUI: String, germplasmPreprocessing: String, instituteCode: String, instituteName: String, pedigree: String, seedSource: String, seedSourceDescription: String, species: String, speciesAuthority: String, subtaxa: String, subtaxaAuthority: String, additionalInfo_ID: String, breedingMethod_ID: String, pedigreeNode_ID: String, donors_IDs: [String], externalReferences_IDs: [String], germplasmOrigin_IDs: [String], storageTypes_IDs: [String], synonyms_IDs: [String], taxonIds_IDs: [String], samples_IDs: [String], attributeValues_IDs: [String], progenyPedigreeNodes_IDs: [String], parentPedigreeNodes_IDs: [String], siblingPedigreeNodes_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], reference_ID: String, referenceSet_ID: String, contentMixture_IDs: [String], addCrossParent: ID, addAdditionalInfo: ID, addBreedingMethod: ID, addPedigreeNode: ID, addReference: ID, addReferenceSet: ID, addDonors: [ID], addExternalReferences: [ID], addGermplasmOrigin: [ID], addStorageTypes: [ID], addSynonyms: [ID], addTaxonIds: [ID], addSamples: [ID], addAttributeValues: [ID], addProgenyPedigreeNodes: [ID], addParentPedigreeNodes: [ID], addSiblingPedigreeNodes: [ID], addObservations: [ID], addObservationUnits: [ID], addContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasm!
  updateGermplasm(germplasmDbId: ID!, crossParent_ID: String, accessionNumber: String, acquisitionDate: String, biologicalStatusOfAccessionCode: String, biologicalStatusOfAccessionDescription: String, collection: String, commonCropName: String, countryOfOriginCode: String, defaultDisplayName: String, documentationURL: String, genus: String, germplasmName: String, germplasmPUI: String, germplasmPreprocessing: String, instituteCode: String, instituteName: String, pedigree: String, seedSource: String, seedSourceDescription: String, species: String, speciesAuthority: String, subtaxa: String, subtaxaAuthority: String, additionalInfo_ID: String, breedingMethod_ID: String, pedigreeNode_ID: String, donors_IDs: [String], externalReferences_IDs: [String], germplasmOrigin_IDs: [String], storageTypes_IDs: [String], synonyms_IDs: [String], taxonIds_IDs: [String], samples_IDs: [String], attributeValues_IDs: [String], progenyPedigreeNodes_IDs: [String], parentPedigreeNodes_IDs: [String], siblingPedigreeNodes_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], reference_ID: String, referenceSet_ID: String, contentMixture_IDs: [String], addCrossParent: ID, removeCrossParent: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addBreedingMethod: ID, removeBreedingMethod: ID, addPedigreeNode: ID, removePedigreeNode: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addDonors: [ID], removeDonors: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addGermplasmOrigin: [ID], removeGermplasmOrigin: [ID], addStorageTypes: [ID], removeStorageTypes: [ID], addSynonyms: [ID], removeSynonyms: [ID], addTaxonIds: [ID], removeTaxonIds: [ID], addSamples: [ID], removeSamples: [ID], addAttributeValues: [ID], removeAttributeValues: [ID], addProgenyPedigreeNodes: [ID], removeProgenyPedigreeNodes: [ID], addParentPedigreeNodes: [ID], removeParentPedigreeNodes: [ID], addSiblingPedigreeNodes: [ID], removeSiblingPedigreeNodes: [ID], addObservations: [ID], removeObservations: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], addContentMixture: [ID], removeContentMixture: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasm!
  deleteGermplasm(germplasmDbId: ID!): String!
  addGermplasmattribute(germplasmAttributeDbId: ID!, attributeCategory: String, attributeDbId: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, attributeValues_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addAttributeValues: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmattribute!
  updateGermplasmattribute(germplasmAttributeDbId: ID!, attributeCategory: String, attributeDbId: String, attributeName: String, attributePUI: String, attributeDescription: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, attributeValues_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addAttributeValues: [ID], removeAttributeValues: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmattribute!
  deleteGermplasmattribute(germplasmAttributeDbId: ID!): String!
  addGermplasmattributevalue(attributeValueDbId: ID!, determinedDate: String, value: String, additionalInfo_ID: String, attribute_ID: String, externalReferences_IDs: [String], germplasm_ID: String, addAdditionalInfo: ID, addAttribute: ID, addGermplasm: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmattributevalue!
  updateGermplasmattributevalue(attributeValueDbId: ID!, determinedDate: String, value: String, additionalInfo_ID: String, attribute_ID: String, externalReferences_IDs: [String], germplasm_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addAttribute: ID, removeAttribute: ID, addGermplasm: ID, removeGermplasm: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmattributevalue!
  deleteGermplasmattributevalue(attributeValueDbId: ID!): String!
  addGermplasmchild(germplasmChildDbId: ID!, childGermplasm_ID: String, pedigreeNode_ID: String, addChildGermplasm: ID, addPedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): germplasmchild!
  updateGermplasmchild(germplasmChildDbId: ID!, childGermplasm_ID: String, pedigreeNode_ID: String, addChildGermplasm: ID, removeChildGermplasm: ID, addPedigreeNode: ID, removePedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): germplasmchild!
  deleteGermplasmchild(germplasmChildDbId: ID!): String!
  addGermplasmorigin(germplasmOriginDbId: ID!, coordinateUncertainty: String, coordinates_IDs: [String], germplasm_ID: String, addGermplasm: ID, addCoordinates: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmorigin!
  updateGermplasmorigin(germplasmOriginDbId: ID!, coordinateUncertainty: String, coordinates_IDs: [String], germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, addCoordinates: [ID], removeCoordinates: [ID], skipAssociationsExistenceChecks: Boolean = false): germplasmorigin!
  deleteGermplasmorigin(germplasmOriginDbId: ID!): String!
  addGermplasmparent(germplasmParentDbId: ID!, parentGermplasm_ID: String, pedigreeNode_ID: String, addParentGermplasm: ID, addPedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): germplasmparent!
  updateGermplasmparent(germplasmParentDbId: ID!, parentGermplasm_ID: String, pedigreeNode_ID: String, addParentGermplasm: ID, removeParentGermplasm: ID, addPedigreeNode: ID, removePedigreeNode: ID, skipAssociationsExistenceChecks: Boolean = false): germplasmparent!
  deleteGermplasmparent(germplasmParentDbId: ID!): String!
  addGrowthfacility(growthFacilityDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): growthfacility!
  updateGrowthfacility(growthFacilityDbId: ID!, PUI: String, description: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): growthfacility!
  deleteGrowthfacility(growthFacilityDbId: ID!): String!
  addImage(imageDbId: ID!, copyright: String, description: String, descriptiveOntologyTerms: String, imageFileName: String, imageFileSize: String, imageHeight: String, imageName: String, imageTimeStamp: String, imageURL: String, imageWidth: String, mimeType: String, additionalInfo_ID: String, externalReferences_IDs: [String], imageLocation_ID: String, observationUnit_ID: String, addAdditionalInfo: ID, addImageLocation: ID, addObservationUnit: ID, addExternalReferences: [ID], addObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): image!
  updateImage(imageDbId: ID!, copyright: String, description: String, descriptiveOntologyTerms: String, imageFileName: String, imageFileSize: String, imageHeight: String, imageName: String, imageTimeStamp: String, imageURL: String, imageWidth: String, mimeType: String, additionalInfo_ID: String, externalReferences_IDs: [String], imageLocation_ID: String, observationUnit_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addImageLocation: ID, removeImageLocation: ID, addObservationUnit: ID, removeObservationUnit: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addObservations: [ID], removeObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): image!
  deleteImage(imageDbId: ID!): String!
  addLastupdate(lastUpdateDbId: ID!, timestamp: String, version: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): lastupdate!
  updateLastupdate(lastUpdateDbId: ID!, timestamp: String, version: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): lastupdate!
  deleteLastupdate(lastUpdateDbId: ID!): String!
  addList(listDbId: ID!, data: String, dateCreated: String, dateModified: String, listDescription: String, listName: String, listOwnerName: String, listSize: String, listSource: String, additionalInfo_ID: String, externalReferences_IDs: [String], listOwnerPerson_ID: String, addAdditionalInfo: ID, addListOwnerPerson: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): list!
  updateList(listDbId: ID!, data: String, dateCreated: String, dateModified: String, listDescription: String, listName: String, listOwnerName: String, listSize: String, listSource: String, additionalInfo_ID: String, externalReferences_IDs: [String], listOwnerPerson_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addListOwnerPerson: ID, removeListOwnerPerson: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): list!
  deleteList(listDbId: ID!): String!
  addLocation(locationDbId: ID!, abbreviation: String, coordinateDescription: String, coordinateUncertainty: String, countryCode: String, countryName: String, documentationURL: String, environmentType: String, exposure: String, instituteAddress: String, instituteName: String, locationName: String, locationType: String, siteStatus: String, slope: String, topography: String, additionalInfo_ID: String, coordinates_ID: String, externalReferences_IDs: [String], parentLocation_ID: String, childLocations_IDs: [String], studies_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addCoordinates: ID, addParentLocation: ID, addExternalReferences: [ID], addChildLocations: [ID], addStudies: [ID], addSeedLots: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): location!
  updateLocation(locationDbId: ID!, abbreviation: String, coordinateDescription: String, coordinateUncertainty: String, countryCode: String, countryName: String, documentationURL: String, environmentType: String, exposure: String, instituteAddress: String, instituteName: String, locationName: String, locationType: String, siteStatus: String, slope: String, topography: String, additionalInfo_ID: String, coordinates_ID: String, externalReferences_IDs: [String], parentLocation_ID: String, childLocations_IDs: [String], studies_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCoordinates: ID, removeCoordinates: ID, addParentLocation: ID, removeParentLocation: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addChildLocations: [ID], removeChildLocations: [ID], addStudies: [ID], removeStudies: [ID], addSeedLots: [ID], removeSeedLots: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): location!
  deleteLocation(locationDbId: ID!): String!
  addMarkerposition(markerPositionDbId: ID!, linkageGroupName: String, position: String, additionalInfo_ID: String, map_ID: String, variant_ID: String, addAdditionalInfo: ID, addMap: ID, addVariant: ID, skipAssociationsExistenceChecks: Boolean = false): markerposition!
  updateMarkerposition(markerPositionDbId: ID!, linkageGroupName: String, position: String, additionalInfo_ID: String, map_ID: String, variant_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMap: ID, removeMap: ID, addVariant: ID, removeVariant: ID, skipAssociationsExistenceChecks: Boolean = false): markerposition!
  deleteMarkerposition(markerPositionDbId: ID!): String!
  addMetadatafield(metadataFieldDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, variantSet_ID: String, addVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): metadatafield!
  updateMetadatafield(metadataFieldDbId: ID!, dataType: String, fieldAbbreviation: String, fieldName: String, variantSet_ID: String, addVariantSet: ID, removeVariantSet: ID, skipAssociationsExistenceChecks: Boolean = false): metadatafield!
  deleteMetadatafield(metadataFieldDbId: ID!): String!
  addMethod(methodDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, bibliographicalReference: String, description: String, formula: String, methodClass: String, methodName: String, methodPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, observationVariable_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addAdditionalInfo: ID, addOntologyReference: ID, addObservationVariable: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): method!
  updateMethod(methodDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, bibliographicalReference: String, description: String, formula: String, methodClass: String, methodName: String, methodPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, observationVariable_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addObservationVariable: ID, removeObservationVariable: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): method!
  deleteMethod(methodDbId: ID!): String!
  addObservation(observationDbId: ID!, collector: String, observationTimeStamp: String, uploadedBy: String, value: String, additionalInfo_ID: String, externalReferences_IDs: [String], geoCoordinates_ID: String, germplasm_ID: String, observationUnit_ID: String, observationVariable_ID: String, season_ID: String, study_ID: String, addAdditionalInfo: ID, addGeoCoordinates: ID, addGermplasm: ID, addObservationUnit: ID, addObservationVariable: ID, addSeason: ID, addStudy: ID, addExternalReferences: [ID], addImages: [ID], skipAssociationsExistenceChecks: Boolean = false): observation!
  updateObservation(observationDbId: ID!, collector: String, observationTimeStamp: String, uploadedBy: String, value: String, additionalInfo_ID: String, externalReferences_IDs: [String], geoCoordinates_ID: String, germplasm_ID: String, observationUnit_ID: String, observationVariable_ID: String, season_ID: String, study_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addGeoCoordinates: ID, removeGeoCoordinates: ID, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, addObservationVariable: ID, removeObservationVariable: ID, addSeason: ID, removeSeason: ID, addStudy: ID, removeStudy: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addImages: [ID], removeImages: [ID], skipAssociationsExistenceChecks: Boolean = false): observation!
  deleteObservation(observationDbId: ID!): String!
  addObservationunit(observationUnitDbId: ID!, crossParent_IDs: [String], observationUnitName: String, observationUnitPUI: String, additionalInfo_ID: String, cross_ID: String, externalReferences_IDs: [String], germplasm_ID: String, location_ID: String, observationUnitPosition_IDs: [String], program_ID: String, seedLot_ID: String, study_ID: String, treatments_IDs: [String], trial_ID: String, samples_IDs: [String], images_IDs: [String], observations_IDs: [String], observationUnitLevelRelationship_ID: String, addAdditionalInfo: ID, addCross: ID, addGermplasm: ID, addLocation: ID, addProgram: ID, addSeedLot: ID, addStudy: ID, addTrial: ID, addObservationUnitLevelRelationship: ID, addCrossParent: [ID], addExternalReferences: [ID], addObservationUnitPosition: [ID], addTreatments: [ID], addSamples: [ID], addEvents: [ID], addImages: [ID], addObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): observationunit!
  updateObservationunit(observationUnitDbId: ID!, crossParent_IDs: [String], observationUnitName: String, observationUnitPUI: String, additionalInfo_ID: String, cross_ID: String, externalReferences_IDs: [String], germplasm_ID: String, location_ID: String, observationUnitPosition_IDs: [String], program_ID: String, seedLot_ID: String, study_ID: String, treatments_IDs: [String], trial_ID: String, samples_IDs: [String], images_IDs: [String], observations_IDs: [String], observationUnitLevelRelationship_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addCross: ID, removeCross: ID, addGermplasm: ID, removeGermplasm: ID, addLocation: ID, removeLocation: ID, addProgram: ID, removeProgram: ID, addSeedLot: ID, removeSeedLot: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addObservationUnitLevelRelationship: ID, removeObservationUnitLevelRelationship: ID, addCrossParent: [ID], removeCrossParent: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addObservationUnitPosition: [ID], removeObservationUnitPosition: [ID], addTreatments: [ID], removeTreatments: [ID], addSamples: [ID], removeSamples: [ID], addEvents: [ID], removeEvents: [ID], addImages: [ID], removeImages: [ID], addObservations: [ID], removeObservations: [ID], skipAssociationsExistenceChecks: Boolean = false): observationunit!
  deleteObservationunit(observationUnitDbId: ID!): String!
  addObservationunithierarchylevel(observationUnitHierarchyLevelDbId: ID!, levelName: String, levelOrder: String, study_ID: String, addStudy: ID, skipAssociationsExistenceChecks: Boolean = false): observationunithierarchylevel!
  updateObservationunithierarchylevel(observationUnitHierarchyLevelDbId: ID!, levelName: String, levelOrder: String, study_ID: String, addStudy: ID, removeStudy: ID, skipAssociationsExistenceChecks: Boolean = false): observationunithierarchylevel!
  deleteObservationunithierarchylevel(observationUnitHierarchyLevelDbId: ID!): String!
  addObservationunitlevel(observationUnitLevelDbId: ID!, observationUnitPosition_ID: String, levelCode: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, addObservationUnitPosition: ID, skipAssociationsExistenceChecks: Boolean = false): observationunitlevel!
  updateObservationunitlevel(observationUnitLevelDbId: ID!, observationUnitPosition_ID: String, levelCode: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, addObservationUnitPosition: ID, removeObservationUnitPosition: ID, skipAssociationsExistenceChecks: Boolean = false): observationunitlevel!
  deleteObservationunitlevel(observationUnitLevelDbId: ID!): String!
  addObservationunitlevelrelationship(observationUnitLevelRelationshipDbId: ID!, observationUnitPosition_ID: String, levelCode: String, observationUnitLevelDbId: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, observationUnit_ID: String, addObservationUnitPosition: ID, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): observationunitlevelrelationship!
  updateObservationunitlevelrelationship(observationUnitLevelRelationshipDbId: ID!, observationUnitPosition_ID: String, levelCode: String, observationUnitLevelDbId: String, levelName: String, levelOrder: String, observationUnitHierarchyLevelDbId: String, observationUnit_ID: String, addObservationUnitPosition: ID, removeObservationUnitPosition: ID, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): observationunitlevelrelationship!
  deleteObservationunitlevelrelationship(observationUnitLevelRelationshipDbId: ID!): String!
  addObservationunitposition(observationUnitPositionDbId: ID!, entryType: String, positionCoordinateX: String, positionCoordinateXType: String, positionCoordinateY: String, positionCoordinateYType: String, geoCoordinates_IDs: [String], observationLevel_ID: String, observationLevelRelationships_IDs: [String], addObservationLevel: ID, addObservationUnit: ID, addGeoCoordinates: [ID], addObservationLevelRelationships: [ID], skipAssociationsExistenceChecks: Boolean = false): observationunitposition!
  updateObservationunitposition(observationUnitPositionDbId: ID!, entryType: String, positionCoordinateX: String, positionCoordinateXType: String, positionCoordinateY: String, positionCoordinateYType: String, geoCoordinates_IDs: [String], observationLevel_ID: String, observationLevelRelationships_IDs: [String], addObservationLevel: ID, removeObservationLevel: ID, addObservationUnit: ID, removeObservationUnit: ID, addGeoCoordinates: [ID], removeGeoCoordinates: [ID], addObservationLevelRelationships: [ID], removeObservationLevelRelationships: [ID], skipAssociationsExistenceChecks: Boolean = false): observationunitposition!
  deleteObservationunitposition(observationUnitPositionDbId: ID!): String!
  addObservationvariable(observationVariableDbId: ID!, observationVariableName: String, observationVariablePUI: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, variableDbId: String, observations_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addStudies: [ID], addObservations: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): observationvariable!
  updateObservationvariable(observationVariableDbId: ID!, observationVariableName: String, observationVariablePUI: String, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, variableDbId: String, observations_IDs: [String], additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addStudies: [ID], removeStudies: [ID], addObservations: [ID], removeObservations: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): observationvariable!
  deleteObservationvariable(observationVariableDbId: ID!): String!
  addOntology(ontologyDbId: ID!, authors: String, copyright: String, description: String, documentationURL: String, licence: String, ontologyName: String, version: String, additionalInfo_ID: String, ontologyReference_ID: String, addAdditionalInfo: ID, addOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): ontology!
  updateOntology(ontologyDbId: ID!, authors: String, copyright: String, description: String, documentationURL: String, licence: String, ontologyName: String, version: String, additionalInfo_ID: String, ontologyReference_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, skipAssociationsExistenceChecks: Boolean = false): ontology!
  deleteOntology(ontologyDbId: ID!): String!
  addOntologyreference(ontologyReferenceDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, method_ID: String, observationVariable_ID: String, version: String, documentationLinks_IDs: [String], ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addMethod: ID, addObservationVariable: ID, addOntology: ID, addScale: ID, addTrait: ID, addDocumentationLinks: [ID], skipAssociationsExistenceChecks: Boolean = false): ontologyreference!
  updateOntologyreference(ontologyReferenceDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, method_ID: String, observationVariable_ID: String, version: String, documentationLinks_IDs: [String], ontology_ID: String, scale_ID: String, trait_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addMethod: ID, removeMethod: ID, addObservationVariable: ID, removeObservationVariable: ID, addOntology: ID, removeOntology: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addDocumentationLinks: [ID], removeDocumentationLinks: [ID], skipAssociationsExistenceChecks: Boolean = false): ontologyreference!
  deleteOntologyreference(ontologyReferenceDbId: ID!): String!
  addOntologyterm(ontologyTermDbId: ID!, term: String, termURI: String, reference_ID: String, referenceSet_ID: String, addReference: ID, addReferenceSet: ID, skipAssociationsExistenceChecks: Boolean = false): ontologyterm!
  updateOntologyterm(ontologyTermDbId: ID!, term: String, termURI: String, reference_ID: String, referenceSet_ID: String, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, skipAssociationsExistenceChecks: Boolean = false): ontologyterm!
  deleteOntologyterm(ontologyTermDbId: ID!): String!
  addPagination(paginationDbId: ID!, dimension: String, page: String, pageSize: String, totalCount: String, totalPages: String, alleleMatrix_ID: String, addAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): pagination!
  updatePagination(paginationDbId: ID!, dimension: String, page: String, pageSize: String, totalCount: String, totalPages: String, alleleMatrix_ID: String, addAlleleMatrix: ID, removeAlleleMatrix: ID, skipAssociationsExistenceChecks: Boolean = false): pagination!
  deletePagination(paginationDbId: ID!): String!
  addPedigreenode(pedigreeNodeDbId: ID!, crossingYear: String, defaultDisplayName: String, familyCode: String, pedigreeString: String, additionalInfo_ID: String, breedingMethod_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], germplasm_ID: String, parents_IDs: [String], progeny_IDs: [String], addAdditionalInfo: ID, addBreedingMethod: ID, addCrossingProject: ID, addGermplasm: ID, addExternalReferences: [ID], addParents: [ID], addProgeny: [ID], skipAssociationsExistenceChecks: Boolean = false): pedigreenode!
  updatePedigreenode(pedigreeNodeDbId: ID!, crossingYear: String, defaultDisplayName: String, familyCode: String, pedigreeString: String, additionalInfo_ID: String, breedingMethod_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], germplasm_ID: String, parents_IDs: [String], progeny_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addBreedingMethod: ID, removeBreedingMethod: ID, addCrossingProject: ID, removeCrossingProject: ID, addGermplasm: ID, removeGermplasm: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addParents: [ID], removeParents: [ID], addProgeny: [ID], removeProgeny: [ID], skipAssociationsExistenceChecks: Boolean = false): pedigreenode!
  deletePedigreenode(pedigreeNodeDbId: ID!): String!
  addPerson(personDbId: ID!, description: String, emailAddress: String, firstName: String, lastName: String, mailingAddress: String, middleName: String, phoneNumber: String, userID: String, additionalInfo_ID: String, externalReferences_IDs: [String], lists_IDs: [String], programs_IDs: [String], addAdditionalInfo: ID, addExternalReferences: [ID], addLists: [ID], addPrograms: [ID], skipAssociationsExistenceChecks: Boolean = false): person!
  updatePerson(personDbId: ID!, description: String, emailAddress: String, firstName: String, lastName: String, mailingAddress: String, middleName: String, phoneNumber: String, userID: String, additionalInfo_ID: String, externalReferences_IDs: [String], lists_IDs: [String], programs_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addLists: [ID], removeLists: [ID], addPrograms: [ID], removePrograms: [ID], skipAssociationsExistenceChecks: Boolean = false): person!
  deletePerson(personDbId: ID!): String!
  addPlannedcross(plannedCrossDbId: ID!, plannedCrossName: String, status: String, additionalInfo_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], crosses_IDs: [String], addAdditionalInfo: ID, addCrossingProject: ID, addExternalReferences: [ID], addCrosses: [ID], skipAssociationsExistenceChecks: Boolean = false): plannedcross!
  updatePlannedcross(plannedCrossDbId: ID!, plannedCrossName: String, status: String, additionalInfo_ID: String, crossingProject_ID: String, externalReferences_IDs: [String], crosses_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addCrossingProject: ID, removeCrossingProject: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addCrosses: [ID], removeCrosses: [ID], skipAssociationsExistenceChecks: Boolean = false): plannedcross!
  deletePlannedcross(plannedCrossDbId: ID!): String!
  addPlate(plateDbId: ID!, plateBarcode: String, plateFormat: String, plateName: String, sampleType: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, study_ID: String, trial_ID: String, samples_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addStudy: ID, addTrial: ID, addExternalReferences: [ID], addSamples: [ID], skipAssociationsExistenceChecks: Boolean = false): plate!
  updatePlate(plateDbId: ID!, plateBarcode: String, plateFormat: String, plateName: String, sampleType: String, additionalInfo_ID: String, externalReferences_IDs: [String], program_ID: String, study_ID: String, trial_ID: String, samples_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSamples: [ID], removeSamples: [ID], skipAssociationsExistenceChecks: Boolean = false): plate!
  deletePlate(plateDbId: ID!): String!
  addPollinationevent(pollinationEventDbId: ID!, pollinationNumber: String, pollinationSuccessful: String, pollinationTimeStamp: String, cross_ID: String, addCross: ID, skipAssociationsExistenceChecks: Boolean = false): pollinationevent!
  updatePollinationevent(pollinationEventDbId: ID!, pollinationNumber: String, pollinationSuccessful: String, pollinationTimeStamp: String, cross_ID: String, addCross: ID, removeCross: ID, skipAssociationsExistenceChecks: Boolean = false): pollinationevent!
  deletePollinationevent(pollinationEventDbId: ID!): String!
  addProgram(programDbId: ID!, abbreviation: String, commonCropName: String, documentationURL: String, fundingInformation: String, objective: String, programName: String, programType: String, additionalInfo_ID: String, externalReferences_IDs: [String], leadPerson_ID: String, trials_IDs: [String], plates_IDs: [String], samples_IDs: [String], crossingProjects_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addLeadPerson: ID, addExternalReferences: [ID], addTrials: [ID], addPlates: [ID], addSamples: [ID], addCrossingProjects: [ID], addSeedLots: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): program!
  updateProgram(programDbId: ID!, abbreviation: String, commonCropName: String, documentationURL: String, fundingInformation: String, objective: String, programName: String, programType: String, additionalInfo_ID: String, externalReferences_IDs: [String], leadPerson_ID: String, trials_IDs: [String], plates_IDs: [String], samples_IDs: [String], crossingProjects_IDs: [String], seedLots_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addLeadPerson: ID, removeLeadPerson: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addTrials: [ID], removeTrials: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addCrossingProjects: [ID], removeCrossingProjects: [ID], addSeedLots: [ID], removeSeedLots: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): program!
  deleteProgram(programDbId: ID!): String!
  addPublication(publicationDbId: ID!, publicationPUI: String, publicationReference: String, trial_ID: String, addTrial: ID, skipAssociationsExistenceChecks: Boolean = false): publication!
  updatePublication(publicationDbId: ID!, publicationPUI: String, publicationReference: String, trial_ID: String, addTrial: ID, removeTrial: ID, skipAssociationsExistenceChecks: Boolean = false): publication!
  deletePublication(publicationDbId: ID!): String!
  addReference(referenceDbId: ID!, commonCropName: String, isDerived: String, length: String, md5checksum: String, referenceName: String, sourceAccessions: String, sourceDivergence: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], referenceSet_ID: String, sourceGermplasm_IDs: [String], species_ID: String, variants_IDs: [String], addAdditionalInfo: ID, addReferenceSet: ID, addSpecies: ID, addExternalReferences: [ID], addSourceGermplasm: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): reference!
  updateReference(referenceDbId: ID!, commonCropName: String, isDerived: String, length: String, md5checksum: String, referenceName: String, sourceAccessions: String, sourceDivergence: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], referenceSet_ID: String, sourceGermplasm_IDs: [String], species_ID: String, variants_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addReferenceSet: ID, removeReferenceSet: ID, addSpecies: ID, removeSpecies: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSourceGermplasm: [ID], removeSourceGermplasm: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): reference!
  deleteReference(referenceDbId: ID!): String!
  addReferenceset(referenceSetDbId: ID!, assemblyPUI: String, commonCropName: String, description: String, isDerived: String, md5checksum: String, referenceSetName: String, sourceAccessions: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], sourceGermplasm_IDs: [String], species_ID: String, references_ID: String, variants_IDs: [String], variantSets_IDs: [String], addAdditionalInfo: ID, addSpecies: ID, addReferences: ID, addExternalReferences: [ID], addSourceGermplasm: [ID], addVariants: [ID], addVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): referenceset!
  updateReferenceset(referenceSetDbId: ID!, assemblyPUI: String, commonCropName: String, description: String, isDerived: String, md5checksum: String, referenceSetName: String, sourceAccessions: String, sourceURI: String, additionalInfo_ID: String, externalReferences_IDs: [String], sourceGermplasm_IDs: [String], species_ID: String, references_ID: String, variants_IDs: [String], variantSets_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addSpecies: ID, removeSpecies: ID, addReferences: ID, removeReferences: ID, addExternalReferences: [ID], removeExternalReferences: [ID], addSourceGermplasm: [ID], removeSourceGermplasm: [ID], addVariants: [ID], removeVariants: [ID], addVariantSets: [ID], removeVariantSets: [ID], skipAssociationsExistenceChecks: Boolean = false): referenceset!
  deleteReferenceset(referenceSetDbId: ID!): String!
  addSample(sampleDbId: ID!, column: String, row: String, sampleBarcode: String, sampleDescription: String, sampleGroupId: String, sampleName: String, samplePUI: String, sampleTimestamp: String, sampleType: String, takenBy: String, tissueType: String, well: String, additionalInfo_ID: String, callSets_IDs: [String], externalReferences_IDs: [String], germplasm_ID: String, observationUnit_ID: String, plate_ID: String, program_ID: String, study_ID: String, trial_ID: String, addAdditionalInfo: ID, addGermplasm: ID, addObservationUnit: ID, addPlate: ID, addProgram: ID, addStudy: ID, addTrial: ID, addCallSets: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): sample!
  updateSample(sampleDbId: ID!, column: String, row: String, sampleBarcode: String, sampleDescription: String, sampleGroupId: String, sampleName: String, samplePUI: String, sampleTimestamp: String, sampleType: String, takenBy: String, tissueType: String, well: String, additionalInfo_ID: String, callSets_IDs: [String], externalReferences_IDs: [String], germplasm_ID: String, observationUnit_ID: String, plate_ID: String, program_ID: String, study_ID: String, trial_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addGermplasm: ID, removeGermplasm: ID, addObservationUnit: ID, removeObservationUnit: ID, addPlate: ID, removePlate: ID, addProgram: ID, removeProgram: ID, addStudy: ID, removeStudy: ID, addTrial: ID, removeTrial: ID, addCallSets: [ID], removeCallSets: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): sample!
  deleteSample(sampleDbId: ID!): String!
  addScale(scaleDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, dataType: String, decimalPlaces: String, scaleName: String, scalePUI: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, validValues_ID: String, addAttribute: ID, addVariable: ID, addGermplasmAttribute: ID, addObservationVariable: ID, addAdditionalInfo: ID, addOntologyReference: ID, addValidValues: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): scale!
  updateScale(scaleDbId: ID!, attribute_ID: String, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, dataType: String, decimalPlaces: String, scaleName: String, scalePUI: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, validValues_ID: String, addAttribute: ID, removeAttribute: ID, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addObservationVariable: ID, removeObservationVariable: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addValidValues: ID, removeValidValues: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): scale!
  deleteScale(scaleDbId: ID!): String!
  addSeason(seasonDbId: ID!, seasonName: String, year: String, observation_IDs: [String], addObservation: [ID], skipAssociationsExistenceChecks: Boolean = false): season!
  updateSeason(seasonDbId: ID!, seasonName: String, year: String, observation_IDs: [String], addObservation: [ID], removeObservation: [ID], skipAssociationsExistenceChecks: Boolean = false): season!
  deleteSeason(seasonDbId: ID!): String!
  addSeedlot(seedLotDbId: ID!, amount: String, createdDate: String, lastUpdated: String, seedLotDescription: String, seedLotName: String, sourceCollection: String, storageLocation: String, units: String, additionalInfo_ID: String, contentMixture_IDs: [String], externalReferences_IDs: [String], location_ID: String, program_ID: String, fromSeedLotTransactions_IDs: [String], toSeedLotTransactions_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addLocation: ID, addProgram: ID, addContentMixture: [ID], addExternalReferences: [ID], addFromSeedLotTransactions: [ID], addToSeedLotTransactions: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): seedlot!
  updateSeedlot(seedLotDbId: ID!, amount: String, createdDate: String, lastUpdated: String, seedLotDescription: String, seedLotName: String, sourceCollection: String, storageLocation: String, units: String, additionalInfo_ID: String, contentMixture_IDs: [String], externalReferences_IDs: [String], location_ID: String, program_ID: String, fromSeedLotTransactions_IDs: [String], toSeedLotTransactions_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addLocation: ID, removeLocation: ID, addProgram: ID, removeProgram: ID, addContentMixture: [ID], removeContentMixture: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addFromSeedLotTransactions: [ID], removeFromSeedLotTransactions: [ID], addToSeedLotTransactions: [ID], removeToSeedLotTransactions: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): seedlot!
  deleteSeedlot(seedLotDbId: ID!): String!
  addSeedlottransaction(transactionDbId: ID!, amount: String, transactionDescription: String, transactionTimestamp: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], fromSeedLot_ID: String, toSeedLot_ID: String, addAdditionalInfo: ID, addFromSeedLot: ID, addToSeedLot: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): seedlottransaction!
  updateSeedlottransaction(transactionDbId: ID!, amount: String, transactionDescription: String, transactionTimestamp: String, units: String, additionalInfo_ID: String, externalReferences_IDs: [String], fromSeedLot_ID: String, toSeedLot_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addFromSeedLot: ID, removeFromSeedLot: ID, addToSeedLot: ID, removeToSeedLot: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): seedlottransaction!
  deleteSeedlottransaction(transactionDbId: ID!): String!
  addStoragetype(storageTypeDbId: ID!, code: String, description: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): storagetype!
  updateStoragetype(storageTypeDbId: ID!, code: String, description: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): storagetype!
  deleteStoragetype(storageTypeDbId: ID!): String!
  addStudy(studyDbId: ID!, active: String, commonCropName: String, culturalPractices: String, documentationURL: String, endDate: String, license: String, observationUnitsDescription: String, seasons: String, startDate: String, studyCode: String, studyDescription: String, studyName: String, studyPUI: String, studyType: String, additionalInfo_ID: String, environmentParameters_IDs: [String], experimentalDesign_ID: String, externalReferences_IDs: [String], growthFacility_ID: String, lastUpdate_ID: String, location_ID: String, observationLevels_IDs: [String], trial_ID: String, callSets_IDs: [String], plates_IDs: [String], samples_IDs: [String], variantSets_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addExperimentalDesign: ID, addGrowthFacility: ID, addLastUpdate: ID, addLocation: ID, addTrial: ID, addContacts: [ID], addEnvironmentParameters: [ID], addExternalReferences: [ID], addObservationLevels: [ID], addObservationVariables: [ID], addCallSets: [ID], addPlates: [ID], addSamples: [ID], addVariantSets: [ID], addEvents: [ID], addObservations: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): study!
  updateStudy(studyDbId: ID!, active: String, commonCropName: String, culturalPractices: String, documentationURL: String, endDate: String, license: String, observationUnitsDescription: String, seasons: String, startDate: String, studyCode: String, studyDescription: String, studyName: String, studyPUI: String, studyType: String, additionalInfo_ID: String, environmentParameters_IDs: [String], experimentalDesign_ID: String, externalReferences_IDs: [String], growthFacility_ID: String, lastUpdate_ID: String, location_ID: String, observationLevels_IDs: [String], trial_ID: String, callSets_IDs: [String], plates_IDs: [String], samples_IDs: [String], variantSets_IDs: [String], observations_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addExperimentalDesign: ID, removeExperimentalDesign: ID, addGrowthFacility: ID, removeGrowthFacility: ID, addLastUpdate: ID, removeLastUpdate: ID, addLocation: ID, removeLocation: ID, addTrial: ID, removeTrial: ID, addContacts: [ID], removeContacts: [ID], addEnvironmentParameters: [ID], removeEnvironmentParameters: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addObservationLevels: [ID], removeObservationLevels: [ID], addObservationVariables: [ID], removeObservationVariables: [ID], addCallSets: [ID], removeCallSets: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addVariantSets: [ID], removeVariantSets: [ID], addEvents: [ID], removeEvents: [ID], addObservations: [ID], removeObservations: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): study!
  deleteStudy(studyDbId: ID!): String!
  addSynonym(synonymDbId: ID!, synonym: String, type: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): synonym!
  updateSynonym(synonymDbId: ID!, synonym: String, type: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): synonym!
  deleteSynonym(synonymDbId: ID!): String!
  addTaxonid(taxonDbId: ID!, sourceName: String, germplasm_ID: String, addGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): taxonid!
  updateTaxonid(taxonDbId: ID!, sourceName: String, germplasm_ID: String, addGermplasm: ID, removeGermplasm: ID, skipAssociationsExistenceChecks: Boolean = false): taxonid!
  deleteTaxonid(taxonDbId: ID!): String!
  addTrait(traitDbId: ID!, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, alternativeAbbreviations: String, attribute: String, attributePUI: String, entity: String, entityPUI: String, mainAbbreviation: String, status: String, synonyms: String, traitClass: String, traitDescription: String, traitName: String, traitPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, addVariable: ID, addGermplasmAttribute: ID, addObservationVariable: ID, addAdditionalInfo: ID, addOntologyReference: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): trait!
  updateTrait(traitDbId: ID!, variable_ID: String, germplasmAttribute_ID: String, observationVariable_ID: String, alternativeAbbreviations: String, attribute: String, attributePUI: String, entity: String, entityPUI: String, mainAbbreviation: String, status: String, synonyms: String, traitClass: String, traitDescription: String, traitName: String, traitPUI: String, additionalInfo_ID: String, externalReferences_IDs: [String], ontologyReference_ID: String, addVariable: ID, removeVariable: ID, addGermplasmAttribute: ID, removeGermplasmAttribute: ID, addObservationVariable: ID, removeObservationVariable: ID, addAdditionalInfo: ID, removeAdditionalInfo: ID, addOntologyReference: ID, removeOntologyReference: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): trait!
  deleteTrait(traitDbId: ID!): String!
  addTreatment(treatmentDbId: ID!, factor: String, modality: String, observationUnit_ID: String, addObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): treatment!
  updateTreatment(treatmentDbId: ID!, factor: String, modality: String, observationUnit_ID: String, addObservationUnit: ID, removeObservationUnit: ID, skipAssociationsExistenceChecks: Boolean = false): treatment!
  deleteTreatment(treatmentDbId: ID!): String!
  addTrial(trialDbId: ID!, active: String, commonCropName: String, documentationURL: String, endDate: String, startDate: String, trialDescription: String, trialName: String, trialPUI: String, additionalInfo_ID: String, datasetAuthorships_IDs: [String], externalReferences_IDs: [String], program_ID: String, studies_IDs: [String], publications_IDs: [String], plates_IDs: [String], samples_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, addProgram: ID, addContacts: [ID], addDatasetAuthorships: [ID], addExternalReferences: [ID], addStudies: [ID], addPublications: [ID], addPlates: [ID], addSamples: [ID], addObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): trial!
  updateTrial(trialDbId: ID!, active: String, commonCropName: String, documentationURL: String, endDate: String, startDate: String, trialDescription: String, trialName: String, trialPUI: String, additionalInfo_ID: String, datasetAuthorships_IDs: [String], externalReferences_IDs: [String], program_ID: String, studies_IDs: [String], publications_IDs: [String], plates_IDs: [String], samples_IDs: [String], observationUnits_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addProgram: ID, removeProgram: ID, addContacts: [ID], removeContacts: [ID], addDatasetAuthorships: [ID], removeDatasetAuthorships: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addStudies: [ID], removeStudies: [ID], addPublications: [ID], removePublications: [ID], addPlates: [ID], removePlates: [ID], addSamples: [ID], removeSamples: [ID], addObservationUnits: [ID], removeObservationUnits: [ID], skipAssociationsExistenceChecks: Boolean = false): trial!
  deleteTrial(trialDbId: ID!): String!
  addValidvalues(validValuesDbId: ID!, maximumValue: String, minimumValue: String, categories_IDs: [String], scale_ID: String, addScale: ID, addCategories: [ID], skipAssociationsExistenceChecks: Boolean = false): validvalues!
  updateValidvalues(validValuesDbId: ID!, maximumValue: String, minimumValue: String, categories_IDs: [String], scale_ID: String, addScale: ID, removeScale: ID, addCategories: [ID], removeCategories: [ID], skipAssociationsExistenceChecks: Boolean = false): validvalues!
  deleteValidvalues(validValuesDbId: ID!): String!
  addValidvaluescategory(validValuesCategoryDbId: ID!, label: String, value: String, validValues_ID: String, addValidValues: ID, skipAssociationsExistenceChecks: Boolean = false): validvaluescategory!
  updateValidvaluescategory(validValuesCategoryDbId: ID!, label: String, value: String, validValues_ID: String, addValidValues: ID, removeValidValues: ID, skipAssociationsExistenceChecks: Boolean = false): validvaluescategory!
  deleteValidvaluescategory(validValuesCategoryDbId: ID!): String!
  addVariable(variableDbId: ID!, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, addMethod: ID, addOntologyReference: ID, addScale: ID, addTrait: ID, addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): variable!
  updateVariable(variableDbId: ID!, commonCropName: String, contextOfUse: String, defaultValue: String, documentationURL: String, growthStage: String, institution: String, language: String, scientist: String, status: String, submissionTimestamp: String, synonyms: String, additionalInfo_ID: String, externalReferences_IDs: [String], method_ID: String, ontologyReference_ID: String, scale_ID: String, trait_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addMethod: ID, removeMethod: ID, addOntologyReference: ID, removeOntologyReference: ID, addScale: ID, removeScale: ID, addTrait: ID, removeTrait: ID, addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): variable!
  deleteVariable(variableDbId: ID!): String!
  addVariant(variantDbId: ID!, analysis: String, ciend: String, cipos: String, created: String, end: String, filtersApplied: String, filtersFailed: String, filtersPassed: String, referenceBases: String, start: String, svlen: String, updated: String, variantNames: String, variantType: String, additionalInfo_ID: String, markerPositions_IDs: [String], calls_IDs: [String], externalReferences_IDs: [String], reference_ID: String, referenceSet_ID: String, variantSet_ID: String, addAdditionalInfo: ID, addReference: ID, addReferenceSet: ID, addVariantSet: ID, addMarkerPositions: [ID], addAlleleMatrices: [ID], addCalls: [ID], addExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): variant!
  updateVariant(variantDbId: ID!, analysis: String, ciend: String, cipos: String, created: String, end: String, filtersApplied: String, filtersFailed: String, filtersPassed: String, referenceBases: String, start: String, svlen: String, updated: String, variantNames: String, variantType: String, additionalInfo_ID: String, markerPositions_IDs: [String], calls_IDs: [String], externalReferences_IDs: [String], reference_ID: String, referenceSet_ID: String, variantSet_ID: String, addAdditionalInfo: ID, removeAdditionalInfo: ID, addReference: ID, removeReference: ID, addReferenceSet: ID, removeReferenceSet: ID, addVariantSet: ID, removeVariantSet: ID, addMarkerPositions: [ID], removeMarkerPositions: [ID], addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], skipAssociationsExistenceChecks: Boolean = false): variant!
  deleteVariant(variantDbId: ID!): String!
  addVariantset(variantSetDbId: ID!, callSetCount: String, variantCount: String, variantSetName: String, additionalInfo_ID: String, calls_IDs: [String], analysis_IDs: [String], externalReferences_IDs: [String], metadataFields_IDs: [String], referenceSet_ID: String, study_ID: String, variants_IDs: [String], addAdditionalInfo: ID, addReferenceSet: ID, addStudy: ID, addAlleleMatrices: [ID], addCalls: [ID], addCallSets: [ID], addAnalysis: [ID], addAvailableFormats: [ID], addExternalReferences: [ID], addMetadataFields: [ID], addVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): variantset!
  updateVariantset(variantSetDbId: ID!, callSetCount: String, variantCount: String, variantSetName: String, additionalInfo_ID: String, calls_IDs: [String], analysis_IDs: [String], externalReferences_IDs: [String], metadataFields_IDs: [String], referenceSet_ID: String, study_ID: String, variants_IDs: [String], addAdditionalInfo: ID, removeAdditionalInfo: ID, addReferenceSet: ID, removeReferenceSet: ID, addStudy: ID, removeStudy: ID, addAlleleMatrices: [ID], removeAlleleMatrices: [ID], addCalls: [ID], removeCalls: [ID], addCallSets: [ID], removeCallSets: [ID], addAnalysis: [ID], removeAnalysis: [ID], addAvailableFormats: [ID], removeAvailableFormats: [ID], addExternalReferences: [ID], removeExternalReferences: [ID], addMetadataFields: [ID], removeMetadataFields: [ID], addVariants: [ID], removeVariants: [ID], skipAssociationsExistenceChecks: Boolean = false): variantset!
  deleteVariantset(variantSetDbId: ID!): String!
}

type allelematrix {
  """@original-field"""
  alleleMatrixDbId: ID

  """
  @original-field
  Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
  """
  expandHomozygotes: String

  """
  @original-field
  The string used as a separator for phased allele calls.
  """
  sepPhased: String

  """
  @original-field
  The string used as a separator for unphased allele calls.
  """
  sepUnphased: String

  """
  @original-field
  The string used as a representation for missing data.
  """
  unknownString: String

  """@original-field"""
  callSets_IDs: [String]

  """@original-field"""
  dataMatrices_IDs: [String]

  """@original-field"""
  pagination_IDs: [String]

  """@original-field"""
  variantSets_IDs: [String]

  """@original-field"""
  variants_IDs: [String]

  """@search-request"""
  callSetsFilter(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationInput!): [callset]

  """@search-request"""
  callSetsConnection(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationCursorInput!): CallsetConnection

  """@count-request"""
  countFilteredCallSets(search: searchCallsetInput): Int

  """@search-request"""
  dataMatricesFilter(search: searchDatamatrixInput, order: [orderDatamatrixInput], pagination: paginationInput!): [datamatrix]

  """@search-request"""
  dataMatricesConnection(search: searchDatamatrixInput, order: [orderDatamatrixInput], pagination: paginationCursorInput!): DatamatrixConnection

  """@count-request"""
  countFilteredDataMatrices(search: searchDatamatrixInput): Int

  """@search-request"""
  paginationFilter(search: searchPaginationInput, order: [orderPaginationInput], pagination: paginationInput!): [pagination]

  """@search-request"""
  paginationConnection(search: searchPaginationInput, order: [orderPaginationInput], pagination: paginationCursorInput!): PaginationConnection

  """@count-request"""
  countFilteredPagination(search: searchPaginationInput): Int

  """@search-request"""
  variantSetsFilter(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationInput!): [variantset]

  """@search-request"""
  variantSetsConnection(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationCursorInput!): VariantsetConnection

  """@count-request"""
  countFilteredVariantSets(search: searchVariantsetInput): Int

  """@search-request"""
  variantsFilter(search: searchVariantInput, order: [orderVariantInput], pagination: paginationInput!): [variant]

  """@search-request"""
  variantsConnection(search: searchVariantInput, order: [orderVariantInput], pagination: paginationCursorInput!): VariantConnection

  """@count-request"""
  countFilteredVariants(search: searchVariantInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type AllelematrixConnection {
  edges: [AllelematrixEdge]
  allelematrices: [allelematrix]
  pageInfo: pageInfo!
}

type AllelematrixEdge {
  cursor: String!
  node: allelematrix!
}

enum allelematrixField {
  alleleMatrixDbId
  expandHomozygotes
  sepPhased
  sepUnphased
  unknownString
  callSets_IDs
  dataMatrices_IDs
  pagination_IDs
  variantSets_IDs
  variants_IDs
}

input searchAllelematrixInput {
  field: allelematrixField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchAllelematrixInput]
}

input orderAllelematrixInput {
  field: allelematrixField
  order: Order
}

type analysis {
  """@original-field"""
  analysisDbId: ID

  """
  @original-field
  A human readable name for this analysis
  """
  analysisName: String

  """
  @original-field
  The time at which this record was created, in ISO 8601 format.
  """
  created: String

  """
  @original-field
  A human readable description of the analysis
  """
  description: String

  """
  @original-field
  The software run to generate this analysis.
  """
  software: String

  """
  @original-field
  The type of analysis.
  """
  type: String

  """
  @original-field
  The time at which this record was last updated, in ISO 8601 format.
  """
  updated: String

  """@original-field"""
  variantSet_ID: String
  variantSet(search: searchVariantsetInput): variantset

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type AnalysisConnection {
  edges: [AnalysisEdge]
  analyses: [analysis]
  pageInfo: pageInfo!
}

type AnalysisEdge {
  cursor: String!
  node: analysis!
}

enum analysisField {
  analysisDbId
  analysisName
  created
  description
  software
  type
  updated
  variantSet_ID
}

input searchAnalysisInput {
  field: analysisField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchAnalysisInput]
}

input orderAnalysisInput {
  field: analysisField
  order: Order
}

type attribute {
  """@original-field"""
  attributeDbId: ID

  """
  @original-field
  General category for the attribute. very similar to Trait class.
  """
  attributeCategory: String

  """
  @original-field
  A human readable name for this attribute
  """
  attributeName: String

  """
  @original-field
  The Permanent Unique Identifier of an Attribute, usually in the form of a URI
  """
  attributePUI: String

  """
  @original-field
  A human readable description of this attribute
  """
  attributeDescription: String

  """
  @original-field
  Crop name (examples: &#34;Maize&#34;, &#34;Wheat&#34;)
  """
  commonCropName: String

  """
  @original-field
  Indication of how trait is routinely used. (examples: [&#34;Trial evaluation&#34;, &#34;Nursery evaluation&#34;])
  """
  contextOfUse: String

  """
  @original-field
  Variable default value. (examples: &#34;red&#34;, &#34;2.3&#34;, etc.)
  """
  defaultValue: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Growth stage at which measurement is made (examples: &#34;flowering&#34;)
  """
  growthStage: String

  """
  @original-field
  Name of institution submitting the variable
  """
  institution: String

  """
  @original-field
  2 letter ISO 639-1 code for the language of submission of the variable.
  """
  language: String

  """
  @original-field
  Name of scientist submitting the variable.
  """
  scientist: String

  """
  @original-field
  Variable status. (examples: &#34;recommended&#34;, &#34;obsolete&#34;, &#34;legacy&#34;, etc.)
  """
  status: String

  """
  @original-field
  Timestamp when the Variable was added (ISO 8601)
  """
  submissionTimestamp: String

  """
  @original-field
  Other variable names
  """
  synonyms: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  method_ID: String

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  method(search: searchMethodInput): method
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  scale(search: searchScaleInput): scale

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type AttributeConnection {
  edges: [AttributeEdge]
  attributes: [attribute]
  pageInfo: pageInfo!
}

type AttributeEdge {
  cursor: String!
  node: attribute!
}

enum attributeField {
  attributeDbId
  attributeCategory
  attributeName
  attributePUI
  attributeDescription
  commonCropName
  contextOfUse
  defaultValue
  documentationURL
  growthStage
  institution
  language
  scientist
  status
  submissionTimestamp
  synonyms
  additionalInfo_ID
  externalReferences_IDs
  method_ID
  ontologyReference_ID
  scale_ID
  trait_ID
}

input searchAttributeInput {
  field: attributeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchAttributeInput]
}

input orderAttributeInput {
  field: attributeField
  order: Order
}

type availableformat {
  """@original-field"""
  availableFormatDbId: ID

  """
  @original-field
  dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)
  """
  dataFormat: String

  """
  @original-field
  Should homozygotes be expanded (true) or collapsed into a single occurrence (false)
  """
  expandHomozygotes: String

  """
  @original-field
  fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.
  """
  fileFormat: String

  """
  @original-field
  A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.
  """
  fileURL: String

  """
  @original-field
  The string used as a separator for phased allele calls.
  """
  sepPhased: String

  """
  @original-field
  The string used as a separator for unphased allele calls.
  """
  sepUnphased: String

  """
  @original-field
  The string used as a representation for missing data.
  """
  unknownString: String

  """@original-field"""
  variantSet_ID: String
  variantSet(search: searchVariantsetInput): variantset

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type AvailableformatConnection {
  edges: [AvailableformatEdge]
  availableformats: [availableformat]
  pageInfo: pageInfo!
}

type AvailableformatEdge {
  cursor: String!
  node: availableformat!
}

enum availableformatField {
  availableFormatDbId
  dataFormat
  expandHomozygotes
  fileFormat
  fileURL
  sepPhased
  sepUnphased
  unknownString
  variantSet_ID
}

input searchAvailableformatInput {
  field: availableformatField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchAvailableformatInput]
}

input orderAvailableformatInput {
  field: availableformatField
  order: Order
}

type breedingmethod {
  """@original-field"""
  breedingMethodDbId: ID

  """
  @original-field
  A shortened version of the human readable name for a Breeding Method
  """
  abbreviation: String

  """
  @original-field
  the human readable identifier for this breeding method
  """
  breedingMethodName: String

  """
  @original-field
  human readable description of the breeding method
  """
  description: String

  """@original-field"""
  germplasm_IDs: [String]

  """@original-field"""
  pedigreeNodes_IDs: [String]

  """@search-request"""
  germplasmFilter(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationInput!): [germplasm]

  """@search-request"""
  germplasmConnection(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationCursorInput!): GermplasmConnection

  """@count-request"""
  countFilteredGermplasm(search: searchGermplasmInput): Int

  """@search-request"""
  pedigreeNodesFilter(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]

  """@search-request"""
  pedigreeNodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection

  """@count-request"""
  countFilteredPedigreeNodes(search: searchPedigreenodeInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type BreedingmethodConnection {
  edges: [BreedingmethodEdge]
  breedingmethods: [breedingmethod]
  pageInfo: pageInfo!
}

type BreedingmethodEdge {
  cursor: String!
  node: breedingmethod!
}

enum breedingmethodField {
  breedingMethodDbId
  abbreviation
  breedingMethodName
  description
  germplasm_IDs
  pedigreeNodes_IDs
}

input searchBreedingmethodInput {
  field: breedingmethodField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchBreedingmethodInput]
}

input orderBreedingmethodInput {
  field: breedingmethodField
  order: Order
}

type call {
  """@original-field"""
  callDbId: ID

  """
  @original-field
  The value of this genotype call
  """
  genotypeValue: String

  """
      @original-field
      If this field is populated, this variant call&#39;s genotype ordering implies the phase of the bases and 
  is consistent with any other variant calls on the same contig which have the same phase set string.
  """
  phaseSet: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  callSet_ID: String

  """@original-field"""
  genotypeMetadata_IDs: [String]

  """@original-field"""
  variant_ID: String

  """@original-field"""
  variantSet_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  callSet(search: searchCallsetInput): callset
  variant(search: searchVariantInput): variant
  variantSet(search: searchVariantsetInput): variantset

  """@search-request"""
  genotypeMetadataFilter(search: searchGenotypemetadataInput, order: [orderGenotypemetadataInput], pagination: paginationInput!): [genotypemetadata]

  """@search-request"""
  genotypeMetadataConnection(search: searchGenotypemetadataInput, order: [orderGenotypemetadataInput], pagination: paginationCursorInput!): GenotypemetadataConnection

  """@count-request"""
  countFilteredGenotypeMetadata(search: searchGenotypemetadataInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CallConnection {
  edges: [CallEdge]
  calls: [call]
  pageInfo: pageInfo!
}

type CallEdge {
  cursor: String!
  node: call!
}

enum callField {
  callDbId
  genotypeValue
  phaseSet
  additionalInfo_ID
  callSet_ID
  genotypeMetadata_IDs
  variant_ID
  variantSet_ID
}

input searchCallInput {
  field: callField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCallInput]
}

input orderCallInput {
  field: callField
  order: Order
}

type callset {
  """@original-field"""
  callSetDbId: ID

  """
  @original-field
  The human readable name which identifies a germplasm within the given database server
  """
  callSetName: String

  """
  @original-field
  The date this call set was created
  """
  created: String

  """
  @original-field
  The time at which this call set was last updated
  """
  updated: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  alleleMatrices_IDs: [String]

  """@original-field"""
  calls_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  sample_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  variantSets_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  sample(search: searchSampleInput): sample
  study(search: searchStudyInput): study

  """@search-request"""
  alleleMatricesFilter(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationInput!): [allelematrix]

  """@search-request"""
  alleleMatricesConnection(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationCursorInput!): AllelematrixConnection

  """@count-request"""
  countFilteredAlleleMatrices(search: searchAllelematrixInput): Int

  """@search-request"""
  callsFilter(search: searchCallInput, order: [orderCallInput], pagination: paginationInput!): [call]

  """@search-request"""
  callsConnection(search: searchCallInput, order: [orderCallInput], pagination: paginationCursorInput!): CallConnection

  """@count-request"""
  countFilteredCalls(search: searchCallInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  variantSetsFilter(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationInput!): [variantset]

  """@search-request"""
  variantSetsConnection(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationCursorInput!): VariantsetConnection

  """@count-request"""
  countFilteredVariantSets(search: searchVariantsetInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CallsetConnection {
  edges: [CallsetEdge]
  callsets: [callset]
  pageInfo: pageInfo!
}

type CallsetEdge {
  cursor: String!
  node: callset!
}

enum callsetField {
  callSetDbId
  callSetName
  created
  updated
  additionalInfo_ID
  alleleMatrices_IDs
  calls_IDs
  externalReferences_IDs
  sample_ID
  study_ID
  variantSets_IDs
}

input searchCallsetInput {
  field: callsetField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCallsetInput]
}

input orderCallsetInput {
  field: callsetField
  order: Order
}

enum InputType {
  Array
  String
  Int
  Float
  Boolean
  Date
  Time
  DateTime
}

enum GenericPrestoSqlOperator {
  like
  notLike
  iLike
  notILike
  regexp
  notRegexp
  iRegexp
  notIRegexp
  eq
  gt
  gte
  lt
  lte
  ne
  between
  notBetween
  in
  notIn
  contains
  notContains
  or
  and
  not
}

enum MongodbNeo4jOperator {
  like
  notLike
  iLike
  notILike
  regexp
  notRegexp
  iRegexp
  notIRegexp
  eq
  gt
  gte
  lt
  lte
  ne
  in
  notIn
  contains
  notContains
  or
  and
  not
}

enum CassandraOperator {
  eq
  gt
  gte
  lt
  lte
  ne
  in
  contains
  and
}

enum AmazonS3Operator {
  like
  notLike
  iLike
  notILike
  eq
  gt
  gte
  lt
  lte
  ne
  between
  notBetween
  in
  notIn
  contains
  notContains
  or
  and
  not
}

enum Order {
  DESC
  ASC
}

input paginationInput {
  limit: Int!
  offset: Int
}

input paginationCursorInput {
  first: Int
  last: Int
  after: String
  before: String
  includeCursor: Boolean
}

type pageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

scalar GraphQLJSONObject

type contact {
  """@original-field"""
  contactDbId: ID

  """
      @original-field
      The contacts email address
  
  MIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.
  """
  email: String

  """
      @original-field
      The name of the institution which this contact is part of
  
  MIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to
  """
  instituteName: String

  """
      @original-field
      The full name of this contact person
  
  MIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)
  """
  name: String

  """
      @original-field
      The Open Researcher and Contributor ID for this contact person (orcid.org)
  
  MIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.
  """
  orcid: String

  """
      @original-field
      The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)
  
  MIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation
  """
  type: String

  """@original-field"""
  study_IDs: [String]

  """@original-field"""
  trial_IDs: [String]

  """@search-request"""
  studyFilter(search: searchStudyInput, order: [orderStudyInput], pagination: paginationInput!): [study]

  """@search-request"""
  studyConnection(search: searchStudyInput, order: [orderStudyInput], pagination: paginationCursorInput!): StudyConnection

  """@count-request"""
  countFilteredStudy(search: searchStudyInput): Int

  """@search-request"""
  trialFilter(search: searchTrialInput, order: [orderTrialInput], pagination: paginationInput!): [trial]

  """@search-request"""
  trialConnection(search: searchTrialInput, order: [orderTrialInput], pagination: paginationCursorInput!): TrialConnection

  """@count-request"""
  countFilteredTrial(search: searchTrialInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ContactConnection {
  edges: [ContactEdge]
  contacts: [contact]
  pageInfo: pageInfo!
}

type ContactEdge {
  cursor: String!
  node: contact!
}

enum contactField {
  contactDbId
  email
  instituteName
  name
  orcid
  type
  study_IDs
  trial_IDs
}

input searchContactInput {
  field: contactField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchContactInput]
}

input orderContactInput {
  field: contactField
  order: Order
}

type contentmixture {
  """@original-field"""
  contentMixtureDbId: ID

  """
  @original-field
  The percentage of the given germplasm in the seed lot mixture.
  """
  mixturePercentage: String

  """@original-field"""
  cross_ID: String

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  seedLot_ID: String
  cross(search: searchCrossInput): cross
  germplasm(search: searchGermplasmInput): germplasm
  seedLot(search: searchSeedlotInput): seedlot

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ContentmixtureConnection {
  edges: [ContentmixtureEdge]
  contentmixtures: [contentmixture]
  pageInfo: pageInfo!
}

type ContentmixtureEdge {
  cursor: String!
  node: contentmixture!
}

enum contentmixtureField {
  contentMixtureDbId
  mixturePercentage
  cross_ID
  germplasm_ID
  seedLot_ID
}

input searchContentmixtureInput {
  field: contentmixtureField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchContentmixtureInput]
}

input orderContentmixtureInput {
  field: contentmixtureField
  order: Order
}

type cross {
  """@original-field"""
  crossDbId: ID

  """
  @original-field
  the human readable name for a cross
  """
  crossName: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  crossAttributes_IDs: [String]

  """@original-field"""
  crossingProject_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  plannedCross_ID: String

  """@original-field"""
  pollinationEvents_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]

  """@original-field"""
  contentMixture_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  crossingProject(search: searchCrossingprojectInput): crossingproject
  plannedCross(search: searchPlannedcrossInput): plannedcross

  """@search-request"""
  crossAttributesFilter(search: searchCrossattributeInput, order: [orderCrossattributeInput], pagination: paginationInput!): [crossattribute]

  """@search-request"""
  crossAttributesConnection(search: searchCrossattributeInput, order: [orderCrossattributeInput], pagination: paginationCursorInput!): CrossattributeConnection

  """@count-request"""
  countFilteredCrossAttributes(search: searchCrossattributeInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  pollinationEventsFilter(search: searchPollinationeventInput, order: [orderPollinationeventInput], pagination: paginationInput!): [pollinationevent]

  """@search-request"""
  pollinationEventsConnection(search: searchPollinationeventInput, order: [orderPollinationeventInput], pagination: paginationCursorInput!): PollinationeventConnection

  """@count-request"""
  countFilteredPollinationEvents(search: searchPollinationeventInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@search-request"""
  contentMixtureFilter(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationInput!): [contentmixture]

  """@search-request"""
  contentMixtureConnection(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationCursorInput!): ContentmixtureConnection

  """@count-request"""
  countFilteredContentMixture(search: searchContentmixtureInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CrossConnection {
  edges: [CrossEdge]
  crosses: [cross]
  pageInfo: pageInfo!
}

type CrossEdge {
  cursor: String!
  node: cross!
}

enum crossField {
  crossDbId
  crossName
  additionalInfo_ID
  crossAttributes_IDs
  crossingProject_ID
  externalReferences_IDs
  plannedCross_ID
  pollinationEvents_IDs
  observationUnits_IDs
  contentMixture_IDs
}

input searchCrossInput {
  field: crossField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCrossInput]
}

input orderCrossInput {
  field: crossField
  order: Order
}

type crossattribute {
  """@original-field"""
  crossAttributeDbId: ID

  """
  @original-field
  the human readable name of a cross attribute
  """
  crossAttributeName: String

  """
  @original-field
  the value of a cross attribute
  """
  crossAttributeValue: String

  """@original-field"""
  cross_ID: String
  cross(search: searchCrossInput): cross

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CrossattributeConnection {
  edges: [CrossattributeEdge]
  crossattributes: [crossattribute]
  pageInfo: pageInfo!
}

type CrossattributeEdge {
  cursor: String!
  node: crossattribute!
}

enum crossattributeField {
  crossAttributeDbId
  crossAttributeName
  crossAttributeValue
  cross_ID
}

input searchCrossattributeInput {
  field: crossattributeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCrossattributeInput]
}

input orderCrossattributeInput {
  field: crossattributeField
  order: Order
}

type crossingproject {
  """@original-field"""
  crossingProjectDbId: ID

  """
  @original-field
  the common name of a crop (for multi-crop systems)
  """
  commonCropName: String

  """
  @original-field
  the description for a crossing project
  """
  crossingProjectDescription: String

  """
  @original-field
  The human readable name for a crossing project
  """
  crossingProjectName: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  program_ID: String

  """@original-field"""
  crosses_IDs: [String]

  """@original-field"""
  plannedCrosses_IDs: [String]

  """@original-field"""
  pedigreeNodes_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  program(search: searchProgramInput): program

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  crossesFilter(search: searchCrossInput, order: [orderCrossInput], pagination: paginationInput!): [cross]

  """@search-request"""
  crossesConnection(search: searchCrossInput, order: [orderCrossInput], pagination: paginationCursorInput!): CrossConnection

  """@count-request"""
  countFilteredCrosses(search: searchCrossInput): Int

  """@search-request"""
  plannedCrossesFilter(search: searchPlannedcrossInput, order: [orderPlannedcrossInput], pagination: paginationInput!): [plannedcross]

  """@search-request"""
  plannedCrossesConnection(search: searchPlannedcrossInput, order: [orderPlannedcrossInput], pagination: paginationCursorInput!): PlannedcrossConnection

  """@count-request"""
  countFilteredPlannedCrosses(search: searchPlannedcrossInput): Int

  """@search-request"""
  pedigreeNodesFilter(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]

  """@search-request"""
  pedigreeNodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection

  """@count-request"""
  countFilteredPedigreeNodes(search: searchPedigreenodeInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CrossingprojectConnection {
  edges: [CrossingprojectEdge]
  crossingprojects: [crossingproject]
  pageInfo: pageInfo!
}

type CrossingprojectEdge {
  cursor: String!
  node: crossingproject!
}

enum crossingprojectField {
  crossingProjectDbId
  commonCropName
  crossingProjectDescription
  crossingProjectName
  additionalInfo_ID
  externalReferences_IDs
  program_ID
  crosses_IDs
  plannedCrosses_IDs
  pedigreeNodes_IDs
}

input searchCrossingprojectInput {
  field: crossingprojectField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCrossingprojectInput]
}

input orderCrossingprojectInput {
  field: crossingprojectField
  order: Order
}

type crossparent {
  """@original-field"""
  crossParentDbId: ID

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  observationUnit_ID: String
  germplasm(search: searchGermplasmInput): germplasm
  observationUnit(search: searchObservationunitInput): observationunit

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type CrossparentConnection {
  edges: [CrossparentEdge]
  crossparents: [crossparent]
  pageInfo: pageInfo!
}

type CrossparentEdge {
  cursor: String!
  node: crossparent!
}

enum crossparentField {
  crossParentDbId
  germplasm_ID
  observationUnit_ID
}

input searchCrossparentInput {
  field: crossparentField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchCrossparentInput]
}

input orderCrossparentInput {
  field: crossparentField
  order: Order
}

type datalink {
  """@original-field"""
  dataLinkDbId: ID

  """
      @original-field
      The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  dataFormat: String

  """
      @original-field
      The general description of this data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  description: String

  """
      @original-field
      The MIME type of the file (ie text/csv, application/excel, application/zip).
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  fileFormat: String

  """
      @original-field
      The name of the external data link
  
  MIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.
  """
  name: String

  """
  @original-field
  The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.
  """
  provenance: String

  """
  @original-field
  The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc
  """
  scientificType: String

  """
      @original-field
      URL describing the location of this data file to view or download
  
  MIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.
  """
  url: String

  """
      @original-field
      The version number for this data 
  
  MIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).
  """
  version: String

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type DatalinkConnection {
  edges: [DatalinkEdge]
  datalinks: [datalink]
  pageInfo: pageInfo!
}

type DatalinkEdge {
  cursor: String!
  node: datalink!
}

enum datalinkField {
  dataLinkDbId
  dataFormat
  description
  fileFormat
  name
  provenance
  scientificType
  url
  version
}

input searchDatalinkInput {
  field: datalinkField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchDatalinkInput]
}

input orderDatalinkInput {
  field: datalinkField
  order: Order
}

type datamatrix {
  """@original-field"""
  dataMatrixDbId: ID

  """
  @original-field
  The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the &#34;callSetDbIds&#34; as columns and the &#34;variantDbIds&#34; as rows.
  """
  dataMatrix: String

  """
      @original-field
      The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word &#34;GT&#34; is reserved for the allele matrix. Examples of other metadata matrices include: &#34;GQ&#34;, &#34;RD&#34;, and &#34;HQ&#34;
  &lt;br&gt; This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixAbbreviation: String

  """
      @original-field
      The name of the field represented in this data matrix. The key word &#34;Genotype&#34; is reserved for the allele matrix. Examples of other metadata matrices include: &#34;Genotype Quality&#34;, &#34;Read Depth&#34;, and &#34;Haplotype Quality&#34;
  &lt;br&gt; This maps to a FORMAT field in the VCF file standard.
  """
  dataMatrixName: String

  """
  @original-field
  The type of field represented in this data matrix. This is intended to help parse the data out of JSON.
  """
  dataType: String

  """@original-field"""
  alleleMatrix_ID: String
  alleleMatrix(search: searchAllelematrixInput): allelematrix

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type DatamatrixConnection {
  edges: [DatamatrixEdge]
  datamatrices: [datamatrix]
  pageInfo: pageInfo!
}

type DatamatrixEdge {
  cursor: String!
  node: datamatrix!
}

enum datamatrixField {
  dataMatrixDbId
  dataMatrix
  dataMatrixAbbreviation
  dataMatrixName
  dataType
  alleleMatrix_ID
}

input searchDatamatrixInput {
  field: datamatrixField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchDatamatrixInput]
}

input orderDatamatrixInput {
  field: datamatrixField
  order: Order
}

type datasetauthorships {
  """@original-field"""
  datasetAuthorshipsDbId: ID

  """
  @original-field
  The DOI or other permanent unique identifier for this published dataset
  """
  datasetPUI: String

  """
  @original-field
  MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.
  """
  license: String

  """
  @original-field
  MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.
  """
  publicReleaseDate: String

  """
  @original-field
  MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.
  """
  submissionDate: String

  """@original-field"""
  trial_ID: String
  trial(search: searchTrialInput): trial

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type DatasetauthorshipsConnection {
  edges: [DatasetauthorshipsEdge]
  datasetauthorships: [datasetauthorships]
  pageInfo: pageInfo!
}

type DatasetauthorshipsEdge {
  cursor: String!
  node: datasetauthorships!
}

enum datasetauthorshipsField {
  datasetAuthorshipsDbId
  datasetPUI
  license
  publicReleaseDate
  submissionDate
  trial_ID
}

input searchDatasetauthorshipsInput {
  field: datasetauthorshipsField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchDatasetauthorshipsInput]
}

input orderDatasetauthorshipsInput {
  field: datasetauthorshipsField
  order: Order
}

type documentationlink {
  """@original-field"""
  documentationLinkDbId: ID

  """@original-field"""
  URL: String

  """@original-field"""
  type: String

  """@original-field"""
  ontologyReference_ID: String
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type DocumentationlinkConnection {
  edges: [DocumentationlinkEdge]
  documentationlinks: [documentationlink]
  pageInfo: pageInfo!
}

type DocumentationlinkEdge {
  cursor: String!
  node: documentationlink!
}

enum documentationlinkField {
  documentationLinkDbId
  URL
  type
  ontologyReference_ID
}

input searchDocumentationlinkInput {
  field: documentationlinkField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchDocumentationlinkInput]
}

input orderDocumentationlinkInput {
  field: documentationlinkField
  order: Order
}

type donor {
  """@original-field"""
  donorDbId: ID

  """
      @original-field
      The accession number assigned by the donor
  
  MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.
  """
  donorAccessionNumber: String

  """
      @original-field
      The institute code for the donor institute
  &lt;br/&gt;MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.
  """
  donorInstituteCode: String

  """@original-field"""
  germplasm_ID: String
  germplasm(search: searchGermplasmInput): germplasm

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type DonorConnection {
  edges: [DonorEdge]
  donors: [donor]
  pageInfo: pageInfo!
}

type DonorEdge {
  cursor: String!
  node: donor!
}

enum donorField {
  donorDbId
  donorAccessionNumber
  donorInstituteCode
  germplasm_ID
}

input searchDonorInput {
  field: donorField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchDonorInput]
}

input orderDonorInput {
  field: donorField
  order: Order
}

type environmentparameters {
  """@original-field"""
  environmentParametersDbId: ID

  """
  @original-field
  Human-readable value of the environment parameter (defined above) constant within the experiment
  """
  description: String

  """
      @original-field
      Name of the environment parameter constant within the experiment
  
  MIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. 
  """
  parameterName: String

  """
  @original-field
  URI pointing to an ontology class for the parameter
  """
  parameterPUI: String

  """
  @original-field
  Unit of the value for this parameter
  """
  unit: String

  """
  @original-field
  URI pointing to an ontology class for the unit
  """
  unitPUI: String

  """
      @original-field
      Numerical or categorical value
  
  MIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.
  """
  value: String

  """
  @original-field
  URI pointing to an ontology class for the parameter value
  """
  valuePUI: String

  """@original-field"""
  study_ID: String
  study(search: searchStudyInput): study

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type EnvironmentparametersConnection {
  edges: [EnvironmentparametersEdge]
  environmentparameters: [environmentparameters]
  pageInfo: pageInfo!
}

type EnvironmentparametersEdge {
  cursor: String!
  node: environmentparameters!
}

enum environmentparametersField {
  environmentParametersDbId
  description
  parameterName
  parameterPUI
  unit
  unitPUI
  value
  valuePUI
  study_ID
}

input searchEnvironmentparametersInput {
  field: environmentparametersField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchEnvironmentparametersInput]
}

input orderEnvironmentparametersInput {
  field: environmentparametersField
  order: Order
}

type event {
  """@original-field"""
  eventDbId: ID

  """
      @original-field
      A detailed, human-readable description of this event
  &lt;br/&gt;MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. 
  """
  eventDescription: String

  """
      @original-field
      An identifier for this event type, in the form of an ontology class reference
  &lt;br/&gt;ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  &lt;br/&gt;MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventType: String

  """
      @original-field
      An identifier for this event type, in the form of an ontology class reference
  &lt;br/&gt;ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other
  &lt;br/&gt;MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).
  """
  eventTypeDbId: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  eventDateRange_IDs: [String]

  """@original-field"""
  eventParameters_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]

  """@original-field"""
  study_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  study(search: searchStudyInput): study

  """@search-request"""
  eventDateRangeFilter(search: searchEventdaterangeInput, order: [orderEventdaterangeInput], pagination: paginationInput!): [eventdaterange]

  """@search-request"""
  eventDateRangeConnection(search: searchEventdaterangeInput, order: [orderEventdaterangeInput], pagination: paginationCursorInput!): EventdaterangeConnection

  """@count-request"""
  countFilteredEventDateRange(search: searchEventdaterangeInput): Int

  """@search-request"""
  eventParametersFilter(search: searchEventparameterInput, order: [orderEventparameterInput], pagination: paginationInput!): [eventparameter]

  """@search-request"""
  eventParametersConnection(search: searchEventparameterInput, order: [orderEventparameterInput], pagination: paginationCursorInput!): EventparameterConnection

  """@count-request"""
  countFilteredEventParameters(search: searchEventparameterInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type EventConnection {
  edges: [EventEdge]
  events: [event]
  pageInfo: pageInfo!
}

type EventEdge {
  cursor: String!
  node: event!
}

enum eventField {
  eventDbId
  eventDescription
  eventType
  eventTypeDbId
  additionalInfo_ID
  eventDateRange_IDs
  eventParameters_IDs
  observationUnits_IDs
  study_ID
}

input searchEventInput {
  field: eventField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchEventInput]
}

input orderEventInput {
  field: eventField
  order: Order
}

type eventdaterange {
  """@original-field"""
  eventDateRangeDbId: ID

  """
      @original-field
      A list of dates when the event occurred
  &lt;br/&gt;MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  discreteDates: String

  """
      @original-field
      The end of a continuous or regularly repetitive event
  &lt;br/&gt;MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  endDate: String

  """
      @original-field
      The beginning of a continuous or regularly repetitive event
  &lt;br/&gt;MIAPPE V1.1 (DM-68) Event date - Date and time of the event.
  """
  startDate: String

  """@original-field"""
  event_ID: String
  event(search: searchEventInput): event

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type EventdaterangeConnection {
  edges: [EventdaterangeEdge]
  eventdateranges: [eventdaterange]
  pageInfo: pageInfo!
}

type EventdaterangeEdge {
  cursor: String!
  node: eventdaterange!
}

enum eventdaterangeField {
  eventDateRangeDbId
  discreteDates
  endDate
  startDate
  event_ID
}

input searchEventdaterangeInput {
  field: eventdaterangeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchEventdaterangeInput]
}

input orderEventdaterangeInput {
  field: eventdaterangeField
  order: Order
}

type eventparameter {
  """@original-field"""
  eventParameterDbId: ID

  """
      @original-field
      The shortened code name of an event parameter
  &lt;br&gt;ICASA &#34;Code_Display&#34;
  """
  code: String

  """
  @original-field
  A human readable description of this event parameter. This description is usually associated with the &#39;name&#39; and &#39;code&#39; of an event parameter.
  """
  description: String

  """
      @original-field
      The full name of an event parameter
  &lt;br&gt;ICASA &#34;Variable_Name&#34;
  """
  name: String

  """
      @original-field
      The units or data type of the &#39;value&#39;. 
  &lt;br&gt;If the &#39;value&#39; comes from a standardized vocabulary or an encoded list of values, then &#39;unit&#39; should be &#39;code&#39;. 
  &lt;br&gt;If the &#39;value&#39; IS NOT a number, then &#39;unit&#39; should specify a data type eg. &#39;text&#39;, &#39;boolean&#39;, &#39;date&#39;, etc. 
  &lt;br&gt;If the value IS a number, then &#39;unit&#39; should specify the units used eg. &#39;ml&#39;, &#39;cm&#39;, etc
  &lt;br&gt;ICASA &#34;Unit_or_type&#34;
  """
  units: String

  """
  @original-field
  The single value of this event parameter. This single value is accurate for all the dates in the date range. If &#39;value&#39; is populated then &#39;valuesByDate&#39; should NOT be populated.
  """
  value: String

  """
  @original-field
  If the event parameter &#39;unit&#39; field is &#39;code&#39;, then use &#39;valueDescription&#39; to add a human readable description to the value.
  """
  valueDescription: String

  """
  @original-field
  An array of values corresponding to each timestamp in the &#39;discreteDates&#39; array of this event. The &#39;valuesByDate&#39; array should exactly match the size of the &#39;discreteDates&#39; array. If &#39;valuesByDate&#39; is populated then &#39;value&#39; should NOT be populated.
  """
  valuesByDate: String

  """@original-field"""
  event_ID: String
  event(search: searchEventInput): event

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type EventparameterConnection {
  edges: [EventparameterEdge]
  eventparameters: [eventparameter]
  pageInfo: pageInfo!
}

type EventparameterEdge {
  cursor: String!
  node: eventparameter!
}

enum eventparameterField {
  eventParameterDbId
  code
  description
  name
  units
  value
  valueDescription
  valuesByDate
  event_ID
}

input searchEventparameterInput {
  field: eventparameterField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchEventparameterInput]
}

input orderEventparameterInput {
  field: eventparameterField
  order: Order
}

type experimentaldesign {
  """@original-field"""
  experimentalDesignDbId: ID

  """
  @original-field
  MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.
  """
  PUI: String

  """
  @original-field
  MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be &#34;unknown&#34;/&#34;NA&#34;, &#34;aggregated/reduced data&#34;, or simply &#39;none&#39;.
  """
  description: String

  """@original-field"""
  study_ID: String
  study(search: searchStudyInput): study

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ExperimentaldesignConnection {
  edges: [ExperimentaldesignEdge]
  experimentaldesigns: [experimentaldesign]
  pageInfo: pageInfo!
}

type ExperimentaldesignEdge {
  cursor: String!
  node: experimentaldesign!
}

enum experimentaldesignField {
  experimentalDesignDbId
  PUI
  description
  study_ID
}

input searchExperimentaldesignInput {
  field: experimentaldesignField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchExperimentaldesignInput]
}

input orderExperimentaldesignInput {
  field: experimentaldesignField
  order: Order
}

type externalreference {
  """@original-field"""
  referenceDbId: ID

  """@original-field"""
  attribute_ID: String

  """
  @original-field
  An identifier for the source system or database of this reference
  """
  referenceSource: String

  """@original-field"""
  variable_ID: String

  """@original-field"""
  list_ID: String

  """@original-field"""
  location_ID: String

  """@original-field"""
  person_ID: String

  """@original-field"""
  program_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  trial_ID: String

  """@original-field"""
  callSet_ID: String

  """@original-field"""
  plate_ID: String

  """@original-field"""
  reference_ID: String

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  sample_ID: String

  """@original-field"""
  variant_ID: String

  """@original-field"""
  variantSet_ID: String

  """@original-field"""
  cross_ID: String

  """@original-field"""
  crossingProject_ID: String

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """@original-field"""
  germplasmAttributeValue_ID: String

  """@original-field"""
  pedigreeNode_ID: String

  """@original-field"""
  plannedCross_ID: String

  """@original-field"""
  seedLot_ID: String

  """@original-field"""
  seedLotTransaction_ID: String

  """@original-field"""
  image_ID: String

  """@original-field"""
  method_ID: String

  """@original-field"""
  observation_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  observationVariable_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  attribute(search: searchAttributeInput): attribute
  variable(search: searchVariableInput): variable
  list(search: searchListInput): list
  location(search: searchLocationInput): location
  person(search: searchPersonInput): person
  program(search: searchProgramInput): program
  study(search: searchStudyInput): study
  trial(search: searchTrialInput): trial
  callSet(search: searchCallsetInput): callset
  plate(search: searchPlateInput): plate
  reference(search: searchReferenceInput): reference
  referenceSet(search: searchReferencesetInput): referenceset
  sample(search: searchSampleInput): sample
  variant(search: searchVariantInput): variant
  variantSet(search: searchVariantsetInput): variantset
  cross(search: searchCrossInput): cross
  crossingProject(search: searchCrossingprojectInput): crossingproject
  germplasm(search: searchGermplasmInput): germplasm
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  germplasmAttributeValue(search: searchGermplasmattributevalueInput): germplasmattributevalue
  pedigreeNode(search: searchPedigreenodeInput): pedigreenode
  plannedCross(search: searchPlannedcrossInput): plannedcross
  seedLot(search: searchSeedlotInput): seedlot
  seedLotTransaction(search: searchSeedlottransactionInput): seedlottransaction
  image(search: searchImageInput): image
  method(search: searchMethodInput): method
  observation(search: searchObservationInput): observation
  observationUnit(search: searchObservationunitInput): observationunit
  observationVariable(search: searchObservationvariableInput): observationvariable
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ExternalreferenceConnection {
  edges: [ExternalreferenceEdge]
  externalreferences: [externalreference]
  pageInfo: pageInfo!
}

type ExternalreferenceEdge {
  cursor: String!
  node: externalreference!
}

enum externalreferenceField {
  referenceDbId
  attribute_ID
  referenceSource
  variable_ID
  list_ID
  location_ID
  person_ID
  program_ID
  study_ID
  trial_ID
  callSet_ID
  plate_ID
  reference_ID
  referenceSet_ID
  sample_ID
  variant_ID
  variantSet_ID
  cross_ID
  crossingProject_ID
  germplasm_ID
  germplasmAttribute_ID
  germplasmAttributeValue_ID
  pedigreeNode_ID
  plannedCross_ID
  seedLot_ID
  seedLotTransaction_ID
  image_ID
  method_ID
  observation_ID
  observationUnit_ID
  observationVariable_ID
  scale_ID
  trait_ID
}

input searchExternalreferenceInput {
  field: externalreferenceField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchExternalreferenceInput]
}

input orderExternalreferenceInput {
  field: externalreferenceField
  order: Order
}

type genomemap {
  """@original-field"""
  mapDbId: ID

  """
  @original-field
  Additional comments about a `GenomeMap`
  """
  comments: String

  """
  @original-field
  The common name of the `Crop`
  """
  commonCropName: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  The number of linkage groups present in a `GenomeMap`
  """
  linkageGroupCount: String

  """
  @original-field
  The human readable identifier for a `GenomeMap`
  """
  mapName: String

  """
  @original-field
  The DOI or other permanent identifier for a `GenomeMap`
  """
  mapPUI: String

  """
  @original-field
  The number of markers present in a `GenomeMap`
  """
  markerCount: String

  """
  @original-field
  The date this `GenomeMap` was published
  """
  publishedDate: String

  """
  @original-field
  Full scientific binomial format name. This includes Genus, Species, and Sub-species
  """
  scientificName: String

  """
  @original-field
  The type of map this represents, usually &#34;Genetic&#34; or &#34;Physical&#34;
  """
  type: String

  """
  @original-field
  The units used to describe the data in a `GenomeMap`
  """
  unit: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  markerPositions_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo

  """@search-request"""
  markerPositionsFilter(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationInput!): [markerposition]

  """@search-request"""
  markerPositionsConnection(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationCursorInput!): MarkerpositionConnection

  """@count-request"""
  countFilteredMarkerPositions(search: searchMarkerpositionInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GenomemapConnection {
  edges: [GenomemapEdge]
  genomemaps: [genomemap]
  pageInfo: pageInfo!
}

type GenomemapEdge {
  cursor: String!
  node: genomemap!
}

enum genomemapField {
  mapDbId
  comments
  commonCropName
  documentationURL
  linkageGroupCount
  mapName
  mapPUI
  markerCount
  publishedDate
  scientificName
  type
  unit
  additionalInfo_ID
  markerPositions_IDs
}

input searchGenomemapInput {
  field: genomemapField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGenomemapInput]
}

input orderGenomemapInput {
  field: genomemapField
  order: Order
}

type genotypemetadata {
  """@original-field"""
  genotypeMetadataDbId: ID

  """
  @original-field
  The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.
  """
  dataType: String

  """
      @original-field
      The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: &#34;GQ&#34;, &#34;RD&#34;, and &#34;HQ&#34;
  &lt;br&gt; This maps to a FORMAT field in the VCF file standard.
  """
  fieldAbbreviation: String

  """
      @original-field
      The name of the field represented in this Genotype Field. Examples include: &#34;Genotype Quality&#34;, &#34;Read Depth&#34;, and &#34;Haplotype Quality&#34;
  &lt;br&gt; This maps to a FORMAT field in the VCF file standard.
  """
  fieldName: String

  """
  @original-field
  The additional metadata value associated with this genotype call
  """
  fieldValue: String

  """@original-field"""
  call_ID: String
  call(search: searchCallInput): call

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GenotypemetadataConnection {
  edges: [GenotypemetadataEdge]
  genotypemetadata: [genotypemetadata]
  pageInfo: pageInfo!
}

type GenotypemetadataEdge {
  cursor: String!
  node: genotypemetadata!
}

enum genotypemetadataField {
  genotypeMetadataDbId
  dataType
  fieldAbbreviation
  fieldName
  fieldValue
  call_ID
}

input searchGenotypemetadataInput {
  field: genotypemetadataField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGenotypemetadataInput]
}

input orderGenotypemetadataInput {
  field: genotypemetadataField
  order: Order
}

type geojson {
  """@original-field"""
  geoJSONDbId: ID

  """
  @original-field
  The literal string &#34;Feature&#34;
  """
  type: String

  """@original-field"""
  image_ID: String

  """@original-field"""
  observation_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  germplasmOrigin_ID: String

  """@original-field"""
  location_ID: String
  image(search: searchImageInput): image
  observation(search: searchObservationInput): observation
  observationUnit(search: searchObservationunitpositionInput): observationunitposition
  germplasmOrigin(search: searchGermplasmoriginInput): germplasmorigin
  location(search: searchLocationInput): location

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GeojsonConnection {
  edges: [GeojsonEdge]
  geojsons: [geojson]
  pageInfo: pageInfo!
}

type GeojsonEdge {
  cursor: String!
  node: geojson!
}

enum geojsonField {
  geoJSONDbId
  type
  image_ID
  observation_ID
  observationUnit_ID
  germplasmOrigin_ID
  location_ID
}

input searchGeojsonInput {
  field: geojsonField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGeojsonInput]
}

input orderGeojsonInput {
  field: geojsonField
  order: Order
}

type geojsongeometry {
  """@original-field"""
  geoJSONGeometryDbId: ID

  """
  @original-field
  A single position
  """
  coordinates: String

  """
  @original-field
  The literal string &#34;Point&#34;
  """
  type: String

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GeojsongeometryConnection {
  edges: [GeojsongeometryEdge]
  geojsongeometries: [geojsongeometry]
  pageInfo: pageInfo!
}

type GeojsongeometryEdge {
  cursor: String!
  node: geojsongeometry!
}

enum geojsongeometryField {
  geoJSONGeometryDbId
  coordinates
  type
}

input searchGeojsongeometryInput {
  field: geojsongeometryField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGeojsongeometryInput]
}

input orderGeojsongeometryInput {
  field: geojsongeometryField
  order: Order
}

type germplasm {
  """@original-field"""
  germplasmDbId: ID

  """@original-field"""
  crossParent_ID: String

  """
      @original-field
      The unique identifier for a material or germplasm within a genebank
  
  MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. &#34;PI 113869&#34;).
  """
  accessionNumber: String

  """
      @original-field
      The date a material or germplasm was acquired by the genebank 
  
  MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or &#34;00&#34; [double zero].
  """
  acquisitionDate: String

  """
      @original-field
      MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. 
  
  100) Wild 
  110) Natural 
  120) Semi-natural/wild 
  130) Semi-natural/sown 
  200) Weedy 
  300) Traditional cultivar/landrace 
  400) Breeding/research material 
  410) Breeders line 
  411) Synthetic population 
  412) Hybrid 
  413) Founder stock/base population 
  414) Inbred line (parent of hybrid cultivar) 
  415) Segregating population 
  416) Clonal selection 
  420) Genetic stock 
  421) Mutant (e.g. induced/insertion mutants, tilling populations) 
  422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) 
  423) Other genetic stocks (e.g. mapping populations) 
  500) Advanced or improved cultivar (conventional breeding methods) 
  600) GMO (by genetic engineering) 
  999) Other (Elaborate in REMARKS field)
  """
  biologicalStatusOfAccessionCode: String

  """
  @original-field
  Supplemental text description for &#39;biologicalStatusOfAccessionCode&#39;
  """
  biologicalStatusOfAccessionDescription: String

  """
  @original-field
  A specific panel/collection/population name this germplasm belongs to.
  """
  collection: String

  """
      @original-field
      Common name for the crop 
  
  MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: &#34;malting barley&#34;, &#34;mas&#34;.
  """
  commonCropName: String

  """
      @original-field
      3-letter ISO 3166-1 code of the country in which the sample was originally collected 
  
  MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was &#34;collected&#34;.
  """
  countryOfOriginCode: String

  """
  @original-field
  Human readable name used for display purposes
  """
  defaultDisplayName: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
      @original-field
      Genus name for taxon. Initial uppercase letter required.
  
  MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.
  
  MIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.
  """
  genus: String

  """
      @original-field
      Name of the germplasm. It can be the preferred name and does not have to be unique.
  
  MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.
  """
  germplasmName: String

  """
      @original-field
      The Permanent Unique Identifier which represents a germplasm
  
  MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.
  
  MIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source
  
  MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.
  """
  germplasmPUI: String

  """
  @original-field
  Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.
  """
  germplasmPreprocessing: String

  """
      @original-field
      The code for the institute that maintains the material. 
  
  MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with &#34;obsolete&#34; codes, see &#34;Common formatting rules (v)&#34;.
  """
  instituteCode: String

  """
  @original-field
  The name of the institute that maintains the material
  """
  instituteName: String

  """
      @original-field
      The cross name and optional selection history.
  
  MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree &#39;Hanna/7*Atlas//Turk/8*Atlas&#39; or a description &#39;mutation found in Hanna&#39;, &#39;selection from Irene&#39; or &#39;cross involving amongst others Hanna and Irene&#39;.
  """
  pedigree: String

  """
      @original-field
      An identifier for the source of the biological material
  &lt;br/&gt;MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: &#34;mother_accession X father_accession&#34;, or, if father is unknown, as &#34;mother_accession X UNKNOWN&#34;. For in situ material, the region of provenance may be used when an accession is not available.
  """
  seedSource: String

  """
      @original-field
      Description of the material source
  
  MIAPPE V1.1 (DM-56) Material source description - Description of the material source
  """
  seedSourceDescription: String

  """
      @original-field
      Specific epithet portion of the scientific name in lowercase letters.
  
  MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: &#34;sp.&#34; 
  
  MIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.
  """
  species: String

  """
      @original-field
      The authority organization responsible for tracking and maintaining the species name 
  
  MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.
  """
  speciesAuthority: String

  """
      @original-field
      Subtaxon can be used to store any additional taxonomic identifier.
  
  MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: &#34;subsp.&#34; (for subspecies); &#34;convar.&#34; (for convariety); &#34;var.&#34; (for variety); &#34;f.&#34; (for form); &#34;Group&#34; (for &#34;cultivar group&#34;).
  
  MIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).
  """
  subtaxa: String

  """
      @original-field
      The authority organization responsible for tracking and maintaining the subtaxon information
  
  MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.
  """
  subtaxaAuthority: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  breedingMethod_ID: String

  """@original-field"""
  pedigreeNode_ID: String

  """@original-field"""
  donors_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  germplasmOrigin_IDs: [String]

  """@original-field"""
  storageTypes_IDs: [String]

  """@original-field"""
  synonyms_IDs: [String]

  """@original-field"""
  taxonIds_IDs: [String]

  """@original-field"""
  samples_IDs: [String]

  """@original-field"""
  attributeValues_IDs: [String]

  """@original-field"""
  progenyPedigreeNodes_IDs: [String]

  """@original-field"""
  parentPedigreeNodes_IDs: [String]

  """@original-field"""
  siblingPedigreeNodes_IDs: [String]

  """@original-field"""
  observations_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]

  """@original-field"""
  reference_ID: String

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  contentMixture_IDs: [String]
  crossParent(search: searchCrossparentInput): crossparent
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  breedingMethod(search: searchBreedingmethodInput): breedingmethod
  pedigreeNode(search: searchPedigreenodeInput): pedigreenode
  reference(search: searchReferenceInput): reference
  referenceSet(search: searchReferencesetInput): referenceset

  """@search-request"""
  donorsFilter(search: searchDonorInput, order: [orderDonorInput], pagination: paginationInput!): [donor]

  """@search-request"""
  donorsConnection(search: searchDonorInput, order: [orderDonorInput], pagination: paginationCursorInput!): DonorConnection

  """@count-request"""
  countFilteredDonors(search: searchDonorInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  germplasmOriginFilter(search: searchGermplasmoriginInput, order: [orderGermplasmoriginInput], pagination: paginationInput!): [germplasmorigin]

  """@search-request"""
  germplasmOriginConnection(search: searchGermplasmoriginInput, order: [orderGermplasmoriginInput], pagination: paginationCursorInput!): GermplasmoriginConnection

  """@count-request"""
  countFilteredGermplasmOrigin(search: searchGermplasmoriginInput): Int

  """@search-request"""
  storageTypesFilter(search: searchStoragetypeInput, order: [orderStoragetypeInput], pagination: paginationInput!): [storagetype]

  """@search-request"""
  storageTypesConnection(search: searchStoragetypeInput, order: [orderStoragetypeInput], pagination: paginationCursorInput!): StoragetypeConnection

  """@count-request"""
  countFilteredStorageTypes(search: searchStoragetypeInput): Int

  """@search-request"""
  synonymsFilter(search: searchSynonymInput, order: [orderSynonymInput], pagination: paginationInput!): [synonym]

  """@search-request"""
  synonymsConnection(search: searchSynonymInput, order: [orderSynonymInput], pagination: paginationCursorInput!): SynonymConnection

  """@count-request"""
  countFilteredSynonyms(search: searchSynonymInput): Int

  """@search-request"""
  taxonIdsFilter(search: searchTaxonidInput, order: [orderTaxonidInput], pagination: paginationInput!): [taxonid]

  """@search-request"""
  taxonIdsConnection(search: searchTaxonidInput, order: [orderTaxonidInput], pagination: paginationCursorInput!): TaxonidConnection

  """@count-request"""
  countFilteredTaxonIds(search: searchTaxonidInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@search-request"""
  attributeValuesFilter(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationInput!): [germplasmattributevalue]

  """@search-request"""
  attributeValuesConnection(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationCursorInput!): GermplasmattributevalueConnection

  """@count-request"""
  countFilteredAttributeValues(search: searchGermplasmattributevalueInput): Int

  """@search-request"""
  progenyPedigreeNodesFilter(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]

  """@search-request"""
  progenyPedigreeNodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection

  """@count-request"""
  countFilteredProgenyPedigreeNodes(search: searchPedigreenodeInput): Int

  """@search-request"""
  parentPedigreeNodesFilter(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]

  """@search-request"""
  parentPedigreeNodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection

  """@count-request"""
  countFilteredParentPedigreeNodes(search: searchPedigreenodeInput): Int

  """@search-request"""
  siblingPedigreeNodesFilter(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationInput!): [pedigreenode]

  """@search-request"""
  siblingPedigreeNodesConnection(search: searchPedigreenodeInput, order: [orderPedigreenodeInput], pagination: paginationCursorInput!): PedigreenodeConnection

  """@count-request"""
  countFilteredSiblingPedigreeNodes(search: searchPedigreenodeInput): Int

  """@search-request"""
  observationsFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservations(search: searchObservationInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@search-request"""
  contentMixtureFilter(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationInput!): [contentmixture]

  """@search-request"""
  contentMixtureConnection(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationCursorInput!): ContentmixtureConnection

  """@count-request"""
  countFilteredContentMixture(search: searchContentmixtureInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmConnection {
  edges: [GermplasmEdge]
  germplasms: [germplasm]
  pageInfo: pageInfo!
}

type GermplasmEdge {
  cursor: String!
  node: germplasm!
}

enum germplasmField {
  germplasmDbId
  crossParent_ID
  accessionNumber
  acquisitionDate
  biologicalStatusOfAccessionCode
  biologicalStatusOfAccessionDescription
  collection
  commonCropName
  countryOfOriginCode
  defaultDisplayName
  documentationURL
  genus
  germplasmName
  germplasmPUI
  germplasmPreprocessing
  instituteCode
  instituteName
  pedigree
  seedSource
  seedSourceDescription
  species
  speciesAuthority
  subtaxa
  subtaxaAuthority
  additionalInfo_ID
  breedingMethod_ID
  pedigreeNode_ID
  donors_IDs
  externalReferences_IDs
  germplasmOrigin_IDs
  storageTypes_IDs
  synonyms_IDs
  taxonIds_IDs
  samples_IDs
  attributeValues_IDs
  progenyPedigreeNodes_IDs
  parentPedigreeNodes_IDs
  siblingPedigreeNodes_IDs
  observations_IDs
  observationUnits_IDs
  reference_ID
  referenceSet_ID
  contentMixture_IDs
}

input searchGermplasmInput {
  field: germplasmField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmInput]
}

input orderGermplasmInput {
  field: germplasmField
  order: Order
}

type germplasmattribute {
  """@original-field"""
  germplasmAttributeDbId: ID

  """
  @original-field
  General category for the attribute. very similar to Trait class.
  """
  attributeCategory: String

  """
  @original-field
  The ID which uniquely identifies this attribute within the given database server
  """
  attributeDbId: String

  """
  @original-field
  A human readable name for this attribute
  """
  attributeName: String

  """
  @original-field
  The Permanent Unique Identifier of an Attribute, usually in the form of a URI
  """
  attributePUI: String

  """
  @original-field
  A human readable description of this attribute
  """
  attributeDescription: String

  """
  @original-field
  Crop name (examples: &#34;Maize&#34;, &#34;Wheat&#34;)
  """
  commonCropName: String

  """
  @original-field
  Indication of how trait is routinely used. (examples: [&#34;Trial evaluation&#34;, &#34;Nursery evaluation&#34;])
  """
  contextOfUse: String

  """
  @original-field
  Variable default value. (examples: &#34;red&#34;, &#34;2.3&#34;, etc.)
  """
  defaultValue: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Growth stage at which measurement is made (examples: &#34;flowering&#34;)
  """
  growthStage: String

  """
  @original-field
  Name of institution submitting the variable
  """
  institution: String

  """
  @original-field
  2 letter ISO 639-1 code for the language of submission of the variable.
  """
  language: String

  """
  @original-field
  Name of scientist submitting the variable.
  """
  scientist: String

  """
  @original-field
  Variable status. (examples: &#34;recommended&#34;, &#34;obsolete&#34;, &#34;legacy&#34;, etc.)
  """
  status: String

  """
  @original-field
  Timestamp when the Variable was added (ISO 8601)
  """
  submissionTimestamp: String

  """
  @original-field
  Other variable names
  """
  synonyms: String

  """@original-field"""
  attributeValues_IDs: [String]

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  method_ID: String

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  method(search: searchMethodInput): method
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@search-request"""
  attributeValuesFilter(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationInput!): [germplasmattributevalue]

  """@search-request"""
  attributeValuesConnection(search: searchGermplasmattributevalueInput, order: [orderGermplasmattributevalueInput], pagination: paginationCursorInput!): GermplasmattributevalueConnection

  """@count-request"""
  countFilteredAttributeValues(search: searchGermplasmattributevalueInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmattributeConnection {
  edges: [GermplasmattributeEdge]
  germplasmattributes: [germplasmattribute]
  pageInfo: pageInfo!
}

type GermplasmattributeEdge {
  cursor: String!
  node: germplasmattribute!
}

enum germplasmattributeField {
  germplasmAttributeDbId
  attributeCategory
  attributeDbId
  attributeName
  attributePUI
  attributeDescription
  commonCropName
  contextOfUse
  defaultValue
  documentationURL
  growthStage
  institution
  language
  scientist
  status
  submissionTimestamp
  synonyms
  attributeValues_IDs
  additionalInfo_ID
  externalReferences_IDs
  method_ID
  ontologyReference_ID
  scale_ID
  trait_ID
}

input searchGermplasmattributeInput {
  field: germplasmattributeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmattributeInput]
}

input orderGermplasmattributeInput {
  field: germplasmattributeField
  order: Order
}

type germplasmattributevalue {
  """@original-field"""
  attributeValueDbId: ID

  """
  @original-field
  The date the value of this attribute was determined for a given germplasm
  """
  determinedDate: String

  """
  @original-field
  The value of this attribute for a given germplasm
  """
  value: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  attribute_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  germplasm_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  attribute(search: searchGermplasmattributeInput): germplasmattribute
  germplasm(search: searchGermplasmInput): germplasm

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmattributevalueConnection {
  edges: [GermplasmattributevalueEdge]
  germplasmattributevalues: [germplasmattributevalue]
  pageInfo: pageInfo!
}

type GermplasmattributevalueEdge {
  cursor: String!
  node: germplasmattributevalue!
}

enum germplasmattributevalueField {
  attributeValueDbId
  determinedDate
  value
  additionalInfo_ID
  attribute_ID
  externalReferences_IDs
  germplasm_ID
}

input searchGermplasmattributevalueInput {
  field: germplasmattributevalueField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmattributevalueInput]
}

input orderGermplasmattributevalueInput {
  field: germplasmattributevalueField
  order: Order
}

type germplasmchild {
  """@original-field"""
  germplasmChildDbId: ID

  """@original-field"""
  childGermplasm_ID: String

  """@original-field"""
  pedigreeNode_ID: String
  childGermplasm(search: searchGermplasmInput): germplasm
  pedigreeNode(search: searchPedigreenodeInput): pedigreenode

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmchildConnection {
  edges: [GermplasmchildEdge]
  germplasmchildren: [germplasmchild]
  pageInfo: pageInfo!
}

type GermplasmchildEdge {
  cursor: String!
  node: germplasmchild!
}

enum germplasmchildField {
  germplasmChildDbId
  childGermplasm_ID
  pedigreeNode_ID
}

input searchGermplasmchildInput {
  field: germplasmchildField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmchildInput]
}

input orderGermplasmchildInput {
  field: germplasmchildField
  order: Order
}

type germplasmorigin {
  """@original-field"""
  germplasmOriginDbId: ID

  """
  @original-field
  Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.
  """
  coordinateUncertainty: String

  """@original-field"""
  coordinates_IDs: [String]

  """@original-field"""
  germplasm_ID: String
  germplasm(search: searchGermplasmInput): germplasm

  """@search-request"""
  coordinatesFilter(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationInput!): [geojson]

  """@search-request"""
  coordinatesConnection(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationCursorInput!): GeojsonConnection

  """@count-request"""
  countFilteredCoordinates(search: searchGeojsonInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmoriginConnection {
  edges: [GermplasmoriginEdge]
  germplasmorigins: [germplasmorigin]
  pageInfo: pageInfo!
}

type GermplasmoriginEdge {
  cursor: String!
  node: germplasmorigin!
}

enum germplasmoriginField {
  germplasmOriginDbId
  coordinateUncertainty
  coordinates_IDs
  germplasm_ID
}

input searchGermplasmoriginInput {
  field: germplasmoriginField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmoriginInput]
}

input orderGermplasmoriginInput {
  field: germplasmoriginField
  order: Order
}

type germplasmparent {
  """@original-field"""
  germplasmParentDbId: ID

  """@original-field"""
  parentGermplasm_ID: String

  """@original-field"""
  pedigreeNode_ID: String
  parentGermplasm(search: searchGermplasmInput): germplasm
  pedigreeNode(search: searchPedigreenodeInput): pedigreenode

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GermplasmparentConnection {
  edges: [GermplasmparentEdge]
  germplasmparents: [germplasmparent]
  pageInfo: pageInfo!
}

type GermplasmparentEdge {
  cursor: String!
  node: germplasmparent!
}

enum germplasmparentField {
  germplasmParentDbId
  parentGermplasm_ID
  pedigreeNode_ID
}

input searchGermplasmparentInput {
  field: germplasmparentField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGermplasmparentInput]
}

input orderGermplasmparentInput {
  field: germplasmparentField
  order: Order
}

type growthfacility {
  """@original-field"""
  growthFacilityDbId: ID

  """
  @original-field
  MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.
  """
  PUI: String

  """
  @original-field
  MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.
  """
  description: String

  """@original-field"""
  study_ID: String
  study(search: searchStudyInput): study

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type GrowthfacilityConnection {
  edges: [GrowthfacilityEdge]
  growthfacilities: [growthfacility]
  pageInfo: pageInfo!
}

type GrowthfacilityEdge {
  cursor: String!
  node: growthfacility!
}

enum growthfacilityField {
  growthFacilityDbId
  PUI
  description
  study_ID
}

input searchGrowthfacilityInput {
  field: growthfacilityField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchGrowthfacilityInput]
}

input orderGrowthfacilityInput {
  field: growthfacilityField
  order: Order
}

type image {
  """@original-field"""
  imageDbId: ID

  """
  @original-field
  The copyright information of this image. Example &#39;Copyright 2018 Bob Robertson&#39;
  """
  copyright: String

  """
  @original-field
  The human readable description of an image.
  """
  description: String

  """
  @original-field
  A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.
  """
  descriptiveOntologyTerms: String

  """
  @original-field
  The name of the image file. Might be the same as &#39;imageName&#39;, but could be different.
  """
  imageFileName: String

  """
  @original-field
  The size of the image in Bytes.
  """
  imageFileSize: String

  """
  @original-field
  The height of the image in Pixels.
  """
  imageHeight: String

  """
  @original-field
  The human readable name of an image. Might be the same as &#39;imageFileName&#39;, but could be different.
  """
  imageName: String

  """
  @original-field
  The date and time the image was taken
  """
  imageTimeStamp: String

  """
  @original-field
  The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.
  """
  imageURL: String

  """
  @original-field
  The width of the image in Pixels.
  """
  imageWidth: String

  """
  @original-field
  The file type of the image. Examples &#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/svg&#39;, etc
  """
  mimeType: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  imageLocation_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  observations_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  imageLocation(search: searchGeojsonInput): geojson
  observationUnit(search: searchObservationunitInput): observationunit

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  observationsFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservations(search: searchObservationInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ImageConnection {
  edges: [ImageEdge]
  images: [image]
  pageInfo: pageInfo!
}

type ImageEdge {
  cursor: String!
  node: image!
}

enum imageField {
  imageDbId
  copyright
  description
  descriptiveOntologyTerms
  imageFileName
  imageFileSize
  imageHeight
  imageName
  imageTimeStamp
  imageURL
  imageWidth
  mimeType
  additionalInfo_ID
  externalReferences_IDs
  imageLocation_ID
  observationUnit_ID
  observations_IDs
}

input searchImageInput {
  field: imageField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchImageInput]
}

input orderImageInput {
  field: imageField
  order: Order
}

type lastupdate {
  """@original-field"""
  lastUpdateDbId: ID

  """@original-field"""
  timestamp: String

  """@original-field"""
  version: String

  """@original-field"""
  study_ID: String
  study(search: searchStudyInput): study

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type LastupdateConnection {
  edges: [LastupdateEdge]
  lastupdates: [lastupdate]
  pageInfo: pageInfo!
}

type LastupdateEdge {
  cursor: String!
  node: lastupdate!
}

enum lastupdateField {
  lastUpdateDbId
  timestamp
  version
  study_ID
}

input searchLastupdateInput {
  field: lastupdateField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchLastupdateInput]
}

input orderLastupdateInput {
  field: lastupdateField
  order: Order
}

type list {
  """@original-field"""
  listDbId: ID

  """
  @original-field
  The array of DbIds of the BrAPI objects contained in a List
  """
  data: String

  """
  @original-field
  Timestamp when the entity was first created
  """
  dateCreated: String

  """
  @original-field
  Timestamp when the entity was last updated
  """
  dateModified: String

  """
  @original-field
  Description of a List
  """
  listDescription: String

  """
  @original-field
  Human readable name of a List
  """
  listName: String

  """
  @original-field
  Human readable name of a List Owner. (usually a user or person)
  """
  listOwnerName: String

  """
  @original-field
  The number of elements in a List
  """
  listSize: String

  """
  @original-field
  The description of where a List originated from
  """
  listSource: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  listOwnerPerson_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  listOwnerPerson(search: searchPersonInput): person

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ListConnection {
  edges: [ListEdge]
  lists: [list]
  pageInfo: pageInfo!
}

type ListEdge {
  cursor: String!
  node: list!
}

enum listField {
  listDbId
  data
  dateCreated
  dateModified
  listDescription
  listName
  listOwnerName
  listSize
  listSource
  additionalInfo_ID
  externalReferences_IDs
  listOwnerPerson_ID
}

input searchListInput {
  field: listField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchListInput]
}

input orderListInput {
  field: listField
  order: Order
}

type location {
  """@original-field"""
  locationDbId: ID

  """
  @original-field
  A shortened version of the human readable name for a Location
  """
  abbreviation: String

  """
  @original-field
  Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)
  """
  coordinateDescription: String

  """
  @original-field
  Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.
  """
  coordinateUncertainty: String

  """
      @original-field
      [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec
  &lt;br/&gt; MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.&#39;
  """
  countryCode: String

  """
      @original-field
      The full name of the country where a Location is located
  &lt;br/&gt; MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.
  """
  countryName: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)
  """
  environmentType: String

  """
  @original-field
  Describes the level of protection/exposure for things like sun light and wind at a particular Location
  """
  exposure: String

  """
      @original-field
      The street address of the institute at a particular Location
  &lt;br/&gt; MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteAddress: String

  """
      @original-field
      The full name of the institute at a particular Location
  &lt;br/&gt; MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.
  """
  instituteName: String

  """
      @original-field
      A human readable name for a Location
  &lt;br/&gt; MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.
  """
  locationName: String

  """
  @original-field
  A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)
  """
  locationType: String

  """
  @original-field
  Description of the accessibility of the location (ex. Public, Private)
  """
  siteStatus: String

  """
  @original-field
  Describes the approximate slope (height/distance) of a Location.
  """
  slope: String

  """
  @original-field
  Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)
  """
  topography: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  coordinates_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  parentLocation_ID: String

  """@original-field"""
  childLocations_IDs: [String]

  """@original-field"""
  studies_IDs: [String]

  """@original-field"""
  seedLots_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  coordinates(search: searchGeojsonInput): geojson
  parentLocation(search: searchLocationInput): location

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  childLocationsFilter(search: searchLocationInput, order: [orderLocationInput], pagination: paginationInput!): [location]

  """@search-request"""
  childLocationsConnection(search: searchLocationInput, order: [orderLocationInput], pagination: paginationCursorInput!): LocationConnection

  """@count-request"""
  countFilteredChildLocations(search: searchLocationInput): Int

  """@search-request"""
  studiesFilter(search: searchStudyInput, order: [orderStudyInput], pagination: paginationInput!): [study]

  """@search-request"""
  studiesConnection(search: searchStudyInput, order: [orderStudyInput], pagination: paginationCursorInput!): StudyConnection

  """@count-request"""
  countFilteredStudies(search: searchStudyInput): Int

  """@search-request"""
  seedLotsFilter(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationInput!): [seedlot]

  """@search-request"""
  seedLotsConnection(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationCursorInput!): SeedlotConnection

  """@count-request"""
  countFilteredSeedLots(search: searchSeedlotInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type LocationConnection {
  edges: [LocationEdge]
  locations: [location]
  pageInfo: pageInfo!
}

type LocationEdge {
  cursor: String!
  node: location!
}

enum locationField {
  locationDbId
  abbreviation
  coordinateDescription
  coordinateUncertainty
  countryCode
  countryName
  documentationURL
  environmentType
  exposure
  instituteAddress
  instituteName
  locationName
  locationType
  siteStatus
  slope
  topography
  additionalInfo_ID
  coordinates_ID
  externalReferences_IDs
  parentLocation_ID
  childLocations_IDs
  studies_IDs
  seedLots_IDs
  observationUnits_IDs
}

input searchLocationInput {
  field: locationField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchLocationInput]
}

input orderLocationInput {
  field: locationField
  order: Order
}

type markerposition {
  """@original-field"""
  markerPositionDbId: ID

  """
      @original-field
      The Uniquely Identifiable name of a `LinkageGroup`
  &lt;br&gt; This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
  """
  linkageGroupName: String

  """
  @original-field
  The position of a marker or variant within a `LinkageGroup`
  """
  position: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  map_ID: String

  """@original-field"""
  variant_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  map(search: searchGenomemapInput): genomemap
  variant(search: searchVariantInput): variant

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type MarkerpositionConnection {
  edges: [MarkerpositionEdge]
  markerpositions: [markerposition]
  pageInfo: pageInfo!
}

type MarkerpositionEdge {
  cursor: String!
  node: markerposition!
}

enum markerpositionField {
  markerPositionDbId
  linkageGroupName
  position
  additionalInfo_ID
  map_ID
  variant_ID
}

input searchMarkerpositionInput {
  field: markerpositionField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchMarkerpositionInput]
}

input orderMarkerpositionInput {
  field: markerpositionField
  order: Order
}

type metadatafield {
  """@original-field"""
  metadataFieldDbId: ID

  """
  @original-field
  The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.
  """
  dataType: String

  """
  @original-field
  The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: &#34;GQ&#34;, &#34;RD&#34;, and &#34;HQ&#34;
  """
  fieldAbbreviation: String

  """
  @original-field
  The name of the field represented in this Genotype Field. Examples include: &#34;Genotype Quality&#34;, &#34;Read Depth&#34;, and &#34;Haplotype Quality&#34;
  """
  fieldName: String

  """@original-field"""
  variantSet_ID: String
  variantSet(search: searchVariantsetInput): variantset

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type MetadatafieldConnection {
  edges: [MetadatafieldEdge]
  metadatafields: [metadatafield]
  pageInfo: pageInfo!
}

type MetadatafieldEdge {
  cursor: String!
  node: metadatafield!
}

enum metadatafieldField {
  metadataFieldDbId
  dataType
  fieldAbbreviation
  fieldName
  variantSet_ID
}

input searchMetadatafieldInput {
  field: metadatafieldField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchMetadatafieldInput]
}

input orderMetadatafieldInput {
  field: metadatafieldField
  order: Order
}

type method {
  """@original-field"""
  methodDbId: ID

  """@original-field"""
  attribute_ID: String

  """@original-field"""
  variable_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """
      @original-field
      Bibliographical reference describing the method.
  &lt;br/&gt;MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.
  """
  bibliographicalReference: String

  """
      @original-field
      Method description
  &lt;br/&gt;MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)
  """
  description: String

  """
  @original-field
  For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
  """
  formula: String

  """
  @original-field
  Method class (examples: &#34;Measurement&#34;, &#34;Counting&#34;, &#34;Estimation&#34;, &#34;Computation&#34;, etc.)
  """
  methodClass: String

  """
      @original-field
      Human readable name for the method
  &lt;br/&gt;MIAPPE V1.1 (DM-88) Method  Name of the method of observation
  """
  methodName: String

  """
  @original-field
  The Permanent Unique Identifier of a Method, usually in the form of a URI
  """
  methodPUI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  observationVariable_ID: String
  attribute(search: searchAttributeInput): attribute
  variable(search: searchVariableInput): variable
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  observationVariable(search: searchObservationvariableInput): observationvariable

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type MethodConnection {
  edges: [MethodEdge]
  methods: [method]
  pageInfo: pageInfo!
}

type MethodEdge {
  cursor: String!
  node: method!
}

enum methodField {
  methodDbId
  attribute_ID
  variable_ID
  germplasmAttribute_ID
  bibliographicalReference
  description
  formula
  methodClass
  methodName
  methodPUI
  additionalInfo_ID
  externalReferences_IDs
  ontologyReference_ID
  observationVariable_ID
}

input searchMethodInput {
  field: methodField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchMethodInput]
}

input orderMethodInput {
  field: methodField
  order: Order
}

type observation {
  """@original-field"""
  observationDbId: ID

  """
  @original-field
  The name or identifier of the entity which collected the observation
  """
  collector: String

  """
  @original-field
  The date and time when this observation was made
  """
  observationTimeStamp: String

  """
  @original-field
  The name or id of the user who uploaded the observation to the database system
  """
  uploadedBy: String

  """
  @original-field
  The value of the data collected as an observation
  """
  value: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  geoCoordinates_ID: String

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  observationVariable_ID: String

  """@original-field"""
  season_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  images_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  geoCoordinates(search: searchGeojsonInput): geojson
  germplasm(search: searchGermplasmInput): germplasm
  observationUnit(search: searchObservationunitInput): observationunit
  observationVariable(search: searchObservationvariableInput): observationvariable
  season(search: searchSeasonInput): season
  study(search: searchStudyInput): study

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  imagesFilter(search: searchImageInput, order: [orderImageInput], pagination: paginationInput!): [image]

  """@search-request"""
  imagesConnection(search: searchImageInput, order: [orderImageInput], pagination: paginationCursorInput!): ImageConnection

  """@count-request"""
  countFilteredImages(search: searchImageInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationConnection {
  edges: [ObservationEdge]
  observations: [observation]
  pageInfo: pageInfo!
}

type ObservationEdge {
  cursor: String!
  node: observation!
}

enum observationField {
  observationDbId
  collector
  observationTimeStamp
  uploadedBy
  value
  additionalInfo_ID
  externalReferences_IDs
  geoCoordinates_ID
  germplasm_ID
  observationUnit_ID
  observationVariable_ID
  season_ID
  study_ID
  images_IDs
}

input searchObservationInput {
  field: observationField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationInput]
}

input orderObservationInput {
  field: observationField
  order: Order
}

type observationunit {
  """@original-field"""
  observationUnitDbId: ID

  """@original-field"""
  crossParent_IDs: [String]

  """
  @original-field
  A human readable name for an observation unit
  """
  observationUnitName: String

  """
      @original-field
      A Permanent Unique Identifier for an observation unit
  
  MIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.
  """
  observationUnitPUI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  cross_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  location_ID: String

  """@original-field"""
  observationUnitPosition_IDs: [String]

  """@original-field"""
  program_ID: String

  """@original-field"""
  seedLot_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  treatments_IDs: [String]

  """@original-field"""
  trial_ID: String

  """@original-field"""
  samples_IDs: [String]

  """@original-field"""
  events_IDs: [String]

  """@original-field"""
  images_IDs: [String]

  """@original-field"""
  observations_IDs: [String]

  """@original-field"""
  observationUnitLevelRelationship_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  cross(search: searchCrossInput): cross
  germplasm(search: searchGermplasmInput): germplasm
  location(search: searchLocationInput): location
  program(search: searchProgramInput): program
  seedLot(search: searchSeedlotInput): seedlot
  study(search: searchStudyInput): study
  trial(search: searchTrialInput): trial
  observationUnitLevelRelationship(search: searchObservationunitlevelrelationshipInput): observationunitlevelrelationship

  """@search-request"""
  crossParentFilter(search: searchCrossparentInput, order: [orderCrossparentInput], pagination: paginationInput!): [crossparent]

  """@search-request"""
  crossParentConnection(search: searchCrossparentInput, order: [orderCrossparentInput], pagination: paginationCursorInput!): CrossparentConnection

  """@count-request"""
  countFilteredCrossParent(search: searchCrossparentInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  observationUnitPositionFilter(search: searchObservationunitpositionInput, order: [orderObservationunitpositionInput], pagination: paginationInput!): [observationunitposition]

  """@search-request"""
  observationUnitPositionConnection(search: searchObservationunitpositionInput, order: [orderObservationunitpositionInput], pagination: paginationCursorInput!): ObservationunitpositionConnection

  """@count-request"""
  countFilteredObservationUnitPosition(search: searchObservationunitpositionInput): Int

  """@search-request"""
  treatmentsFilter(search: searchTreatmentInput, order: [orderTreatmentInput], pagination: paginationInput!): [treatment]

  """@search-request"""
  treatmentsConnection(search: searchTreatmentInput, order: [orderTreatmentInput], pagination: paginationCursorInput!): TreatmentConnection

  """@count-request"""
  countFilteredTreatments(search: searchTreatmentInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@search-request"""
  eventsFilter(search: searchEventInput, order: [orderEventInput], pagination: paginationInput!): [event]

  """@search-request"""
  eventsConnection(search: searchEventInput, order: [orderEventInput], pagination: paginationCursorInput!): EventConnection

  """@count-request"""
  countFilteredEvents(search: searchEventInput): Int

  """@search-request"""
  imagesFilter(search: searchImageInput, order: [orderImageInput], pagination: paginationInput!): [image]

  """@search-request"""
  imagesConnection(search: searchImageInput, order: [orderImageInput], pagination: paginationCursorInput!): ImageConnection

  """@count-request"""
  countFilteredImages(search: searchImageInput): Int

  """@search-request"""
  observationsFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservations(search: searchObservationInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationunitConnection {
  edges: [ObservationunitEdge]
  observationunits: [observationunit]
  pageInfo: pageInfo!
}

type ObservationunitEdge {
  cursor: String!
  node: observationunit!
}

enum observationunitField {
  observationUnitDbId
  crossParent_IDs
  observationUnitName
  observationUnitPUI
  additionalInfo_ID
  cross_ID
  externalReferences_IDs
  germplasm_ID
  location_ID
  observationUnitPosition_IDs
  program_ID
  seedLot_ID
  study_ID
  treatments_IDs
  trial_ID
  samples_IDs
  events_IDs
  images_IDs
  observations_IDs
  observationUnitLevelRelationship_ID
}

input searchObservationunitInput {
  field: observationunitField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationunitInput]
}

input orderObservationunitInput {
  field: observationunitField
  order: Order
}

type observationunithierarchylevel {
  """@original-field"""
  observationUnitHierarchyLevelDbId: ID

  """
      @original-field
      A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelName: String

  """
      @original-field
      `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`&#39;s lower numbers 
  are at the top of the hierarchy (ie field -&gt; 1) and higher numbers are at the bottom of the hierarchy (ie plant -&gt; 9). 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelOrder: String

  """@original-field"""
  study_ID: String
  study(search: searchStudyInput): study

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationunithierarchylevelConnection {
  edges: [ObservationunithierarchylevelEdge]
  observationunithierarchylevels: [observationunithierarchylevel]
  pageInfo: pageInfo!
}

type ObservationunithierarchylevelEdge {
  cursor: String!
  node: observationunithierarchylevel!
}

enum observationunithierarchylevelField {
  observationUnitHierarchyLevelDbId
  levelName
  levelOrder
  study_ID
}

input searchObservationunithierarchylevelInput {
  field: observationunithierarchylevelField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationunithierarchylevelInput]
}

input orderObservationunithierarchylevelInput {
  field: observationunithierarchylevelField
  order: Order
}

type observationunitlevel {
  """@original-field"""
  observationUnitLevelDbId: ID

  """@original-field"""
  observationUnitPosition_ID: String

  """
      @original-field
      An ID code or number to represent a real thing that may or may not be an an observation unit.
  &lt;br/&gt;For example, if the &#39;levelName&#39; is &#39;plot&#39;, then the &#39;levelCode&#39; would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  &lt;br/&gt;If the &#39;levelName&#39; is &#39;field&#39;, then the &#39;levelCode&#39; might be something like &#39;3&#39; or &#39;F3&#39; to indicate the third field at a research station. 
  """
  levelCode: String

  """
      @original-field
      A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelName: String

  """
      @original-field
      `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`&#39;s lower numbers 
  are at the top of the hierarchy (ie field -&gt; 1) and higher numbers are at the bottom of the hierarchy (ie plant -&gt; 9). 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelOrder: String

  """@original-field"""
  observationUnitHierarchyLevelDbId: String
  observationUnitPosition(search: searchObservationunitpositionInput): observationunitposition

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationunitlevelConnection {
  edges: [ObservationunitlevelEdge]
  observationunitlevels: [observationunitlevel]
  pageInfo: pageInfo!
}

type ObservationunitlevelEdge {
  cursor: String!
  node: observationunitlevel!
}

enum observationunitlevelField {
  observationUnitLevelDbId
  observationUnitPosition_ID
  levelCode
  levelName
  levelOrder
  observationUnitHierarchyLevelDbId
}

input searchObservationunitlevelInput {
  field: observationunitlevelField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationunitlevelInput]
}

input orderObservationunitlevelInput {
  field: observationunitlevelField
  order: Order
}

type observationunitlevelrelationship {
  """@original-field"""
  observationUnitLevelRelationshipDbId: ID

  """@original-field"""
  observationUnitPosition_ID: String

  """
      @original-field
      An ID code or number to represent a real thing that may or may not be an an observation unit.
  &lt;br/&gt;For example, if the &#39;levelName&#39; is &#39;plot&#39;, then the &#39;levelCode&#39; would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.
  &lt;br/&gt;If the &#39;levelName&#39; is &#39;field&#39;, then the &#39;levelCode&#39; might be something like &#39;3&#39; or &#39;F3&#39; to indicate the third field at a research station. 
  """
  levelCode: String

  """@original-field"""
  observationUnitLevelDbId: String

  """
      @original-field
      A name for this level 
  
  **Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelName: String

  """
      @original-field
      `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`&#39;s lower numbers 
  are at the top of the hierarchy (ie field -&gt; 1) and higher numbers are at the bottom of the hierarchy (ie plant -&gt; 9). 
  
  For more information on Observation Levels, please review the &lt;a target=&#34;_blank&#34; href=&#34;https://wiki.brapi.org/index.php/Observation_Levels&#34;&gt;Observation Levels documentation&lt;/a&gt;. 
  """
  levelOrder: String

  """@original-field"""
  observationUnitHierarchyLevelDbId: String

  """@original-field"""
  observationUnit_ID: String
  observationUnitPosition(search: searchObservationunitpositionInput): observationunitposition
  observationUnit(search: searchObservationunitInput): observationunit

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationunitlevelrelationshipConnection {
  edges: [ObservationunitlevelrelationshipEdge]
  observationunitlevelrelationships: [observationunitlevelrelationship]
  pageInfo: pageInfo!
}

type ObservationunitlevelrelationshipEdge {
  cursor: String!
  node: observationunitlevelrelationship!
}

enum observationunitlevelrelationshipField {
  observationUnitLevelRelationshipDbId
  observationUnitPosition_ID
  levelCode
  observationUnitLevelDbId
  levelName
  levelOrder
  observationUnitHierarchyLevelDbId
  observationUnit_ID
}

input searchObservationunitlevelrelationshipInput {
  field: observationunitlevelrelationshipField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationunitlevelrelationshipInput]
}

input orderObservationunitlevelrelationshipInput {
  field: observationunitlevelrelationshipField
  order: Order
}

type observationunitposition {
  """@original-field"""
  observationUnitPositionDbId: ID

  """
  @original-field
  The type of entry for this observation unit. ex. &#34;CHECK&#34;, &#34;TEST&#34;, &#34;FILLER&#34;
  """
  entryType: String

  """
  @original-field
  The X position coordinate for an observation unit. Different systems may use different coordinate systems.
  """
  positionCoordinateX: String

  """
      @original-field
      The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#39;Location Coordinate Encoding&#39; for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#39;Location Coordinate Encoding&#39; for details 
  
  PLANTED_ROW - The physical planted row number 
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateXType: String

  """
  @original-field
  The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
  """
  positionCoordinateY: String

  """
      @original-field
      The type of positional coordinate used. Must be one of the following values 
  
  LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#39;Location Coordinate Encoding&#39; for details 
  
  LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See &#39;Location Coordinate Encoding&#39; for details 
  
  PLANTED_ROW - The physical planted row number  
  
  PLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row 
  
  GRID_ROW - The row index number of a square grid overlay 
  
  GRID_COL - The column index number of a square grid overlay 
  
  MEASURED_ROW - The distance in meters from a defined 0-th row 
  
  MEASURED_COL - The distance in meters from a defined 0-th column 
  """
  positionCoordinateYType: String

  """@original-field"""
  geoCoordinates_IDs: [String]

  """@original-field"""
  observationLevel_ID: String

  """@original-field"""
  observationLevelRelationships_IDs: [String]

  """@original-field"""
  observationUnit_ID: String
  observationLevel(search: searchObservationunitlevelInput): observationunitlevel
  observationUnit(search: searchObservationunitInput): observationunit

  """@search-request"""
  geoCoordinatesFilter(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationInput!): [geojson]

  """@search-request"""
  geoCoordinatesConnection(search: searchGeojsonInput, order: [orderGeojsonInput], pagination: paginationCursorInput!): GeojsonConnection

  """@count-request"""
  countFilteredGeoCoordinates(search: searchGeojsonInput): Int

  """@search-request"""
  observationLevelRelationshipsFilter(search: searchObservationunitlevelrelationshipInput, order: [orderObservationunitlevelrelationshipInput], pagination: paginationInput!): [observationunitlevelrelationship]

  """@search-request"""
  observationLevelRelationshipsConnection(search: searchObservationunitlevelrelationshipInput, order: [orderObservationunitlevelrelationshipInput], pagination: paginationCursorInput!): ObservationunitlevelrelationshipConnection

  """@count-request"""
  countFilteredObservationLevelRelationships(search: searchObservationunitlevelrelationshipInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationunitpositionConnection {
  edges: [ObservationunitpositionEdge]
  observationunitpositions: [observationunitposition]
  pageInfo: pageInfo!
}

type ObservationunitpositionEdge {
  cursor: String!
  node: observationunitposition!
}

enum observationunitpositionField {
  observationUnitPositionDbId
  entryType
  positionCoordinateX
  positionCoordinateXType
  positionCoordinateY
  positionCoordinateYType
  geoCoordinates_IDs
  observationLevel_ID
  observationLevelRelationships_IDs
  observationUnit_ID
}

input searchObservationunitpositionInput {
  field: observationunitpositionField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationunitpositionInput]
}

input orderObservationunitpositionInput {
  field: observationunitpositionField
  order: Order
}

type observationvariable {
  """@original-field"""
  observationVariableDbId: ID

  """
      @original-field
      Variable name (usually a short name)
  
  MIAPPE V1.1 (DM-84) Variable name - Name of the variable.
  """
  observationVariableName: String

  """
  @original-field
  The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI
  """
  observationVariablePUI: String

  """
  @original-field
  Crop name (examples: &#34;Maize&#34;, &#34;Wheat&#34;)
  """
  commonCropName: String

  """
  @original-field
  Indication of how trait is routinely used. (examples: [&#34;Trial evaluation&#34;, &#34;Nursery evaluation&#34;])
  """
  contextOfUse: String

  """
  @original-field
  Variable default value. (examples: &#34;red&#34;, &#34;2.3&#34;, etc.)
  """
  defaultValue: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Growth stage at which measurement is made (examples: &#34;flowering&#34;)
  """
  growthStage: String

  """
  @original-field
  Name of institution submitting the variable
  """
  institution: String

  """
  @original-field
  2 letter ISO 639-1 code for the language of submission of the variable.
  """
  language: String

  """
  @original-field
  Name of scientist submitting the variable.
  """
  scientist: String

  """
  @original-field
  Variable status. (examples: &#34;recommended&#34;, &#34;obsolete&#34;, &#34;legacy&#34;, etc.)
  """
  status: String

  """
  @original-field
  Timestamp when the Variable was added (ISO 8601)
  """
  submissionTimestamp: String

  """
  @original-field
  Other variable names
  """
  synonyms: String

  """@original-field"""
  variableDbId: String

  """@original-field"""
  studies_IDs: [String]

  """@original-field"""
  observations_IDs: [String]

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  method_ID: String

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  method(search: searchMethodInput): method
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@search-request"""
  studiesFilter(search: searchStudyInput, order: [orderStudyInput], pagination: paginationInput!): [study]

  """@search-request"""
  studiesConnection(search: searchStudyInput, order: [orderStudyInput], pagination: paginationCursorInput!): StudyConnection

  """@count-request"""
  countFilteredStudies(search: searchStudyInput): Int

  """@search-request"""
  observationsFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservations(search: searchObservationInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ObservationvariableConnection {
  edges: [ObservationvariableEdge]
  observationvariables: [observationvariable]
  pageInfo: pageInfo!
}

type ObservationvariableEdge {
  cursor: String!
  node: observationvariable!
}

enum observationvariableField {
  observationVariableDbId
  observationVariableName
  observationVariablePUI
  commonCropName
  contextOfUse
  defaultValue
  documentationURL
  growthStage
  institution
  language
  scientist
  status
  submissionTimestamp
  synonyms
  variableDbId
  studies_IDs
  observations_IDs
  additionalInfo_ID
  externalReferences_IDs
  method_ID
  ontologyReference_ID
  scale_ID
  trait_ID
}

input searchObservationvariableInput {
  field: observationvariableField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchObservationvariableInput]
}

input orderObservationvariableInput {
  field: observationvariableField
  order: Order
}

type ontology {
  """@original-field"""
  ontologyDbId: ID

  """
  @original-field
  Ontology&#39;s list of authors (no specific format)
  """
  authors: String

  """
  @original-field
  Ontology copyright
  """
  copyright: String

  """
  @original-field
  Human readable description of Ontology
  """
  description: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Ontology licence
  """
  licence: String

  """
  @original-field
  Ontology name
  """
  ontologyName: String

  """
  @original-field
  Ontology version (no specific format)
  """
  version: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  ontologyReference_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type OntologyConnection {
  edges: [OntologyEdge]
  ontologies: [ontology]
  pageInfo: pageInfo!
}

type OntologyEdge {
  cursor: String!
  node: ontology!
}

enum ontologyField {
  ontologyDbId
  authors
  copyright
  description
  documentationURL
  licence
  ontologyName
  version
  additionalInfo_ID
  ontologyReference_ID
}

input searchOntologyInput {
  field: ontologyField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchOntologyInput]
}

input orderOntologyInput {
  field: ontologyField
  order: Order
}

type ontologyreference {
  """@original-field"""
  ontologyReferenceDbId: ID

  """@original-field"""
  attribute_ID: String

  """@original-field"""
  variable_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """@original-field"""
  method_ID: String

  """@original-field"""
  observationVariable_ID: String

  """
  @original-field
  Ontology version (no specific format)
  """
  version: String

  """@original-field"""
  documentationLinks_IDs: [String]

  """@original-field"""
  ontology_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  attribute(search: searchAttributeInput): attribute
  variable(search: searchVariableInput): variable
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  method(search: searchMethodInput): method
  observationVariable(search: searchObservationvariableInput): observationvariable
  ontology(search: searchOntologyInput): ontology
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@search-request"""
  documentationLinksFilter(search: searchDocumentationlinkInput, order: [orderDocumentationlinkInput], pagination: paginationInput!): [documentationlink]

  """@search-request"""
  documentationLinksConnection(search: searchDocumentationlinkInput, order: [orderDocumentationlinkInput], pagination: paginationCursorInput!): DocumentationlinkConnection

  """@count-request"""
  countFilteredDocumentationLinks(search: searchDocumentationlinkInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type OntologyreferenceConnection {
  edges: [OntologyreferenceEdge]
  ontologyreferences: [ontologyreference]
  pageInfo: pageInfo!
}

type OntologyreferenceEdge {
  cursor: String!
  node: ontologyreference!
}

enum ontologyreferenceField {
  ontologyReferenceDbId
  attribute_ID
  variable_ID
  germplasmAttribute_ID
  method_ID
  observationVariable_ID
  version
  documentationLinks_IDs
  ontology_ID
  scale_ID
  trait_ID
}

input searchOntologyreferenceInput {
  field: ontologyreferenceField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchOntologyreferenceInput]
}

input orderOntologyreferenceInput {
  field: ontologyreferenceField
  order: Order
}

type ontologyterm {
  """@original-field"""
  ontologyTermDbId: ID

  """
  @original-field
  Ontology term - the label of the ontology term the termId is pointing to.
  """
  term: String

  """
  @original-field
  Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema&#39;s :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.
  """
  termURI: String

  """@original-field"""
  reference_ID: String

  """@original-field"""
  referenceSet_ID: String
  reference(search: searchReferenceInput): reference
  referenceSet(search: searchReferencesetInput): referenceset

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type OntologytermConnection {
  edges: [OntologytermEdge]
  ontologyterms: [ontologyterm]
  pageInfo: pageInfo!
}

type OntologytermEdge {
  cursor: String!
  node: ontologyterm!
}

enum ontologytermField {
  ontologyTermDbId
  term
  termURI
  reference_ID
  referenceSet_ID
}

input searchOntologytermInput {
  field: ontologytermField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchOntologytermInput]
}

input orderOntologytermInput {
  field: ontologytermField
  order: Order
}

type pagination {
  """@original-field"""
  paginationDbId: ID

  """
  @original-field
  The dimension of the matrix being paginated
  """
  dimension: String

  """
  @original-field
  the requested page number (zero indexed)
  """
  page: String

  """
  @original-field
  the maximum number of elements per page in this dimension of the matrix
  """
  pageSize: String

  """
  @original-field
  The total number of elements that are available on the server and match the requested query parameters.
  """
  totalCount: String

  """
      @original-field
      The total number of pages of elements available on the server. This should be calculated with the following formula. 
  &lt;br/&gt;totalPages = CEILING( totalCount / requested_page_size)
  """
  totalPages: String

  """@original-field"""
  alleleMatrix_ID: String
  alleleMatrix(search: searchAllelematrixInput): allelematrix

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PaginationConnection {
  edges: [PaginationEdge]
  paginations: [pagination]
  pageInfo: pageInfo!
}

type PaginationEdge {
  cursor: String!
  node: pagination!
}

enum paginationField {
  paginationDbId
  dimension
  page
  pageSize
  totalCount
  totalPages
  alleleMatrix_ID
}

input searchPaginationInput {
  field: paginationField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPaginationInput]
}

input orderPaginationInput {
  field: paginationField
  order: Order
}

type pedigreenode {
  """@original-field"""
  pedigreeNodeDbId: ID

  """
  @original-field
  The year the parents were originally crossed
  """
  crossingYear: String

  """
  @original-field
  Human readable name used for display purposes
  """
  defaultDisplayName: String

  """
  @original-field
  The code representing the family of this germplasm
  """
  familyCode: String

  """
  @original-field
  The string representation of the pedigree for this germplasm in PURDY notation
  """
  pedigreeString: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  breedingMethod_ID: String

  """@original-field"""
  crossingProject_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  parents_IDs: [String]

  """@original-field"""
  progeny_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  breedingMethod(search: searchBreedingmethodInput): breedingmethod
  crossingProject(search: searchCrossingprojectInput): crossingproject
  germplasm(search: searchGermplasmInput): germplasm

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  parentsFilter(search: searchGermplasmparentInput, order: [orderGermplasmparentInput], pagination: paginationInput!): [germplasmparent]

  """@search-request"""
  parentsConnection(search: searchGermplasmparentInput, order: [orderGermplasmparentInput], pagination: paginationCursorInput!): GermplasmparentConnection

  """@count-request"""
  countFilteredParents(search: searchGermplasmparentInput): Int

  """@search-request"""
  progenyFilter(search: searchGermplasmchildInput, order: [orderGermplasmchildInput], pagination: paginationInput!): [germplasmchild]

  """@search-request"""
  progenyConnection(search: searchGermplasmchildInput, order: [orderGermplasmchildInput], pagination: paginationCursorInput!): GermplasmchildConnection

  """@count-request"""
  countFilteredProgeny(search: searchGermplasmchildInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PedigreenodeConnection {
  edges: [PedigreenodeEdge]
  pedigreenodes: [pedigreenode]
  pageInfo: pageInfo!
}

type PedigreenodeEdge {
  cursor: String!
  node: pedigreenode!
}

enum pedigreenodeField {
  pedigreeNodeDbId
  crossingYear
  defaultDisplayName
  familyCode
  pedigreeString
  additionalInfo_ID
  breedingMethod_ID
  crossingProject_ID
  externalReferences_IDs
  germplasm_ID
  parents_IDs
  progeny_IDs
}

input searchPedigreenodeInput {
  field: pedigreenodeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPedigreenodeInput]
}

input orderPedigreenodeInput {
  field: pedigreenodeField
  order: Order
}

type person {
  """@original-field"""
  personDbId: ID

  """
  @original-field
  description of this person
  """
  description: String

  """
  @original-field
  email address for this person
  """
  emailAddress: String

  """
  @original-field
  Persons first name
  """
  firstName: String

  """
  @original-field
  Persons last name
  """
  lastName: String

  """
  @original-field
  physical address of this person
  """
  mailingAddress: String

  """
  @original-field
  Persons middle name
  """
  middleName: String

  """
  @original-field
  phone number of this person
  """
  phoneNumber: String

  """
  @original-field
  A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.
  """
  userID: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  lists_IDs: [String]

  """@original-field"""
  programs_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  listsFilter(search: searchListInput, order: [orderListInput], pagination: paginationInput!): [list]

  """@search-request"""
  listsConnection(search: searchListInput, order: [orderListInput], pagination: paginationCursorInput!): ListConnection

  """@count-request"""
  countFilteredLists(search: searchListInput): Int

  """@search-request"""
  programsFilter(search: searchProgramInput, order: [orderProgramInput], pagination: paginationInput!): [program]

  """@search-request"""
  programsConnection(search: searchProgramInput, order: [orderProgramInput], pagination: paginationCursorInput!): ProgramConnection

  """@count-request"""
  countFilteredPrograms(search: searchProgramInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PersonConnection {
  edges: [PersonEdge]
  people: [person]
  pageInfo: pageInfo!
}

type PersonEdge {
  cursor: String!
  node: person!
}

enum personField {
  personDbId
  description
  emailAddress
  firstName
  lastName
  mailingAddress
  middleName
  phoneNumber
  userID
  additionalInfo_ID
  externalReferences_IDs
  lists_IDs
  programs_IDs
}

input searchPersonInput {
  field: personField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPersonInput]
}

input orderPersonInput {
  field: personField
  order: Order
}

type plannedcross {
  """@original-field"""
  plannedCrossDbId: ID

  """
  @original-field
  the human readable name for a planned cross
  """
  plannedCrossName: String

  """
  @original-field
  The status of this planned cross. Is it waiting to be performed (&#39;TODO&#39;), has it been completed successfully (&#39;DONE&#39;), or has it not been done on purpose (&#39;SKIPPED&#39;).
  """
  status: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  crossingProject_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  crosses_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  crossingProject(search: searchCrossingprojectInput): crossingproject

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  crossesFilter(search: searchCrossInput, order: [orderCrossInput], pagination: paginationInput!): [cross]

  """@search-request"""
  crossesConnection(search: searchCrossInput, order: [orderCrossInput], pagination: paginationCursorInput!): CrossConnection

  """@count-request"""
  countFilteredCrosses(search: searchCrossInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PlannedcrossConnection {
  edges: [PlannedcrossEdge]
  plannedcrosses: [plannedcross]
  pageInfo: pageInfo!
}

type PlannedcrossEdge {
  cursor: String!
  node: plannedcross!
}

enum plannedcrossField {
  plannedCrossDbId
  plannedCrossName
  status
  additionalInfo_ID
  crossingProject_ID
  externalReferences_IDs
  crosses_IDs
}

input searchPlannedcrossInput {
  field: plannedcrossField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPlannedcrossInput]
}

input orderPlannedcrossInput {
  field: plannedcrossField
  order: Order
}

type plate {
  """@original-field"""
  plateDbId: ID

  """
  @original-field
  A unique identifier physically attached to a `Plate`
  """
  plateBarcode: String

  """
  @original-field
  Enum for plate formats, usually &#34;PLATE_96&#34; for a 96 well plate or &#34;TUBES&#34; for plateless format
  """
  plateFormat: String

  """
  @original-field
  A human readable name for a `Plate`
  """
  plateName: String

  """
  @original-field
  The type of samples taken. ex. &#39;DNA&#39;, &#39;RNA&#39;, &#39;Tissue&#39;, etc
  """
  sampleType: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  program_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  trial_ID: String

  """@original-field"""
  samples_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  program(search: searchProgramInput): program
  study(search: searchStudyInput): study
  trial(search: searchTrialInput): trial

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PlateConnection {
  edges: [PlateEdge]
  plates: [plate]
  pageInfo: pageInfo!
}

type PlateEdge {
  cursor: String!
  node: plate!
}

enum plateField {
  plateDbId
  plateBarcode
  plateFormat
  plateName
  sampleType
  additionalInfo_ID
  externalReferences_IDs
  program_ID
  study_ID
  trial_ID
  samples_IDs
}

input searchPlateInput {
  field: plateField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPlateInput]
}

input orderPlateInput {
  field: plateField
  order: Order
}

type pollinationevent {
  """@original-field"""
  pollinationEventDbId: ID

  """
  @original-field
  The unique identifier for this pollination event
  """
  pollinationNumber: String

  """
  @original-field
  True if the pollination was successful
  """
  pollinationSuccessful: String

  """
  @original-field
  The timestamp when the pollination took place
  """
  pollinationTimeStamp: String

  """@original-field"""
  cross_ID: String
  cross(search: searchCrossInput): cross

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PollinationeventConnection {
  edges: [PollinationeventEdge]
  pollinationevents: [pollinationevent]
  pageInfo: pageInfo!
}

type PollinationeventEdge {
  cursor: String!
  node: pollinationevent!
}

enum pollinationeventField {
  pollinationEventDbId
  pollinationNumber
  pollinationSuccessful
  pollinationTimeStamp
  cross_ID
}

input searchPollinationeventInput {
  field: pollinationeventField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPollinationeventInput]
}

input orderPollinationeventInput {
  field: pollinationeventField
  order: Order
}

type program {
  """@original-field"""
  programDbId: ID

  """
  @original-field
  A shortened version of the human readable name for a Program
  """
  abbreviation: String

  """
  @original-field
  Common name for the crop which this program is for
  """
  commonCropName: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Information describing the grant or funding source for this program
  """
  fundingInformation: String

  """
  @original-field
  The primary objective of the program
  """
  objective: String

  """
  @original-field
  Human readable name of the program
  """
  programName: String

  """
      @original-field
      The type of program entity this object represents
  &lt;br/&gt; &#39;STANDARD&#39; represents a standard, permanent breeding program
  &lt;br/&gt; &#39;PROJECT&#39; represents a short term project, usually with a set time limit based on funding   
  """
  programType: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  leadPerson_ID: String

  """@original-field"""
  trials_IDs: [String]

  """@original-field"""
  plates_IDs: [String]

  """@original-field"""
  samples_IDs: [String]

  """@original-field"""
  crossingProjects_IDs: [String]

  """@original-field"""
  seedLots_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  leadPerson(search: searchPersonInput): person

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  trialsFilter(search: searchTrialInput, order: [orderTrialInput], pagination: paginationInput!): [trial]

  """@search-request"""
  trialsConnection(search: searchTrialInput, order: [orderTrialInput], pagination: paginationCursorInput!): TrialConnection

  """@count-request"""
  countFilteredTrials(search: searchTrialInput): Int

  """@search-request"""
  platesFilter(search: searchPlateInput, order: [orderPlateInput], pagination: paginationInput!): [plate]

  """@search-request"""
  platesConnection(search: searchPlateInput, order: [orderPlateInput], pagination: paginationCursorInput!): PlateConnection

  """@count-request"""
  countFilteredPlates(search: searchPlateInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@search-request"""
  crossingProjectsFilter(search: searchCrossingprojectInput, order: [orderCrossingprojectInput], pagination: paginationInput!): [crossingproject]

  """@search-request"""
  crossingProjectsConnection(search: searchCrossingprojectInput, order: [orderCrossingprojectInput], pagination: paginationCursorInput!): CrossingprojectConnection

  """@count-request"""
  countFilteredCrossingProjects(search: searchCrossingprojectInput): Int

  """@search-request"""
  seedLotsFilter(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationInput!): [seedlot]

  """@search-request"""
  seedLotsConnection(search: searchSeedlotInput, order: [orderSeedlotInput], pagination: paginationCursorInput!): SeedlotConnection

  """@count-request"""
  countFilteredSeedLots(search: searchSeedlotInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ProgramConnection {
  edges: [ProgramEdge]
  programs: [program]
  pageInfo: pageInfo!
}

type ProgramEdge {
  cursor: String!
  node: program!
}

enum programField {
  programDbId
  abbreviation
  commonCropName
  documentationURL
  fundingInformation
  objective
  programName
  programType
  additionalInfo_ID
  externalReferences_IDs
  leadPerson_ID
  trials_IDs
  plates_IDs
  samples_IDs
  crossingProjects_IDs
  seedLots_IDs
  observationUnits_IDs
}

input searchProgramInput {
  field: programField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchProgramInput]
}

input orderProgramInput {
  field: programField
  order: Order
}

type publication {
  """@original-field"""
  publicationDbId: ID

  """@original-field"""
  publicationPUI: String

  """@original-field"""
  publicationReference: String

  """@original-field"""
  trial_ID: String
  trial(search: searchTrialInput): trial

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type PublicationConnection {
  edges: [PublicationEdge]
  publications: [publication]
  pageInfo: pageInfo!
}

type PublicationEdge {
  cursor: String!
  node: publication!
}

enum publicationField {
  publicationDbId
  publicationPUI
  publicationReference
  trial_ID
}

input searchPublicationInput {
  field: publicationField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchPublicationInput]
}

input orderPublicationInput {
  field: publicationField
  order: Order
}

type reference {
  """@original-field"""
  referenceDbId: ID

  """
  @original-field
  Common name for the crop
  """
  commonCropName: String

  """
  @original-field
  A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.
  """
  isDerived: String

  """
  @original-field
  The length of this `Reference` sequence.
  """
  length: String

  """
  @original-field
  The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).
  """
  md5checksum: String

  """
  @original-field
  The human readable name of a `Reference` within a `ReferenceSet`.
  """
  referenceName: String

  """
  @original-field
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.
  """
  sourceAccessions: String

  """
  @original-field
  The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from.
  """
  sourceDivergence: String

  """
  @original-field
  The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.
  """
  sourceURI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  sourceGermplasm_IDs: [String]

  """@original-field"""
  species_ID: String

  """@original-field"""
  variants_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  referenceSet(search: searchReferencesetInput): referenceset
  species(search: searchOntologytermInput): ontologyterm

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  sourceGermplasmFilter(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationInput!): [germplasm]

  """@search-request"""
  sourceGermplasmConnection(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationCursorInput!): GermplasmConnection

  """@count-request"""
  countFilteredSourceGermplasm(search: searchGermplasmInput): Int

  """@search-request"""
  variantsFilter(search: searchVariantInput, order: [orderVariantInput], pagination: paginationInput!): [variant]

  """@search-request"""
  variantsConnection(search: searchVariantInput, order: [orderVariantInput], pagination: paginationCursorInput!): VariantConnection

  """@count-request"""
  countFilteredVariants(search: searchVariantInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ReferenceConnection {
  edges: [ReferenceEdge]
  references: [reference]
  pageInfo: pageInfo!
}

type ReferenceEdge {
  cursor: String!
  node: reference!
}

enum referenceField {
  referenceDbId
  commonCropName
  isDerived
  length
  md5checksum
  referenceName
  sourceAccessions
  sourceDivergence
  sourceURI
  additionalInfo_ID
  externalReferences_IDs
  referenceSet_ID
  sourceGermplasm_IDs
  species_ID
  variants_IDs
}

input searchReferenceInput {
  field: referenceField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchReferenceInput]
}

input orderReferenceInput {
  field: referenceField
  order: Order
}

type referenceset {
  """@original-field"""
  referenceSetDbId: ID

  """
  @original-field
  The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.
  """
  assemblyPUI: String

  """
  @original-field
  Common name for the crop
  """
  commonCropName: String

  """
  @original-field
  Optional free text description of this reference set.
  """
  description: String

  """
  @original-field
  A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).
  """
  isDerived: String

  """
      @original-field
      Order-independent MD5 checksum which identifies this `ReferenceSet`.
  
  To compute this checksum, make a list of `Reference.md5checksum` for all
  `Reference` s in this set. Then sort that list, and take the MD5 hash of
  all the strings concatenated together. Express the hash as a lower-case
  hexadecimal string.
  """
  md5checksum: String

  """
  @original-field
  The human readable name of a ReferenceSet
  """
  referenceSetName: String

  """
  @original-field
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.
  """
  sourceAccessions: String

  """
  @original-field
  Specifies a FASTA format file/string.
  """
  sourceURI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  sourceGermplasm_IDs: [String]

  """@original-field"""
  species_ID: String

  """@original-field"""
  references_ID: String

  """@original-field"""
  variants_IDs: [String]

  """@original-field"""
  variantSets_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  species(search: searchOntologytermInput): ontologyterm
  references(search: searchReferenceInput): reference

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  sourceGermplasmFilter(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationInput!): [germplasm]

  """@search-request"""
  sourceGermplasmConnection(search: searchGermplasmInput, order: [orderGermplasmInput], pagination: paginationCursorInput!): GermplasmConnection

  """@count-request"""
  countFilteredSourceGermplasm(search: searchGermplasmInput): Int

  """@search-request"""
  variantsFilter(search: searchVariantInput, order: [orderVariantInput], pagination: paginationInput!): [variant]

  """@search-request"""
  variantsConnection(search: searchVariantInput, order: [orderVariantInput], pagination: paginationCursorInput!): VariantConnection

  """@count-request"""
  countFilteredVariants(search: searchVariantInput): Int

  """@search-request"""
  variantSetsFilter(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationInput!): [variantset]

  """@search-request"""
  variantSetsConnection(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationCursorInput!): VariantsetConnection

  """@count-request"""
  countFilteredVariantSets(search: searchVariantsetInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ReferencesetConnection {
  edges: [ReferencesetEdge]
  referencesets: [referenceset]
  pageInfo: pageInfo!
}

type ReferencesetEdge {
  cursor: String!
  node: referenceset!
}

enum referencesetField {
  referenceSetDbId
  assemblyPUI
  commonCropName
  description
  isDerived
  md5checksum
  referenceSetName
  sourceAccessions
  sourceURI
  additionalInfo_ID
  externalReferences_IDs
  sourceGermplasm_IDs
  species_ID
  references_ID
  variants_IDs
  variantSets_IDs
}

input searchReferencesetInput {
  field: referencesetField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchReferencesetInput]
}

input orderReferencesetInput {
  field: referencesetField
  order: Order
}

type sample {
  """@original-field"""
  sampleDbId: ID

  """
  @original-field
  The Column identifier for this `Sample` location in the `Plate`
  """
  column: String

  """
  @original-field
  The Row identifier for this `Sample` location in the `Plate`
  """
  row: String

  """
  @original-field
  A unique identifier physically attached to the `Sample`
  """
  sampleBarcode: String

  """
      @original-field
      Description of a `Sample`
  &lt;br&gt;MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.
  """
  sampleDescription: String

  """
  @original-field
  The ID which uniquely identifies a group of `Samples`
  """
  sampleGroupId: String

  """
  @original-field
  The human readable name of the `Sample`
  """
  sampleName: String

  """
      @original-field
      A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)
  &lt;br&gt; MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. 
  """
  samplePUI: String

  """
      @original-field
      The date and time a `Sample` was collected from the field
  &lt;br&gt; MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested
  """
  sampleTimestamp: String

  """
  @original-field
  The type of `Sample` taken. ex. &#39;DNA&#39;, &#39;RNA&#39;, &#39;Tissue&#39;, etc
  """
  sampleType: String

  """
  @original-field
  The name or identifier of the entity which took the `Sample` from the field
  """
  takenBy: String

  """
      @original-field
      The type of tissue sampled. ex. &#39;Leaf&#39;, &#39;Root&#39;, etc.
  &lt;br&gt; MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).
  """
  tissueType: String

  """
  @original-field
  The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.
  """
  well: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  callSets_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  germplasm_ID: String

  """@original-field"""
  observationUnit_ID: String

  """@original-field"""
  plate_ID: String

  """@original-field"""
  program_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  trial_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  germplasm(search: searchGermplasmInput): germplasm
  observationUnit(search: searchObservationunitInput): observationunit
  plate(search: searchPlateInput): plate
  program(search: searchProgramInput): program
  study(search: searchStudyInput): study
  trial(search: searchTrialInput): trial

  """@search-request"""
  callSetsFilter(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationInput!): [callset]

  """@search-request"""
  callSetsConnection(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationCursorInput!): CallsetConnection

  """@count-request"""
  countFilteredCallSets(search: searchCallsetInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type SampleConnection {
  edges: [SampleEdge]
  samples: [sample]
  pageInfo: pageInfo!
}

type SampleEdge {
  cursor: String!
  node: sample!
}

enum sampleField {
  sampleDbId
  column
  row
  sampleBarcode
  sampleDescription
  sampleGroupId
  sampleName
  samplePUI
  sampleTimestamp
  sampleType
  takenBy
  tissueType
  well
  additionalInfo_ID
  callSets_IDs
  externalReferences_IDs
  germplasm_ID
  observationUnit_ID
  plate_ID
  program_ID
  study_ID
  trial_ID
}

input searchSampleInput {
  field: sampleField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchSampleInput]
}

input orderSampleInput {
  field: sampleField
  order: Order
}

type scale {
  """@original-field"""
  scaleDbId: ID

  """@original-field"""
  attribute_ID: String

  """@original-field"""
  variable_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """@original-field"""
  observationVariable_ID: String

  """
      @original-field
      &lt;p&gt;Class of the scale, entries can be&lt;/p&gt;
  &lt;p&gt;&#34;Code&#34; -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. &#34;75VD&#34; means &#34;75 %&#34; of the plant is infected and the plant is very delayed.&lt;/p&gt;
  &lt;p&gt;&#34;Date&#34; - The date class is for events expressed in a time format, See ISO 8601&lt;/p&gt;
  &lt;p&gt;&#34;Duration&#34; - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months&lt;/p&gt;
  &lt;p&gt;&#34;Nominal&#34; - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories&lt;/p&gt;
  &lt;p&gt;&#34;Numerical&#34; - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches&lt;/p&gt;
  &lt;p&gt;&#34;Ordinal&#34; - Ordinal scales are scales composed of ordered categories&lt;/p&gt;
  &lt;p&gt;&#34;Text&#34; - A free text is used to express the trait.&lt;/p&gt;
  """
  dataType: String

  """
  @original-field
  For numerical, number of decimal places to be reported
  """
  decimalPlaces: String

  """
      @original-field
      Name of the scale
  &lt;br/&gt;MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable
  """
  scaleName: String

  """
  @original-field
  The Permanent Unique Identifier of a Scale, usually in the form of a URI
  """
  scalePUI: String

  """
      @original-field
      This field can be used to describe the units used for this scale. This should be the abbreviated 
  form of the units, intended to be displayed with every value using this scale. Usually this only 
  applies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.
  """
  units: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  validValues_ID: String
  attribute(search: searchAttributeInput): attribute
  variable(search: searchVariableInput): variable
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  observationVariable(search: searchObservationvariableInput): observationvariable
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  validValues(search: searchValidvaluesInput): validvalues

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ScaleConnection {
  edges: [ScaleEdge]
  scales: [scale]
  pageInfo: pageInfo!
}

type ScaleEdge {
  cursor: String!
  node: scale!
}

enum scaleField {
  scaleDbId
  attribute_ID
  variable_ID
  germplasmAttribute_ID
  observationVariable_ID
  dataType
  decimalPlaces
  scaleName
  scalePUI
  units
  additionalInfo_ID
  externalReferences_IDs
  ontologyReference_ID
  validValues_ID
}

input searchScaleInput {
  field: scaleField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchScaleInput]
}

input orderScaleInput {
  field: scaleField
  order: Order
}

type season {
  """@original-field"""
  seasonDbId: ID

  """
  @original-field
  Name of the season. ex. &#39;Spring&#39;, &#39;Q2&#39;, &#39;Season A&#39;, etc.
  """
  seasonName: String

  """
  @original-field
  The 4 digit year of the season.
  """
  year: String

  """@original-field"""
  observation_IDs: [String]

  """@search-request"""
  observationFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservation(search: searchObservationInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type SeasonConnection {
  edges: [SeasonEdge]
  seasons: [season]
  pageInfo: pageInfo!
}

type SeasonEdge {
  cursor: String!
  node: season!
}

enum seasonField {
  seasonDbId
  seasonName
  year
  observation_IDs
}

input searchSeasonInput {
  field: seasonField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchSeasonInput]
}

input orderSeasonInput {
  field: seasonField
  order: Order
}

type seedlot {
  """@original-field"""
  seedLotDbId: ID

  """
  @original-field
  The current balance of the amount of material in a SeedLot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).
  """
  amount: String

  """
  @original-field
  The time stamp for when this seed lot was created
  """
  createdDate: String

  """
  @original-field
  The timestamp for the last update to this Seed Lot (including transactions)
  """
  lastUpdated: String

  """
  @original-field
  A general description of this Seed Lot
  """
  seedLotDescription: String

  """
  @original-field
  A human readable name for this Seed Lot
  """
  seedLotName: String

  """
  @original-field
  The description of the source where this material was originally collected (wild, nursery, etc)
  """
  sourceCollection: String

  """
  @original-field
  Description the storage location
  """
  storageLocation: String

  """
  @original-field
  A description of the things being counted in a SeedLot (seeds, bulbs, kg, tree, etc)
  """
  units: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  contentMixture_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  location_ID: String

  """@original-field"""
  program_ID: String

  """@original-field"""
  fromSeedLotTransactions_IDs: [String]

  """@original-field"""
  toSeedLotTransactions_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  location(search: searchLocationInput): location
  program(search: searchProgramInput): program

  """@search-request"""
  contentMixtureFilter(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationInput!): [contentmixture]

  """@search-request"""
  contentMixtureConnection(search: searchContentmixtureInput, order: [orderContentmixtureInput], pagination: paginationCursorInput!): ContentmixtureConnection

  """@count-request"""
  countFilteredContentMixture(search: searchContentmixtureInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  fromSeedLotTransactionsFilter(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationInput!): [seedlottransaction]

  """@search-request"""
  fromSeedLotTransactionsConnection(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationCursorInput!): SeedlottransactionConnection

  """@count-request"""
  countFilteredFromSeedLotTransactions(search: searchSeedlottransactionInput): Int

  """@search-request"""
  toSeedLotTransactionsFilter(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationInput!): [seedlottransaction]

  """@search-request"""
  toSeedLotTransactionsConnection(search: searchSeedlottransactionInput, order: [orderSeedlottransactionInput], pagination: paginationCursorInput!): SeedlottransactionConnection

  """@count-request"""
  countFilteredToSeedLotTransactions(search: searchSeedlottransactionInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type SeedlotConnection {
  edges: [SeedlotEdge]
  seedlots: [seedlot]
  pageInfo: pageInfo!
}

type SeedlotEdge {
  cursor: String!
  node: seedlot!
}

enum seedlotField {
  seedLotDbId
  amount
  createdDate
  lastUpdated
  seedLotDescription
  seedLotName
  sourceCollection
  storageLocation
  units
  additionalInfo_ID
  contentMixture_IDs
  externalReferences_IDs
  location_ID
  program_ID
  fromSeedLotTransactions_IDs
  toSeedLotTransactions_IDs
  observationUnits_IDs
}

input searchSeedlotInput {
  field: seedlotField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchSeedlotInput]
}

input orderSeedlotInput {
  field: seedlotField
  order: Order
}

type seedlottransaction {
  """@original-field"""
  transactionDbId: ID

  """
  @original-field
  The number of units being transferred between SeedLots. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).
  """
  amount: String

  """
  @original-field
  A general description of this Seed Lot Transaction
  """
  transactionDescription: String

  """
  @original-field
  The time stamp for when the transaction occurred
  """
  transactionTimestamp: String

  """
  @original-field
  A description of the things being transferred between SeedLots in a transaction (seeds, bulbs, kg, etc)
  """
  units: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  fromSeedLot_ID: String

  """@original-field"""
  toSeedLot_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  fromSeedLot(search: searchSeedlotInput): seedlot
  toSeedLot(search: searchSeedlotInput): seedlot

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type SeedlottransactionConnection {
  edges: [SeedlottransactionEdge]
  seedlottransactions: [seedlottransaction]
  pageInfo: pageInfo!
}

type SeedlottransactionEdge {
  cursor: String!
  node: seedlottransaction!
}

enum seedlottransactionField {
  transactionDbId
  amount
  transactionDescription
  transactionTimestamp
  units
  additionalInfo_ID
  externalReferences_IDs
  fromSeedLot_ID
  toSeedLot_ID
}

input searchSeedlottransactionInput {
  field: seedlottransactionField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchSeedlottransactionInput]
}

input orderSeedlottransactionInput {
  field: seedlottransactionField
  order: Order
}

type storagetype {
  """@original-field"""
  storageTypeDbId: ID

  """
      @original-field
      The 2 digit code representing the type of storage this germplasm is kept in at a genebank. 
  
  MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 
  
  10) Seed collection 
  11) Short term 
  12) Medium term 
  13) Long term 
  20) Field collection 
  30) In vitro collection 
  40) Cryo-preserved collection 
  50) DNA collection 
  99) Other (elaborate in REMARKS field)
  """
  code: String

  """
  @original-field
  A supplemental text description of the storage type
  """
  description: String

  """@original-field"""
  germplasm_ID: String
  germplasm(search: searchGermplasmInput): germplasm

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type StoragetypeConnection {
  edges: [StoragetypeEdge]
  storagetypes: [storagetype]
  pageInfo: pageInfo!
}

type StoragetypeEdge {
  cursor: String!
  node: storagetype!
}

enum storagetypeField {
  storageTypeDbId
  code
  description
  germplasm_ID
}

input searchStoragetypeInput {
  field: storagetypeField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchStoragetypeInput]
}

input orderStoragetypeInput {
  field: storagetypeField
  order: Order
}

type study {
  """@original-field"""
  studyDbId: ID

  """
  @original-field
  A flag to indicate if a Study is currently active and ongoing
  """
  active: String

  """
  @original-field
  Common name for the crop associated with this study
  """
  commonCropName: String

  """
  @original-field
  MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.
  """
  culturalPractices: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
      @original-field
      The date the study ends
  
  MIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended
  """
  endDate: String

  """
  @original-field
  The usage license associated with the study data
  """
  license: String

  """
  @original-field
  MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.
  """
  observationUnitsDescription: String

  """
  @original-field
  List of seasons over which this study was performed.
  """
  seasons: String

  """
      @original-field
      The date this study started
  
  MIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started
  """
  startDate: String

  """
  @original-field
  A short human readable code for a study
  """
  studyCode: String

  """
      @original-field
      The description of this study
  
  MIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study
  """
  studyDescription: String

  """
      @original-field
      The human readable name for a study
  
  MIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study
  """
  studyName: String

  """
  @original-field
  A permanent unique identifier associated with this study data. For example, a URI or DOI
  """
  studyPUI: String

  """
  @original-field
  The type of study being performed. ex. &#34;Yield Trial&#34;, etc
  """
  studyType: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  contacts_IDs: [String]

  """@original-field"""
  environmentParameters_IDs: [String]

  """@original-field"""
  experimentalDesign_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  growthFacility_ID: String

  """@original-field"""
  lastUpdate_ID: String

  """@original-field"""
  location_ID: String

  """@original-field"""
  observationLevels_IDs: [String]

  """@original-field"""
  observationVariables_IDs: [String]

  """@original-field"""
  trial_ID: String

  """@original-field"""
  callSets_IDs: [String]

  """@original-field"""
  plates_IDs: [String]

  """@original-field"""
  samples_IDs: [String]

  """@original-field"""
  variantSets_IDs: [String]

  """@original-field"""
  events_IDs: [String]

  """@original-field"""
  observations_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  experimentalDesign(search: searchExperimentaldesignInput): experimentaldesign
  growthFacility(search: searchGrowthfacilityInput): growthfacility
  lastUpdate(search: searchLastupdateInput): lastupdate
  location(search: searchLocationInput): location
  trial(search: searchTrialInput): trial

  """@search-request"""
  contactsFilter(search: searchContactInput, order: [orderContactInput], pagination: paginationInput!): [contact]

  """@search-request"""
  contactsConnection(search: searchContactInput, order: [orderContactInput], pagination: paginationCursorInput!): ContactConnection

  """@count-request"""
  countFilteredContacts(search: searchContactInput): Int

  """@search-request"""
  environmentParametersFilter(search: searchEnvironmentparametersInput, order: [orderEnvironmentparametersInput], pagination: paginationInput!): [environmentparameters]

  """@search-request"""
  environmentParametersConnection(search: searchEnvironmentparametersInput, order: [orderEnvironmentparametersInput], pagination: paginationCursorInput!): EnvironmentparametersConnection

  """@count-request"""
  countFilteredEnvironmentParameters(search: searchEnvironmentparametersInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  observationLevelsFilter(search: searchObservationunithierarchylevelInput, order: [orderObservationunithierarchylevelInput], pagination: paginationInput!): [observationunithierarchylevel]

  """@search-request"""
  observationLevelsConnection(search: searchObservationunithierarchylevelInput, order: [orderObservationunithierarchylevelInput], pagination: paginationCursorInput!): ObservationunithierarchylevelConnection

  """@count-request"""
  countFilteredObservationLevels(search: searchObservationunithierarchylevelInput): Int

  """@search-request"""
  observationVariablesFilter(search: searchObservationvariableInput, order: [orderObservationvariableInput], pagination: paginationInput!): [observationvariable]

  """@search-request"""
  observationVariablesConnection(search: searchObservationvariableInput, order: [orderObservationvariableInput], pagination: paginationCursorInput!): ObservationvariableConnection

  """@count-request"""
  countFilteredObservationVariables(search: searchObservationvariableInput): Int

  """@search-request"""
  callSetsFilter(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationInput!): [callset]

  """@search-request"""
  callSetsConnection(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationCursorInput!): CallsetConnection

  """@count-request"""
  countFilteredCallSets(search: searchCallsetInput): Int

  """@search-request"""
  platesFilter(search: searchPlateInput, order: [orderPlateInput], pagination: paginationInput!): [plate]

  """@search-request"""
  platesConnection(search: searchPlateInput, order: [orderPlateInput], pagination: paginationCursorInput!): PlateConnection

  """@count-request"""
  countFilteredPlates(search: searchPlateInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@search-request"""
  variantSetsFilter(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationInput!): [variantset]

  """@search-request"""
  variantSetsConnection(search: searchVariantsetInput, order: [orderVariantsetInput], pagination: paginationCursorInput!): VariantsetConnection

  """@count-request"""
  countFilteredVariantSets(search: searchVariantsetInput): Int

  """@search-request"""
  eventsFilter(search: searchEventInput, order: [orderEventInput], pagination: paginationInput!): [event]

  """@search-request"""
  eventsConnection(search: searchEventInput, order: [orderEventInput], pagination: paginationCursorInput!): EventConnection

  """@count-request"""
  countFilteredEvents(search: searchEventInput): Int

  """@search-request"""
  observationsFilter(search: searchObservationInput, order: [orderObservationInput], pagination: paginationInput!): [observation]

  """@search-request"""
  observationsConnection(search: searchObservationInput, order: [orderObservationInput], pagination: paginationCursorInput!): ObservationConnection

  """@count-request"""
  countFilteredObservations(search: searchObservationInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type StudyConnection {
  edges: [StudyEdge]
  studies: [study]
  pageInfo: pageInfo!
}

type StudyEdge {
  cursor: String!
  node: study!
}

enum studyField {
  studyDbId
  active
  commonCropName
  culturalPractices
  documentationURL
  endDate
  license
  observationUnitsDescription
  seasons
  startDate
  studyCode
  studyDescription
  studyName
  studyPUI
  studyType
  additionalInfo_ID
  contacts_IDs
  environmentParameters_IDs
  experimentalDesign_ID
  externalReferences_IDs
  growthFacility_ID
  lastUpdate_ID
  location_ID
  observationLevels_IDs
  observationVariables_IDs
  trial_ID
  callSets_IDs
  plates_IDs
  samples_IDs
  variantSets_IDs
  events_IDs
  observations_IDs
  observationUnits_IDs
}

input searchStudyInput {
  field: studyField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchStudyInput]
}

input orderStudyInput {
  field: studyField
  order: Order
}

type synonym {
  """@original-field"""
  synonymDbId: ID

  """
  @original-field
  Alternative name or ID used to reference this germplasm
  """
  synonym: String

  """
  @original-field
  A descriptive classification for this synonym
  """
  type: String

  """@original-field"""
  germplasm_ID: String
  germplasm(search: searchGermplasmInput): germplasm

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type SynonymConnection {
  edges: [SynonymEdge]
  synonyms: [synonym]
  pageInfo: pageInfo!
}

type SynonymEdge {
  cursor: String!
  node: synonym!
}

enum synonymField {
  synonymDbId
  synonym
  type
  germplasm_ID
}

input searchSynonymInput {
  field: synonymField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchSynonymInput]
}

input orderSynonymInput {
  field: synonymField
  order: Order
}

type taxonid {
  """@original-field"""
  taxonDbId: ID

  """
  @original-field
  The human readable name of the taxonomy provider
  """
  sourceName: String

  """@original-field"""
  germplasm_ID: String
  germplasm(search: searchGermplasmInput): germplasm

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type TaxonidConnection {
  edges: [TaxonidEdge]
  taxonids: [taxonid]
  pageInfo: pageInfo!
}

type TaxonidEdge {
  cursor: String!
  node: taxonid!
}

enum taxonidField {
  taxonDbId
  sourceName
  germplasm_ID
}

input searchTaxonidInput {
  field: taxonidField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchTaxonidInput]
}

input orderTaxonidInput {
  field: taxonidField
  order: Order
}

type trait {
  """@original-field"""
  traitDbId: ID

  """@original-field"""
  variable_ID: String

  """@original-field"""
  germplasmAttribute_ID: String

  """@original-field"""
  observationVariable_ID: String

  """
  @original-field
  A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.
  """
  alternativeAbbreviations: String

  """
  @original-field
  A trait can be decomposed as &#34;Trait&#34; = &#34;Entity&#34; + &#34;Attribute&#34;, the attribute is the observed feature (or characteristic) of the entity e.g., for &#34;grain colour&#34;, attribute = &#34;colour&#34;
  """
  attribute: String

  """
      @original-field
      The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI
  &lt;br/&gt;A trait can be decomposed as &#34;Trait&#34; = &#34;Entity&#34; + &#34;Attribute&#34;, the attribute is the observed feature (or characteristic) of the entity e.g., for &#34;grain colour&#34;, attribute = &#34;colour&#34;
  """
  attributePUI: String

  """
  @original-field
  A trait can be decomposed as &#34;Trait&#34; = &#34;Entity&#34; + &#34;Attribute&#34;, the entity is the part of the plant that the trait refers to e.g., for &#34;grain colour&#34;, entity = &#34;grain&#34;
  """
  entity: String

  """
      @original-field
      The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI
  &lt;br/&gt;A Trait can be decomposed as &#34;Trait&#34; = &#34;Entity&#34; + &#34;Attribute&#34;, the Entity is the part of the plant that the trait refers to e.g., for &#34;grain colour&#34;, entity = &#34;grain&#34; 
  """
  entityPUI: String

  """
  @original-field
  A shortened version of the human readable name for a Trait
  """
  mainAbbreviation: String

  """
  @original-field
  Trait status (examples: &#34;recommended&#34;, &#34;obsolete&#34;, &#34;legacy&#34;, etc.)
  """
  status: String

  """
  @original-field
  Other trait names
  """
  synonyms: String

  """
      @original-field
      A classification to describe the type of trait and the context it should be considered in.
  &lt;br/&gt; examples- &#34;morphological&#34;, &#34;phenological&#34;, &#34;agronomical&#34;, &#34;physiological&#34;, &#34;abiotic stress&#34;, &#34;biotic stress&#34;, &#34;biochemical&#34;, &#34;quality traits&#34;, &#34;fertility&#34;, etc.
  """
  traitClass: String

  """
  @original-field
  The description of a trait
  """
  traitDescription: String

  """
      @original-field
      The human readable name of a trait
  &lt;br/&gt;MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation
  """
  traitName: String

  """
  @original-field
  The Permanent Unique Identifier of a Trait, usually in the form of a URI
  """
  traitPUI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  ontologyReference_ID: String
  variable(search: searchVariableInput): variable
  germplasmAttribute(search: searchGermplasmattributeInput): germplasmattribute
  observationVariable(search: searchObservationvariableInput): observationvariable
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type TraitConnection {
  edges: [TraitEdge]
  traits: [trait]
  pageInfo: pageInfo!
}

type TraitEdge {
  cursor: String!
  node: trait!
}

enum traitField {
  traitDbId
  variable_ID
  germplasmAttribute_ID
  observationVariable_ID
  alternativeAbbreviations
  attribute
  attributePUI
  entity
  entityPUI
  mainAbbreviation
  status
  synonyms
  traitClass
  traitDescription
  traitName
  traitPUI
  additionalInfo_ID
  externalReferences_IDs
  ontologyReference_ID
}

input searchTraitInput {
  field: traitField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchTraitInput]
}

input orderTraitInput {
  field: traitField
  order: Order
}

type treatment {
  """@original-field"""
  treatmentDbId: ID

  """
      @original-field
      The type of treatment/factor. ex. &#39;fertilizer&#39;, &#39;inoculation&#39;, &#39;irrigation&#39;, etc
  
  MIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.
  """
  factor: String

  """
      @original-field
      The treatment/factor description. ex. &#39;low fertilizer&#39;, &#39;yellow rust inoculation&#39;, &#39;high water&#39;, etc
  
  MIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. 
  """
  modality: String

  """@original-field"""
  observationUnit_ID: String
  observationUnit(search: searchObservationunitInput): observationunit

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type TreatmentConnection {
  edges: [TreatmentEdge]
  treatments: [treatment]
  pageInfo: pageInfo!
}

type TreatmentEdge {
  cursor: String!
  node: treatment!
}

enum treatmentField {
  treatmentDbId
  factor
  modality
  observationUnit_ID
}

input searchTreatmentInput {
  field: treatmentField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchTreatmentInput]
}

input orderTreatmentInput {
  field: treatmentField
  order: Order
}

type trial {
  """@original-field"""
  trialDbId: ID

  """
  @original-field
  A flag to indicate if a Trial is currently active and ongoing
  """
  active: String

  """
  @original-field
  Common name for the crop associated with this trial
  """
  commonCropName: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  The date this trial ends
  """
  endDate: String

  """
  @original-field
  The date this trial started
  """
  startDate: String

  """
      @original-field
      The human readable description of a trial
  
  MIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.
  """
  trialDescription: String

  """
      @original-field
      The human readable name of a trial
  
  MIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.
  """
  trialName: String

  """
  @original-field
  A permanent identifier for a trial. Could be DOI or other URI formatted identifier.
  """
  trialPUI: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  contacts_IDs: [String]

  """@original-field"""
  datasetAuthorships_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  program_ID: String

  """@original-field"""
  studies_IDs: [String]

  """@original-field"""
  publications_IDs: [String]

  """@original-field"""
  plates_IDs: [String]

  """@original-field"""
  samples_IDs: [String]

  """@original-field"""
  observationUnits_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  program(search: searchProgramInput): program

  """@search-request"""
  contactsFilter(search: searchContactInput, order: [orderContactInput], pagination: paginationInput!): [contact]

  """@search-request"""
  contactsConnection(search: searchContactInput, order: [orderContactInput], pagination: paginationCursorInput!): ContactConnection

  """@count-request"""
  countFilteredContacts(search: searchContactInput): Int

  """@search-request"""
  datasetAuthorshipsFilter(search: searchDatasetauthorshipsInput, order: [orderDatasetauthorshipsInput], pagination: paginationInput!): [datasetauthorships]

  """@search-request"""
  datasetAuthorshipsConnection(search: searchDatasetauthorshipsInput, order: [orderDatasetauthorshipsInput], pagination: paginationCursorInput!): DatasetauthorshipsConnection

  """@count-request"""
  countFilteredDatasetAuthorships(search: searchDatasetauthorshipsInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  studiesFilter(search: searchStudyInput, order: [orderStudyInput], pagination: paginationInput!): [study]

  """@search-request"""
  studiesConnection(search: searchStudyInput, order: [orderStudyInput], pagination: paginationCursorInput!): StudyConnection

  """@count-request"""
  countFilteredStudies(search: searchStudyInput): Int

  """@search-request"""
  publicationsFilter(search: searchPublicationInput, order: [orderPublicationInput], pagination: paginationInput!): [publication]

  """@search-request"""
  publicationsConnection(search: searchPublicationInput, order: [orderPublicationInput], pagination: paginationCursorInput!): PublicationConnection

  """@count-request"""
  countFilteredPublications(search: searchPublicationInput): Int

  """@search-request"""
  platesFilter(search: searchPlateInput, order: [orderPlateInput], pagination: paginationInput!): [plate]

  """@search-request"""
  platesConnection(search: searchPlateInput, order: [orderPlateInput], pagination: paginationCursorInput!): PlateConnection

  """@count-request"""
  countFilteredPlates(search: searchPlateInput): Int

  """@search-request"""
  samplesFilter(search: searchSampleInput, order: [orderSampleInput], pagination: paginationInput!): [sample]

  """@search-request"""
  samplesConnection(search: searchSampleInput, order: [orderSampleInput], pagination: paginationCursorInput!): SampleConnection

  """@count-request"""
  countFilteredSamples(search: searchSampleInput): Int

  """@search-request"""
  observationUnitsFilter(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationInput!): [observationunit]

  """@search-request"""
  observationUnitsConnection(search: searchObservationunitInput, order: [orderObservationunitInput], pagination: paginationCursorInput!): ObservationunitConnection

  """@count-request"""
  countFilteredObservationUnits(search: searchObservationunitInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type TrialConnection {
  edges: [TrialEdge]
  trials: [trial]
  pageInfo: pageInfo!
}

type TrialEdge {
  cursor: String!
  node: trial!
}

enum trialField {
  trialDbId
  active
  commonCropName
  documentationURL
  endDate
  startDate
  trialDescription
  trialName
  trialPUI
  additionalInfo_ID
  contacts_IDs
  datasetAuthorships_IDs
  externalReferences_IDs
  program_ID
  studies_IDs
  publications_IDs
  plates_IDs
  samples_IDs
  observationUnits_IDs
}

input searchTrialInput {
  field: trialField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchTrialInput]
}

input orderTrialInput {
  field: trialField
  order: Order
}

type validvalues {
  """@original-field"""
  validValuesDbId: ID

  """
  @original-field
  Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.
  """
  maximumValue: String

  """
  @original-field
  Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.
  """
  minimumValue: String

  """@original-field"""
  categories_IDs: [String]

  """@original-field"""
  scale_ID: String
  scale(search: searchScaleInput): scale

  """@search-request"""
  categoriesFilter(search: searchValidvaluescategoryInput, order: [orderValidvaluescategoryInput], pagination: paginationInput!): [validvaluescategory]

  """@search-request"""
  categoriesConnection(search: searchValidvaluescategoryInput, order: [orderValidvaluescategoryInput], pagination: paginationCursorInput!): ValidvaluescategoryConnection

  """@count-request"""
  countFilteredCategories(search: searchValidvaluescategoryInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ValidvaluesConnection {
  edges: [ValidvaluesEdge]
  validvalues: [validvalues]
  pageInfo: pageInfo!
}

type ValidvaluesEdge {
  cursor: String!
  node: validvalues!
}

enum validvaluesField {
  validValuesDbId
  maximumValue
  minimumValue
  categories_IDs
  scale_ID
}

input searchValidvaluesInput {
  field: validvaluesField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchValidvaluesInput]
}

input orderValidvaluesInput {
  field: validvaluesField
  order: Order
}

type validvaluescategory {
  """@original-field"""
  validValuesCategoryDbId: ID

  """
  @original-field
  A text label for a category
  """
  label: String

  """
  @original-field
  The actual value for a category
  """
  value: String

  """@original-field"""
  validValues_ID: String
  validValues(search: searchValidvaluesInput): validvalues

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type ValidvaluescategoryConnection {
  edges: [ValidvaluescategoryEdge]
  validvaluescategories: [validvaluescategory]
  pageInfo: pageInfo!
}

type ValidvaluescategoryEdge {
  cursor: String!
  node: validvaluescategory!
}

enum validvaluescategoryField {
  validValuesCategoryDbId
  label
  value
  validValues_ID
}

input searchValidvaluescategoryInput {
  field: validvaluescategoryField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchValidvaluescategoryInput]
}

input orderValidvaluescategoryInput {
  field: validvaluescategoryField
  order: Order
}

type variable {
  """@original-field"""
  variableDbId: ID

  """
  @original-field
  Crop name (examples: &#34;Maize&#34;, &#34;Wheat&#34;)
  """
  commonCropName: String

  """
  @original-field
  Indication of how trait is routinely used. (examples: [&#34;Trial evaluation&#34;, &#34;Nursery evaluation&#34;])
  """
  contextOfUse: String

  """
  @original-field
  Variable default value. (examples: &#34;red&#34;, &#34;2.3&#34;, etc.)
  """
  defaultValue: String

  """
  @original-field
  A URL to the human readable documentation of an object
  """
  documentationURL: String

  """
  @original-field
  Growth stage at which measurement is made (examples: &#34;flowering&#34;)
  """
  growthStage: String

  """
  @original-field
  Name of institution submitting the variable
  """
  institution: String

  """
  @original-field
  2 letter ISO 639-1 code for the language of submission of the variable.
  """
  language: String

  """
  @original-field
  Name of scientist submitting the variable.
  """
  scientist: String

  """
  @original-field
  Variable status. (examples: &#34;recommended&#34;, &#34;obsolete&#34;, &#34;legacy&#34;, etc.)
  """
  status: String

  """
  @original-field
  Timestamp when the Variable was added (ISO 8601)
  """
  submissionTimestamp: String

  """
  @original-field
  Other variable names
  """
  synonyms: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  method_ID: String

  """@original-field"""
  ontologyReference_ID: String

  """@original-field"""
  scale_ID: String

  """@original-field"""
  trait_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  method(search: searchMethodInput): method
  ontologyReference(search: searchOntologyreferenceInput): ontologyreference
  scale(search: searchScaleInput): scale
  trait(search: searchTraitInput): trait

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type VariableConnection {
  edges: [VariableEdge]
  variables: [variable]
  pageInfo: pageInfo!
}

type VariableEdge {
  cursor: String!
  node: variable!
}

enum variableField {
  variableDbId
  commonCropName
  contextOfUse
  defaultValue
  documentationURL
  growthStage
  institution
  language
  scientist
  status
  submissionTimestamp
  synonyms
  additionalInfo_ID
  externalReferences_IDs
  method_ID
  ontologyReference_ID
  scale_ID
  trait_ID
}

input searchVariableInput {
  field: variableField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchVariableInput]
}

input orderVariableInput {
  field: variableField
  order: Order
}

type variant {
  """@original-field"""
  variantDbId: ID

  """
  @original-field
  Set of Analysis descriptors for this VariantSet
  """
  analysis: String

  """
  @original-field
  Similar to &#34;cipos&#34;, but for the variant&#39;s end position (which is derived from start + svlen).
  """
  ciend: String

  """
      @original-field
      In the case of structural variants, start and end of the variant may not
  be known with an exact base position. &#34;cipos&#34; provides an interval with
  high confidence for the start position. The interval is provided by 0 or
  2 signed integers which are added to the start position.
  Based on the use in VCF v4.2
  """
  cipos: String

  """
  @original-field
  The timestamp when this variant was created.
  """
  created: String

  """
      @original-field
      This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  &lt;br&gt;The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated 
  by `start + referenceBases.length`.
  """
  end: String

  """
  @original-field
  True if filters were applied for this variant. VCF column 7 &#34;FILTER&#34; any value other than the missing value.
  """
  filtersApplied: String

  """
  @original-field
  Zero or more filters that failed for this variant. VCF column 7 &#34;FILTER&#34; shared across all alleles in the same VCF record.
  """
  filtersFailed: String

  """
  @original-field
  True if all filters for this variant passed. VCF column 7 &#34;FILTER&#34; value PASS.
  """
  filtersPassed: String

  """
  @original-field
  The reference bases for this variant. They start at the given start position.
  """
  referenceBases: String

  """
      @original-field
      This field is optional and may be ignored if there is no relevant map or reference to be associated with.
  &lt;br&gt; The start position at which this variant occurs (0-based). This corresponds to the first base of the string 
  of reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning 
  the join of circular genomes are represented as two variants one on each side of the join (position 0).
  """
  start: String

  """
  @original-field
  Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2
  """
  svlen: String

  """
  @original-field
  The time at which this variant was last updated.
  """
  updated: String

  """
  @original-field
  A human readable name associated with a `Variant`
  """
  variantNames: String

  """
      @original-field
      The &#34;variant_type&#34; is used to denote e.g. structural variants.
  Examples:
    DUP  : duplication of sequence following &#34;start&#34;
    DEL  : deletion of sequence following &#34;start&#34;
  """
  variantType: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  markerPositions_IDs: [String]

  """@original-field"""
  alleleMatrices_IDs: [String]

  """@original-field"""
  calls_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  reference_ID: String

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  variantSet_ID: String
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  reference(search: searchReferenceInput): reference
  referenceSet(search: searchReferencesetInput): referenceset
  variantSet(search: searchVariantsetInput): variantset

  """@search-request"""
  markerPositionsFilter(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationInput!): [markerposition]

  """@search-request"""
  markerPositionsConnection(search: searchMarkerpositionInput, order: [orderMarkerpositionInput], pagination: paginationCursorInput!): MarkerpositionConnection

  """@count-request"""
  countFilteredMarkerPositions(search: searchMarkerpositionInput): Int

  """@search-request"""
  alleleMatricesFilter(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationInput!): [allelematrix]

  """@search-request"""
  alleleMatricesConnection(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationCursorInput!): AllelematrixConnection

  """@count-request"""
  countFilteredAlleleMatrices(search: searchAllelematrixInput): Int

  """@search-request"""
  callsFilter(search: searchCallInput, order: [orderCallInput], pagination: paginationInput!): [call]

  """@search-request"""
  callsConnection(search: searchCallInput, order: [orderCallInput], pagination: paginationCursorInput!): CallConnection

  """@count-request"""
  countFilteredCalls(search: searchCallInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type VariantConnection {
  edges: [VariantEdge]
  variants: [variant]
  pageInfo: pageInfo!
}

type VariantEdge {
  cursor: String!
  node: variant!
}

enum variantField {
  variantDbId
  analysis
  ciend
  cipos
  created
  end
  filtersApplied
  filtersFailed
  filtersPassed
  referenceBases
  start
  svlen
  updated
  variantNames
  variantType
  additionalInfo_ID
  markerPositions_IDs
  alleleMatrices_IDs
  calls_IDs
  externalReferences_IDs
  reference_ID
  referenceSet_ID
  variantSet_ID
}

input searchVariantInput {
  field: variantField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchVariantInput]
}

input orderVariantInput {
  field: variantField
  order: Order
}

type variantset {
  """@original-field"""
  variantSetDbId: ID

  """
  @original-field
  The number of CallSets included in this VariantSet
  """
  callSetCount: String

  """
  @original-field
  The number of Variants included in this VariantSet
  """
  variantCount: String

  """
  @original-field
  The human readable name for a VariantSet
  """
  variantSetName: String

  """@original-field"""
  additionalInfo_ID: String

  """@original-field"""
  alleleMatrices_IDs: [String]

  """@original-field"""
  calls_IDs: [String]

  """@original-field"""
  callSets_IDs: [String]

  """@original-field"""
  analysis_IDs: [String]

  """@original-field"""
  availableFormats_IDs: [String]

  """@original-field"""
  externalReferences_IDs: [String]

  """@original-field"""
  metadataFields_IDs: [String]

  """@original-field"""
  referenceSet_ID: String

  """@original-field"""
  study_ID: String

  """@original-field"""
  variants_IDs: [String]
  additionalInfo(search: searchAdditionalinfoInput): additionalinfo
  referenceSet(search: searchReferencesetInput): referenceset
  study(search: searchStudyInput): study

  """@search-request"""
  alleleMatricesFilter(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationInput!): [allelematrix]

  """@search-request"""
  alleleMatricesConnection(search: searchAllelematrixInput, order: [orderAllelematrixInput], pagination: paginationCursorInput!): AllelematrixConnection

  """@count-request"""
  countFilteredAlleleMatrices(search: searchAllelematrixInput): Int

  """@search-request"""
  callsFilter(search: searchCallInput, order: [orderCallInput], pagination: paginationInput!): [call]

  """@search-request"""
  callsConnection(search: searchCallInput, order: [orderCallInput], pagination: paginationCursorInput!): CallConnection

  """@count-request"""
  countFilteredCalls(search: searchCallInput): Int

  """@search-request"""
  callSetsFilter(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationInput!): [callset]

  """@search-request"""
  callSetsConnection(search: searchCallsetInput, order: [orderCallsetInput], pagination: paginationCursorInput!): CallsetConnection

  """@count-request"""
  countFilteredCallSets(search: searchCallsetInput): Int

  """@search-request"""
  analysisFilter(search: searchAnalysisInput, order: [orderAnalysisInput], pagination: paginationInput!): [analysis]

  """@search-request"""
  analysisConnection(search: searchAnalysisInput, order: [orderAnalysisInput], pagination: paginationCursorInput!): AnalysisConnection

  """@count-request"""
  countFilteredAnalysis(search: searchAnalysisInput): Int

  """@search-request"""
  availableFormatsFilter(search: searchAvailableformatInput, order: [orderAvailableformatInput], pagination: paginationInput!): [availableformat]

  """@search-request"""
  availableFormatsConnection(search: searchAvailableformatInput, order: [orderAvailableformatInput], pagination: paginationCursorInput!): AvailableformatConnection

  """@count-request"""
  countFilteredAvailableFormats(search: searchAvailableformatInput): Int

  """@search-request"""
  externalReferencesFilter(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationInput!): [externalreference]

  """@search-request"""
  externalReferencesConnection(search: searchExternalreferenceInput, order: [orderExternalreferenceInput], pagination: paginationCursorInput!): ExternalreferenceConnection

  """@count-request"""
  countFilteredExternalReferences(search: searchExternalreferenceInput): Int

  """@search-request"""
  metadataFieldsFilter(search: searchMetadatafieldInput, order: [orderMetadatafieldInput], pagination: paginationInput!): [metadatafield]

  """@search-request"""
  metadataFieldsConnection(search: searchMetadatafieldInput, order: [orderMetadatafieldInput], pagination: paginationCursorInput!): MetadatafieldConnection

  """@count-request"""
  countFilteredMetadataFields(search: searchMetadatafieldInput): Int

  """@search-request"""
  variantsFilter(search: searchVariantInput, order: [orderVariantInput], pagination: paginationInput!): [variant]

  """@search-request"""
  variantsConnection(search: searchVariantInput, order: [orderVariantInput], pagination: paginationCursorInput!): VariantConnection

  """@count-request"""
  countFilteredVariants(search: searchVariantInput): Int

  """@record as base64 encoded cursor for paginated connections"""
  asCursor: String!
}

type VariantsetConnection {
  edges: [VariantsetEdge]
  variantsets: [variantset]
  pageInfo: pageInfo!
}

type VariantsetEdge {
  cursor: String!
  node: variantset!
}

enum variantsetField {
  variantSetDbId
  callSetCount
  variantCount
  variantSetName
  additionalInfo_ID
  alleleMatrices_IDs
  calls_IDs
  callSets_IDs
  analysis_IDs
  availableFormats_IDs
  externalReferences_IDs
  metadataFields_IDs
  referenceSet_ID
  study_ID
  variants_IDs
}

input searchVariantsetInput {
  field: variantsetField
  value: String
  valueType: InputType
  operator: GenericPrestoSqlOperator
  search: [searchVariantsetInput]
}

input orderVariantsetInput {
  field: variantsetField
  order: Order
}

